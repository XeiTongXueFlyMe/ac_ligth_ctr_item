ARM GAS  /tmp/ccJEowFS.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"kservice.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.print_number,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	print_number:
  25              	.LFB33:
  26              		.file 1 "rt_thread/src/kservice.c"
   1:rt_thread/src/kservice.c **** /*
   2:rt_thread/src/kservice.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt_thread/src/kservice.c ****  *
   4:rt_thread/src/kservice.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt_thread/src/kservice.c ****  *
   6:rt_thread/src/kservice.c ****  * Change Logs:
   7:rt_thread/src/kservice.c ****  * Date           Author       Notes
   8:rt_thread/src/kservice.c ****  * 2006-03-16     Bernard      the first version
   9:rt_thread/src/kservice.c ****  * 2006-05-25     Bernard      rewrite vsprintf
  10:rt_thread/src/kservice.c ****  * 2006-08-10     Bernard      add rt_show_version
  11:rt_thread/src/kservice.c ****  * 2010-03-17     Bernard      remove rt_strlcpy function
  12:rt_thread/src/kservice.c ****  *                             fix gcc compiling issue.
  13:rt_thread/src/kservice.c ****  * 2010-04-15     Bernard      remove weak definition on ICCM16C compiler
  14:rt_thread/src/kservice.c ****  * 2012-07-18     Arda         add the alignment display for signed integer
  15:rt_thread/src/kservice.c ****  * 2012-11-23     Bernard      fix IAR compiler error.
  16:rt_thread/src/kservice.c ****  * 2012-12-22     Bernard      fix rt_kprintf issue, which found by Grissiom.
  17:rt_thread/src/kservice.c ****  * 2013-06-24     Bernard      remove rt_kprintf if RT_USING_CONSOLE is not defined.
  18:rt_thread/src/kservice.c ****  * 2013-09-24     aozima       make sure the device is in STREAM mode when used by rt_kprintf.
  19:rt_thread/src/kservice.c ****  * 2015-07-06     Bernard      Add rt_assert_handler routine.
  20:rt_thread/src/kservice.c ****  */
  21:rt_thread/src/kservice.c **** 
  22:rt_thread/src/kservice.c **** #include <rtthread.h>
  23:rt_thread/src/kservice.c **** #include <rthw.h>
  24:rt_thread/src/kservice.c **** 
  25:rt_thread/src/kservice.c **** #ifdef RT_USING_MODULE
  26:rt_thread/src/kservice.c **** #include <dlmodule.h>
  27:rt_thread/src/kservice.c **** #endif
  28:rt_thread/src/kservice.c **** 
  29:rt_thread/src/kservice.c **** /* use precision */
  30:rt_thread/src/kservice.c **** #define RT_PRINTF_PRECISION
  31:rt_thread/src/kservice.c **** 
  32:rt_thread/src/kservice.c **** /**
ARM GAS  /tmp/ccJEowFS.s 			page 2


  33:rt_thread/src/kservice.c ****  * @addtogroup KernelService
  34:rt_thread/src/kservice.c ****  */
  35:rt_thread/src/kservice.c **** 
  36:rt_thread/src/kservice.c **** /**@{*/
  37:rt_thread/src/kservice.c **** 
  38:rt_thread/src/kservice.c **** /* global errno in RT-Thread */
  39:rt_thread/src/kservice.c **** static volatile int __rt_errno;
  40:rt_thread/src/kservice.c **** 
  41:rt_thread/src/kservice.c **** #if defined(RT_USING_DEVICE) && defined(RT_USING_CONSOLE)
  42:rt_thread/src/kservice.c **** static rt_device_t _console_device = RT_NULL;
  43:rt_thread/src/kservice.c **** #endif
  44:rt_thread/src/kservice.c **** 
  45:rt_thread/src/kservice.c **** /*
  46:rt_thread/src/kservice.c ****  * This function will get errno
  47:rt_thread/src/kservice.c ****  *
  48:rt_thread/src/kservice.c ****  * @return errno
  49:rt_thread/src/kservice.c ****  */
  50:rt_thread/src/kservice.c **** rt_err_t rt_get_errno(void)
  51:rt_thread/src/kservice.c **** {
  52:rt_thread/src/kservice.c ****     rt_thread_t tid;
  53:rt_thread/src/kservice.c **** 
  54:rt_thread/src/kservice.c ****     if (rt_interrupt_get_nest() != 0)
  55:rt_thread/src/kservice.c ****     {
  56:rt_thread/src/kservice.c ****         /* it's in interrupt context */
  57:rt_thread/src/kservice.c ****         return __rt_errno;
  58:rt_thread/src/kservice.c ****     }
  59:rt_thread/src/kservice.c **** 
  60:rt_thread/src/kservice.c ****     tid = rt_thread_self();
  61:rt_thread/src/kservice.c ****     if (tid == RT_NULL)
  62:rt_thread/src/kservice.c ****         return __rt_errno;
  63:rt_thread/src/kservice.c **** 
  64:rt_thread/src/kservice.c ****     return tid->error;
  65:rt_thread/src/kservice.c **** }
  66:rt_thread/src/kservice.c **** RTM_EXPORT(rt_get_errno);
  67:rt_thread/src/kservice.c **** 
  68:rt_thread/src/kservice.c **** /*
  69:rt_thread/src/kservice.c ****  * This function will set errno
  70:rt_thread/src/kservice.c ****  *
  71:rt_thread/src/kservice.c ****  * @param error the errno shall be set
  72:rt_thread/src/kservice.c ****  */
  73:rt_thread/src/kservice.c **** void rt_set_errno(rt_err_t error)
  74:rt_thread/src/kservice.c **** {
  75:rt_thread/src/kservice.c ****     rt_thread_t tid;
  76:rt_thread/src/kservice.c **** 
  77:rt_thread/src/kservice.c ****     if (rt_interrupt_get_nest() != 0)
  78:rt_thread/src/kservice.c ****     {
  79:rt_thread/src/kservice.c ****         /* it's in interrupt context */
  80:rt_thread/src/kservice.c ****         __rt_errno = error;
  81:rt_thread/src/kservice.c **** 
  82:rt_thread/src/kservice.c ****         return;
  83:rt_thread/src/kservice.c ****     }
  84:rt_thread/src/kservice.c **** 
  85:rt_thread/src/kservice.c ****     tid = rt_thread_self();
  86:rt_thread/src/kservice.c ****     if (tid == RT_NULL)
  87:rt_thread/src/kservice.c ****     {
  88:rt_thread/src/kservice.c ****         __rt_errno = error;
  89:rt_thread/src/kservice.c **** 
ARM GAS  /tmp/ccJEowFS.s 			page 3


  90:rt_thread/src/kservice.c ****         return;
  91:rt_thread/src/kservice.c ****     }
  92:rt_thread/src/kservice.c **** 
  93:rt_thread/src/kservice.c ****     tid->error = error;
  94:rt_thread/src/kservice.c **** }
  95:rt_thread/src/kservice.c **** RTM_EXPORT(rt_set_errno);
  96:rt_thread/src/kservice.c **** 
  97:rt_thread/src/kservice.c **** /**
  98:rt_thread/src/kservice.c ****  * This function returns errno.
  99:rt_thread/src/kservice.c ****  *
 100:rt_thread/src/kservice.c ****  * @return the errno in the system
 101:rt_thread/src/kservice.c ****  */
 102:rt_thread/src/kservice.c **** int *_rt_errno(void)
 103:rt_thread/src/kservice.c **** {
 104:rt_thread/src/kservice.c ****     rt_thread_t tid;
 105:rt_thread/src/kservice.c **** 
 106:rt_thread/src/kservice.c ****     if (rt_interrupt_get_nest() != 0)
 107:rt_thread/src/kservice.c ****         return (int *)&__rt_errno;
 108:rt_thread/src/kservice.c **** 
 109:rt_thread/src/kservice.c ****     tid = rt_thread_self();
 110:rt_thread/src/kservice.c ****     if (tid != RT_NULL)
 111:rt_thread/src/kservice.c ****         return (int *) & (tid->error);
 112:rt_thread/src/kservice.c **** 
 113:rt_thread/src/kservice.c ****     return (int *)&__rt_errno;
 114:rt_thread/src/kservice.c **** }
 115:rt_thread/src/kservice.c **** RTM_EXPORT(_rt_errno);
 116:rt_thread/src/kservice.c **** 
 117:rt_thread/src/kservice.c **** /**
 118:rt_thread/src/kservice.c ****  * This function will set the content of memory to specified value
 119:rt_thread/src/kservice.c ****  *
 120:rt_thread/src/kservice.c ****  * @param s the address of source memory
 121:rt_thread/src/kservice.c ****  * @param c the value shall be set in content
 122:rt_thread/src/kservice.c ****  * @param count the copied length
 123:rt_thread/src/kservice.c ****  *
 124:rt_thread/src/kservice.c ****  * @return the address of source memory
 125:rt_thread/src/kservice.c ****  */
 126:rt_thread/src/kservice.c **** void *rt_memset(void *s, int c, rt_ubase_t count)
 127:rt_thread/src/kservice.c **** {
 128:rt_thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 129:rt_thread/src/kservice.c ****     char *xs = (char *)s;
 130:rt_thread/src/kservice.c **** 
 131:rt_thread/src/kservice.c ****     while (count--)
 132:rt_thread/src/kservice.c ****         *xs++ = c;
 133:rt_thread/src/kservice.c **** 
 134:rt_thread/src/kservice.c ****     return s;
 135:rt_thread/src/kservice.c **** #else
 136:rt_thread/src/kservice.c **** #define LBLOCKSIZE      (sizeof(long))
 137:rt_thread/src/kservice.c **** #define UNALIGNED(X)    ((long)X & (LBLOCKSIZE - 1))
 138:rt_thread/src/kservice.c **** #define TOO_SMALL(LEN)  ((LEN) < LBLOCKSIZE)
 139:rt_thread/src/kservice.c **** 
 140:rt_thread/src/kservice.c ****     unsigned int i;
 141:rt_thread/src/kservice.c ****     char *m = (char *)s;
 142:rt_thread/src/kservice.c ****     unsigned long buffer;
 143:rt_thread/src/kservice.c ****     unsigned long *aligned_addr;
 144:rt_thread/src/kservice.c ****     unsigned int d = c & 0xff;  /* To avoid sign extension, copy C to an
 145:rt_thread/src/kservice.c ****                                 unsigned variable.  */
 146:rt_thread/src/kservice.c **** 
ARM GAS  /tmp/ccJEowFS.s 			page 4


 147:rt_thread/src/kservice.c ****     if (!TOO_SMALL(count) && !UNALIGNED(s))
 148:rt_thread/src/kservice.c ****     {
 149:rt_thread/src/kservice.c ****         /* If we get this far, we know that n is large and m is word-aligned. */
 150:rt_thread/src/kservice.c ****         aligned_addr = (unsigned long *)s;
 151:rt_thread/src/kservice.c **** 
 152:rt_thread/src/kservice.c ****         /* Store D into each char sized location in BUFFER so that
 153:rt_thread/src/kservice.c ****          * we can set large blocks quickly.
 154:rt_thread/src/kservice.c ****          */
 155:rt_thread/src/kservice.c ****         if (LBLOCKSIZE == 4)
 156:rt_thread/src/kservice.c ****         {
 157:rt_thread/src/kservice.c ****             buffer = (d << 8) | d;
 158:rt_thread/src/kservice.c ****             buffer |= (buffer << 16);
 159:rt_thread/src/kservice.c ****         }
 160:rt_thread/src/kservice.c ****         else
 161:rt_thread/src/kservice.c ****         {
 162:rt_thread/src/kservice.c ****             buffer = 0;
 163:rt_thread/src/kservice.c ****             for (i = 0; i < LBLOCKSIZE; i ++)
 164:rt_thread/src/kservice.c ****                 buffer = (buffer << 8) | d;
 165:rt_thread/src/kservice.c ****         }
 166:rt_thread/src/kservice.c **** 
 167:rt_thread/src/kservice.c ****         while (count >= LBLOCKSIZE * 4)
 168:rt_thread/src/kservice.c ****         {
 169:rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 170:rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 171:rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 172:rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 173:rt_thread/src/kservice.c ****             count -= 4 * LBLOCKSIZE;
 174:rt_thread/src/kservice.c ****         }
 175:rt_thread/src/kservice.c **** 
 176:rt_thread/src/kservice.c ****         while (count >= LBLOCKSIZE)
 177:rt_thread/src/kservice.c ****         {
 178:rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 179:rt_thread/src/kservice.c ****             count -= LBLOCKSIZE;
 180:rt_thread/src/kservice.c ****         }
 181:rt_thread/src/kservice.c **** 
 182:rt_thread/src/kservice.c ****         /* Pick up the remainder with a bytewise loop. */
 183:rt_thread/src/kservice.c ****         m = (char *)aligned_addr;
 184:rt_thread/src/kservice.c ****     }
 185:rt_thread/src/kservice.c **** 
 186:rt_thread/src/kservice.c ****     while (count--)
 187:rt_thread/src/kservice.c ****     {
 188:rt_thread/src/kservice.c ****         *m++ = (char)d;
 189:rt_thread/src/kservice.c ****     }
 190:rt_thread/src/kservice.c **** 
 191:rt_thread/src/kservice.c ****     return s;
 192:rt_thread/src/kservice.c **** 
 193:rt_thread/src/kservice.c **** #undef LBLOCKSIZE
 194:rt_thread/src/kservice.c **** #undef UNALIGNED
 195:rt_thread/src/kservice.c **** #undef TOO_SMALL
 196:rt_thread/src/kservice.c **** #endif
 197:rt_thread/src/kservice.c **** }
 198:rt_thread/src/kservice.c **** RTM_EXPORT(rt_memset);
 199:rt_thread/src/kservice.c **** 
 200:rt_thread/src/kservice.c **** /**
 201:rt_thread/src/kservice.c ****  * This function will copy memory content from source address to destination
 202:rt_thread/src/kservice.c ****  * address.
 203:rt_thread/src/kservice.c ****  *
ARM GAS  /tmp/ccJEowFS.s 			page 5


 204:rt_thread/src/kservice.c ****  * @param dst the address of destination memory
 205:rt_thread/src/kservice.c ****  * @param src  the address of source memory
 206:rt_thread/src/kservice.c ****  * @param count the copied length
 207:rt_thread/src/kservice.c ****  *
 208:rt_thread/src/kservice.c ****  * @return the address of destination memory
 209:rt_thread/src/kservice.c ****  */
 210:rt_thread/src/kservice.c **** void *rt_memcpy(void *dst, const void *src, rt_ubase_t count)
 211:rt_thread/src/kservice.c **** {
 212:rt_thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 213:rt_thread/src/kservice.c ****     char *tmp = (char *)dst, *s = (char *)src;
 214:rt_thread/src/kservice.c ****     rt_ubase_t len;
 215:rt_thread/src/kservice.c **** 
 216:rt_thread/src/kservice.c ****     if (tmp <= s || tmp > (s + count))
 217:rt_thread/src/kservice.c ****     {
 218:rt_thread/src/kservice.c ****         while (count--)
 219:rt_thread/src/kservice.c ****             *tmp ++ = *s ++;
 220:rt_thread/src/kservice.c ****     }
 221:rt_thread/src/kservice.c ****     else
 222:rt_thread/src/kservice.c ****     {
 223:rt_thread/src/kservice.c ****         for (len = count; len > 0; len --)
 224:rt_thread/src/kservice.c ****             tmp[len - 1] = s[len - 1];
 225:rt_thread/src/kservice.c ****     }
 226:rt_thread/src/kservice.c **** 
 227:rt_thread/src/kservice.c ****     return dst;
 228:rt_thread/src/kservice.c **** #else
 229:rt_thread/src/kservice.c **** 
 230:rt_thread/src/kservice.c **** #define UNALIGNED(X, Y) \
 231:rt_thread/src/kservice.c ****     (((long)X & (sizeof (long) - 1)) | ((long)Y & (sizeof (long) - 1)))
 232:rt_thread/src/kservice.c **** #define BIGBLOCKSIZE    (sizeof (long) << 2)
 233:rt_thread/src/kservice.c **** #define LITTLEBLOCKSIZE (sizeof (long))
 234:rt_thread/src/kservice.c **** #define TOO_SMALL(LEN)  ((LEN) < BIGBLOCKSIZE)
 235:rt_thread/src/kservice.c **** 
 236:rt_thread/src/kservice.c ****     char *dst_ptr = (char *)dst;
 237:rt_thread/src/kservice.c ****     char *src_ptr = (char *)src;
 238:rt_thread/src/kservice.c ****     long *aligned_dst;
 239:rt_thread/src/kservice.c ****     long *aligned_src;
 240:rt_thread/src/kservice.c ****     int len = count;
 241:rt_thread/src/kservice.c **** 
 242:rt_thread/src/kservice.c ****     /* If the size is small, or either SRC or DST is unaligned,
 243:rt_thread/src/kservice.c ****     then punt into the byte copy loop.  This should be rare. */
 244:rt_thread/src/kservice.c ****     if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
 245:rt_thread/src/kservice.c ****     {
 246:rt_thread/src/kservice.c ****         aligned_dst = (long *)dst_ptr;
 247:rt_thread/src/kservice.c ****         aligned_src = (long *)src_ptr;
 248:rt_thread/src/kservice.c **** 
 249:rt_thread/src/kservice.c ****         /* Copy 4X long words at a time if possible. */
 250:rt_thread/src/kservice.c ****         while (len >= BIGBLOCKSIZE)
 251:rt_thread/src/kservice.c ****         {
 252:rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 253:rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 254:rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 255:rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 256:rt_thread/src/kservice.c ****             len -= BIGBLOCKSIZE;
 257:rt_thread/src/kservice.c ****         }
 258:rt_thread/src/kservice.c **** 
 259:rt_thread/src/kservice.c ****         /* Copy one long word at a time if possible. */
 260:rt_thread/src/kservice.c ****         while (len >= LITTLEBLOCKSIZE)
ARM GAS  /tmp/ccJEowFS.s 			page 6


 261:rt_thread/src/kservice.c ****         {
 262:rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 263:rt_thread/src/kservice.c ****             len -= LITTLEBLOCKSIZE;
 264:rt_thread/src/kservice.c ****         }
 265:rt_thread/src/kservice.c **** 
 266:rt_thread/src/kservice.c ****         /* Pick up any residual with a byte copier. */
 267:rt_thread/src/kservice.c ****         dst_ptr = (char *)aligned_dst;
 268:rt_thread/src/kservice.c ****         src_ptr = (char *)aligned_src;
 269:rt_thread/src/kservice.c ****     }
 270:rt_thread/src/kservice.c **** 
 271:rt_thread/src/kservice.c ****     while (len--)
 272:rt_thread/src/kservice.c ****         *dst_ptr++ = *src_ptr++;
 273:rt_thread/src/kservice.c **** 
 274:rt_thread/src/kservice.c ****     return dst;
 275:rt_thread/src/kservice.c **** #undef UNALIGNED
 276:rt_thread/src/kservice.c **** #undef BIGBLOCKSIZE
 277:rt_thread/src/kservice.c **** #undef LITTLEBLOCKSIZE
 278:rt_thread/src/kservice.c **** #undef TOO_SMALL
 279:rt_thread/src/kservice.c **** #endif
 280:rt_thread/src/kservice.c **** }
 281:rt_thread/src/kservice.c **** RTM_EXPORT(rt_memcpy);
 282:rt_thread/src/kservice.c **** 
 283:rt_thread/src/kservice.c **** /**
 284:rt_thread/src/kservice.c ****  * This function will move memory content from source address to destination
 285:rt_thread/src/kservice.c ****  * address.
 286:rt_thread/src/kservice.c ****  *
 287:rt_thread/src/kservice.c ****  * @param dest the address of destination memory
 288:rt_thread/src/kservice.c ****  * @param src  the address of source memory
 289:rt_thread/src/kservice.c ****  * @param n the copied length
 290:rt_thread/src/kservice.c ****  *
 291:rt_thread/src/kservice.c ****  * @return the address of destination memory
 292:rt_thread/src/kservice.c ****  */
 293:rt_thread/src/kservice.c **** void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
 294:rt_thread/src/kservice.c **** {
 295:rt_thread/src/kservice.c ****     char *tmp = (char *)dest, *s = (char *)src;
 296:rt_thread/src/kservice.c **** 
 297:rt_thread/src/kservice.c ****     if (s < tmp && tmp < s + n)
 298:rt_thread/src/kservice.c ****     {
 299:rt_thread/src/kservice.c ****         tmp += n;
 300:rt_thread/src/kservice.c ****         s += n;
 301:rt_thread/src/kservice.c **** 
 302:rt_thread/src/kservice.c ****         while (n--)
 303:rt_thread/src/kservice.c ****             *(--tmp) = *(--s);
 304:rt_thread/src/kservice.c ****     }
 305:rt_thread/src/kservice.c ****     else
 306:rt_thread/src/kservice.c ****     {
 307:rt_thread/src/kservice.c ****         while (n--)
 308:rt_thread/src/kservice.c ****             *tmp++ = *s++;
 309:rt_thread/src/kservice.c ****     }
 310:rt_thread/src/kservice.c **** 
 311:rt_thread/src/kservice.c ****     return dest;
 312:rt_thread/src/kservice.c **** }
 313:rt_thread/src/kservice.c **** RTM_EXPORT(rt_memmove);
 314:rt_thread/src/kservice.c **** 
 315:rt_thread/src/kservice.c **** /**
 316:rt_thread/src/kservice.c ****  * This function will compare two areas of memory
 317:rt_thread/src/kservice.c ****  *
ARM GAS  /tmp/ccJEowFS.s 			page 7


 318:rt_thread/src/kservice.c ****  * @param cs one area of memory
 319:rt_thread/src/kservice.c ****  * @param ct another area of memory
 320:rt_thread/src/kservice.c ****  * @param count the size of the area
 321:rt_thread/src/kservice.c ****  *
 322:rt_thread/src/kservice.c ****  * @return the result
 323:rt_thread/src/kservice.c ****  */
 324:rt_thread/src/kservice.c **** rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
 325:rt_thread/src/kservice.c **** {
 326:rt_thread/src/kservice.c ****     const unsigned char *su1, *su2;
 327:rt_thread/src/kservice.c ****     int res = 0;
 328:rt_thread/src/kservice.c **** 
 329:rt_thread/src/kservice.c ****     for (su1 = (const unsigned char *)cs, su2 = (const unsigned char *)ct; 0 < count; ++su1, ++su2,
 330:rt_thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 331:rt_thread/src/kservice.c ****             break;
 332:rt_thread/src/kservice.c **** 
 333:rt_thread/src/kservice.c ****     return res;
 334:rt_thread/src/kservice.c **** }
 335:rt_thread/src/kservice.c **** RTM_EXPORT(rt_memcmp);
 336:rt_thread/src/kservice.c **** 
 337:rt_thread/src/kservice.c **** /**
 338:rt_thread/src/kservice.c ****  * This function will return the first occurrence of a string.
 339:rt_thread/src/kservice.c ****  *
 340:rt_thread/src/kservice.c ****  * @param s1 the source string
 341:rt_thread/src/kservice.c ****  * @param s2 the find string
 342:rt_thread/src/kservice.c ****  *
 343:rt_thread/src/kservice.c ****  * @return the first occurrence of a s2 in s1, or RT_NULL if no found.
 344:rt_thread/src/kservice.c ****  */
 345:rt_thread/src/kservice.c **** char *rt_strstr(const char *s1, const char *s2)
 346:rt_thread/src/kservice.c **** {
 347:rt_thread/src/kservice.c ****     int l1, l2;
 348:rt_thread/src/kservice.c **** 
 349:rt_thread/src/kservice.c ****     l2 = rt_strlen(s2);
 350:rt_thread/src/kservice.c ****     if (!l2)
 351:rt_thread/src/kservice.c ****         return (char *)s1;
 352:rt_thread/src/kservice.c ****     l1 = rt_strlen(s1);
 353:rt_thread/src/kservice.c ****     while (l1 >= l2)
 354:rt_thread/src/kservice.c ****     {
 355:rt_thread/src/kservice.c ****         l1 --;
 356:rt_thread/src/kservice.c ****         if (!rt_memcmp(s1, s2, l2))
 357:rt_thread/src/kservice.c ****             return (char *)s1;
 358:rt_thread/src/kservice.c ****         s1 ++;
 359:rt_thread/src/kservice.c ****     }
 360:rt_thread/src/kservice.c **** 
 361:rt_thread/src/kservice.c ****     return RT_NULL;
 362:rt_thread/src/kservice.c **** }
 363:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strstr);
 364:rt_thread/src/kservice.c **** 
 365:rt_thread/src/kservice.c **** /**
 366:rt_thread/src/kservice.c ****  * This function will compare two strings while ignoring differences in case
 367:rt_thread/src/kservice.c ****  *
 368:rt_thread/src/kservice.c ****  * @param a the string to be compared
 369:rt_thread/src/kservice.c ****  * @param b the string to be compared
 370:rt_thread/src/kservice.c ****  *
 371:rt_thread/src/kservice.c ****  * @return the result
 372:rt_thread/src/kservice.c ****  */
 373:rt_thread/src/kservice.c **** rt_uint32_t rt_strcasecmp(const char *a, const char *b)
 374:rt_thread/src/kservice.c **** {
ARM GAS  /tmp/ccJEowFS.s 			page 8


 375:rt_thread/src/kservice.c ****     int ca, cb;
 376:rt_thread/src/kservice.c **** 
 377:rt_thread/src/kservice.c ****     do
 378:rt_thread/src/kservice.c ****     {
 379:rt_thread/src/kservice.c ****         ca = *a++ & 0xff;
 380:rt_thread/src/kservice.c ****         cb = *b++ & 0xff;
 381:rt_thread/src/kservice.c ****         if (ca >= 'A' && ca <= 'Z')
 382:rt_thread/src/kservice.c ****             ca += 'a' - 'A';
 383:rt_thread/src/kservice.c ****         if (cb >= 'A' && cb <= 'Z')
 384:rt_thread/src/kservice.c ****             cb += 'a' - 'A';
 385:rt_thread/src/kservice.c ****     }
 386:rt_thread/src/kservice.c ****     while (ca == cb && ca != '\0');
 387:rt_thread/src/kservice.c **** 
 388:rt_thread/src/kservice.c ****     return ca - cb;
 389:rt_thread/src/kservice.c **** }
 390:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strcasecmp);
 391:rt_thread/src/kservice.c **** 
 392:rt_thread/src/kservice.c **** /**
 393:rt_thread/src/kservice.c ****  * This function will copy string no more than n bytes.
 394:rt_thread/src/kservice.c ****  *
 395:rt_thread/src/kservice.c ****  * @param dst the string to copy
 396:rt_thread/src/kservice.c ****  * @param src the string to be copied
 397:rt_thread/src/kservice.c ****  * @param n the maximum copied length
 398:rt_thread/src/kservice.c ****  *
 399:rt_thread/src/kservice.c ****  * @return the result
 400:rt_thread/src/kservice.c ****  */
 401:rt_thread/src/kservice.c **** char *rt_strncpy(char *dst, const char *src, rt_ubase_t n)
 402:rt_thread/src/kservice.c **** {
 403:rt_thread/src/kservice.c ****     if (n != 0)
 404:rt_thread/src/kservice.c ****     {
 405:rt_thread/src/kservice.c ****         char *d = dst;
 406:rt_thread/src/kservice.c ****         const char *s = src;
 407:rt_thread/src/kservice.c **** 
 408:rt_thread/src/kservice.c ****         do
 409:rt_thread/src/kservice.c ****         {
 410:rt_thread/src/kservice.c ****             if ((*d++ = *s++) == 0)
 411:rt_thread/src/kservice.c ****             {
 412:rt_thread/src/kservice.c ****                 /* NUL pad the remaining n-1 bytes */
 413:rt_thread/src/kservice.c ****                 while (--n != 0)
 414:rt_thread/src/kservice.c ****                     *d++ = 0;
 415:rt_thread/src/kservice.c ****                 break;
 416:rt_thread/src/kservice.c ****             }
 417:rt_thread/src/kservice.c ****         } while (--n != 0);
 418:rt_thread/src/kservice.c ****     }
 419:rt_thread/src/kservice.c **** 
 420:rt_thread/src/kservice.c ****     return (dst);
 421:rt_thread/src/kservice.c **** }
 422:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strncpy);
 423:rt_thread/src/kservice.c **** 
 424:rt_thread/src/kservice.c **** /**
 425:rt_thread/src/kservice.c ****  * This function will compare two strings with specified maximum length
 426:rt_thread/src/kservice.c ****  *
 427:rt_thread/src/kservice.c ****  * @param cs the string to be compared
 428:rt_thread/src/kservice.c ****  * @param ct the string to be compared
 429:rt_thread/src/kservice.c ****  * @param count the maximum compare length
 430:rt_thread/src/kservice.c ****  *
 431:rt_thread/src/kservice.c ****  * @return the result
ARM GAS  /tmp/ccJEowFS.s 			page 9


 432:rt_thread/src/kservice.c ****  */
 433:rt_thread/src/kservice.c **** rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
 434:rt_thread/src/kservice.c **** {
 435:rt_thread/src/kservice.c ****     register signed char __res = 0;
 436:rt_thread/src/kservice.c **** 
 437:rt_thread/src/kservice.c ****     while (count)
 438:rt_thread/src/kservice.c ****     {
 439:rt_thread/src/kservice.c ****         if ((__res = *cs - *ct++) != 0 || !*cs++)
 440:rt_thread/src/kservice.c ****             break;
 441:rt_thread/src/kservice.c ****         count --;
 442:rt_thread/src/kservice.c ****     }
 443:rt_thread/src/kservice.c **** 
 444:rt_thread/src/kservice.c ****     return __res;
 445:rt_thread/src/kservice.c **** }
 446:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strncmp);
 447:rt_thread/src/kservice.c **** 
 448:rt_thread/src/kservice.c **** /**
 449:rt_thread/src/kservice.c ****  * This function will compare two strings without specified length
 450:rt_thread/src/kservice.c ****  *
 451:rt_thread/src/kservice.c ****  * @param cs the string to be compared
 452:rt_thread/src/kservice.c ****  * @param ct the string to be compared
 453:rt_thread/src/kservice.c ****  *
 454:rt_thread/src/kservice.c ****  * @return the result
 455:rt_thread/src/kservice.c ****  */
 456:rt_thread/src/kservice.c **** rt_int32_t rt_strcmp(const char *cs, const char *ct)
 457:rt_thread/src/kservice.c **** {
 458:rt_thread/src/kservice.c ****     while (*cs && *cs == *ct)
 459:rt_thread/src/kservice.c ****         cs++, ct++;
 460:rt_thread/src/kservice.c **** 
 461:rt_thread/src/kservice.c ****     return (*cs - *ct);
 462:rt_thread/src/kservice.c **** }
 463:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strcmp);
 464:rt_thread/src/kservice.c **** 
 465:rt_thread/src/kservice.c **** /**
 466:rt_thread/src/kservice.c ****  * The  strnlen()  function  returns the number of characters in the
 467:rt_thread/src/kservice.c ****  * string pointed to by s, excluding the terminating null byte ('\0'),
 468:rt_thread/src/kservice.c ****  * but at most maxlen.  In doing this, strnlen() looks only at the
 469:rt_thread/src/kservice.c ****  * first maxlen characters in the string pointed to by s and never
 470:rt_thread/src/kservice.c ****  * beyond s+maxlen.
 471:rt_thread/src/kservice.c ****  *
 472:rt_thread/src/kservice.c ****  * @param s the string
 473:rt_thread/src/kservice.c ****  * @param maxlen the max size
 474:rt_thread/src/kservice.c ****  * @return the length of string
 475:rt_thread/src/kservice.c ****  */
 476:rt_thread/src/kservice.c **** rt_size_t rt_strnlen(const char *s, rt_ubase_t maxlen)
 477:rt_thread/src/kservice.c **** {
 478:rt_thread/src/kservice.c ****     const char *sc;
 479:rt_thread/src/kservice.c **** 
 480:rt_thread/src/kservice.c ****     for (sc = s; *sc != '\0' && (rt_ubase_t)(sc - s) < maxlen; ++sc) /* nothing */
 481:rt_thread/src/kservice.c ****         ;
 482:rt_thread/src/kservice.c **** 
 483:rt_thread/src/kservice.c ****     return sc - s;
 484:rt_thread/src/kservice.c **** }
 485:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strnlen);
 486:rt_thread/src/kservice.c **** 
 487:rt_thread/src/kservice.c **** /**
 488:rt_thread/src/kservice.c ****  * This function will return the length of a string, which terminate will
ARM GAS  /tmp/ccJEowFS.s 			page 10


 489:rt_thread/src/kservice.c ****  * null character.
 490:rt_thread/src/kservice.c ****  *
 491:rt_thread/src/kservice.c ****  * @param s the string
 492:rt_thread/src/kservice.c ****  *
 493:rt_thread/src/kservice.c ****  * @return the length of string
 494:rt_thread/src/kservice.c ****  */
 495:rt_thread/src/kservice.c **** rt_size_t rt_strlen(const char *s)
 496:rt_thread/src/kservice.c **** {
 497:rt_thread/src/kservice.c ****     const char *sc;
 498:rt_thread/src/kservice.c **** 
 499:rt_thread/src/kservice.c ****     for (sc = s; *sc != '\0'; ++sc) /* nothing */
 500:rt_thread/src/kservice.c ****         ;
 501:rt_thread/src/kservice.c **** 
 502:rt_thread/src/kservice.c ****     return sc - s;
 503:rt_thread/src/kservice.c **** }
 504:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strlen);
 505:rt_thread/src/kservice.c **** 
 506:rt_thread/src/kservice.c **** #ifdef RT_USING_HEAP
 507:rt_thread/src/kservice.c **** /**
 508:rt_thread/src/kservice.c ****  * This function will duplicate a string.
 509:rt_thread/src/kservice.c ****  *
 510:rt_thread/src/kservice.c ****  * @param s the string to be duplicated
 511:rt_thread/src/kservice.c ****  *
 512:rt_thread/src/kservice.c ****  * @return the duplicated string pointer
 513:rt_thread/src/kservice.c ****  */
 514:rt_thread/src/kservice.c **** char *rt_strdup(const char *s)
 515:rt_thread/src/kservice.c **** {
 516:rt_thread/src/kservice.c ****     rt_size_t len = rt_strlen(s) + 1;
 517:rt_thread/src/kservice.c ****     char *tmp = (char *)rt_malloc(len);
 518:rt_thread/src/kservice.c **** 
 519:rt_thread/src/kservice.c ****     if (!tmp)
 520:rt_thread/src/kservice.c ****         return RT_NULL;
 521:rt_thread/src/kservice.c **** 
 522:rt_thread/src/kservice.c ****     rt_memcpy(tmp, s, len);
 523:rt_thread/src/kservice.c **** 
 524:rt_thread/src/kservice.c ****     return tmp;
 525:rt_thread/src/kservice.c **** }
 526:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strdup);
 527:rt_thread/src/kservice.c **** #if defined(__CC_ARM) || defined(__CLANG_ARM)
 528:rt_thread/src/kservice.c **** char *strdup(const char *s) __attribute__((alias("rt_strdup")));
 529:rt_thread/src/kservice.c **** #endif
 530:rt_thread/src/kservice.c **** #endif
 531:rt_thread/src/kservice.c **** 
 532:rt_thread/src/kservice.c **** /**
 533:rt_thread/src/kservice.c ****  * This function will show the version of rt-thread rtos
 534:rt_thread/src/kservice.c ****  */
 535:rt_thread/src/kservice.c **** void rt_show_version(void)
 536:rt_thread/src/kservice.c **** {
 537:rt_thread/src/kservice.c ****     rt_kprintf("\n \\ | /\n");
 538:rt_thread/src/kservice.c ****     rt_kprintf("- RT -     Thread Operating System\n");
 539:rt_thread/src/kservice.c ****     rt_kprintf(" / | \\     %d.%d.%d build %s\n",
 540:rt_thread/src/kservice.c ****                RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__);
 541:rt_thread/src/kservice.c ****     rt_kprintf(" 2006 - 2019 Copyright by rt-thread team\n");
 542:rt_thread/src/kservice.c **** }
 543:rt_thread/src/kservice.c **** RTM_EXPORT(rt_show_version);
 544:rt_thread/src/kservice.c **** 
 545:rt_thread/src/kservice.c **** /* private function */
ARM GAS  /tmp/ccJEowFS.s 			page 11


 546:rt_thread/src/kservice.c **** #define isdigit(c)  ((unsigned)((c) - '0') < 10)
 547:rt_thread/src/kservice.c **** 
 548:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 549:rt_thread/src/kservice.c **** rt_inline int divide(long long *n, int base)
 550:rt_thread/src/kservice.c **** {
 551:rt_thread/src/kservice.c ****     int res;
 552:rt_thread/src/kservice.c **** 
 553:rt_thread/src/kservice.c ****     /* optimized for processor which does not support divide instructions. */
 554:rt_thread/src/kservice.c ****     if (base == 10)
 555:rt_thread/src/kservice.c ****     {
 556:rt_thread/src/kservice.c ****         res = (int)(((unsigned long long)*n) % 10U);
 557:rt_thread/src/kservice.c ****         *n = (long long)(((unsigned long long)*n) / 10U);
 558:rt_thread/src/kservice.c ****     }
 559:rt_thread/src/kservice.c ****     else
 560:rt_thread/src/kservice.c ****     {
 561:rt_thread/src/kservice.c ****         res = (int)(((unsigned long long)*n) % 16U);
 562:rt_thread/src/kservice.c ****         *n = (long long)(((unsigned long long)*n) / 16U);
 563:rt_thread/src/kservice.c ****     }
 564:rt_thread/src/kservice.c **** 
 565:rt_thread/src/kservice.c ****     return res;
 566:rt_thread/src/kservice.c **** }
 567:rt_thread/src/kservice.c **** #else
 568:rt_thread/src/kservice.c **** rt_inline int divide(long *n, int base)
 569:rt_thread/src/kservice.c **** {
 570:rt_thread/src/kservice.c ****     int res;
 571:rt_thread/src/kservice.c **** 
 572:rt_thread/src/kservice.c ****     /* optimized for processor which does not support divide instructions. */
 573:rt_thread/src/kservice.c ****     if (base == 10)
 574:rt_thread/src/kservice.c ****     {
 575:rt_thread/src/kservice.c ****         res = (int)(((unsigned long)*n) % 10U);
 576:rt_thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 10U);
 577:rt_thread/src/kservice.c ****     }
 578:rt_thread/src/kservice.c ****     else
 579:rt_thread/src/kservice.c ****     {
 580:rt_thread/src/kservice.c ****         res = (int)(((unsigned long)*n) % 16U);
 581:rt_thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 16U);
 582:rt_thread/src/kservice.c ****     }
 583:rt_thread/src/kservice.c **** 
 584:rt_thread/src/kservice.c ****     return res;
 585:rt_thread/src/kservice.c **** }
 586:rt_thread/src/kservice.c **** #endif
 587:rt_thread/src/kservice.c **** 
 588:rt_thread/src/kservice.c **** rt_inline int skip_atoi(const char **s)
 589:rt_thread/src/kservice.c **** {
 590:rt_thread/src/kservice.c ****     register int i = 0;
 591:rt_thread/src/kservice.c ****     while (isdigit(**s))
 592:rt_thread/src/kservice.c ****         i = i * 10 + *((*s)++) - '0';
 593:rt_thread/src/kservice.c **** 
 594:rt_thread/src/kservice.c ****     return i;
 595:rt_thread/src/kservice.c **** }
 596:rt_thread/src/kservice.c **** 
 597:rt_thread/src/kservice.c **** #define ZEROPAD     (1 << 0)    /* pad with zero */
 598:rt_thread/src/kservice.c **** #define SIGN        (1 << 1)    /* unsigned/signed long */
 599:rt_thread/src/kservice.c **** #define PLUS        (1 << 2)    /* show plus */
 600:rt_thread/src/kservice.c **** #define SPACE       (1 << 3)    /* space if plus */
 601:rt_thread/src/kservice.c **** #define LEFT        (1 << 4)    /* left justified */
 602:rt_thread/src/kservice.c **** #define SPECIAL     (1 << 5)    /* 0x */
ARM GAS  /tmp/ccJEowFS.s 			page 12


 603:rt_thread/src/kservice.c **** #define LARGE       (1 << 6)    /* use 'ABCDEF' instead of 'abcdef' */
 604:rt_thread/src/kservice.c **** 
 605:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 606:rt_thread/src/kservice.c **** static char *print_number(char *buf,
 607:rt_thread/src/kservice.c ****                           char *end,
 608:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 609:rt_thread/src/kservice.c ****                           long long  num,
 610:rt_thread/src/kservice.c **** #else
 611:rt_thread/src/kservice.c ****                           long  num,
 612:rt_thread/src/kservice.c **** #endif
 613:rt_thread/src/kservice.c ****                           int   base,
 614:rt_thread/src/kservice.c ****                           int   s,
 615:rt_thread/src/kservice.c ****                           int   precision,
 616:rt_thread/src/kservice.c ****                           int   type)
 617:rt_thread/src/kservice.c **** #else
 618:rt_thread/src/kservice.c **** static char *print_number(char *buf,
 619:rt_thread/src/kservice.c ****                           char *end,
 620:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 621:rt_thread/src/kservice.c ****                           long long  num,
 622:rt_thread/src/kservice.c **** #else
 623:rt_thread/src/kservice.c ****                           long  num,
 624:rt_thread/src/kservice.c **** #endif
 625:rt_thread/src/kservice.c ****                           int   base,
 626:rt_thread/src/kservice.c ****                           int   s,
 627:rt_thread/src/kservice.c ****                           int   type)
 628:rt_thread/src/kservice.c **** #endif
 629:rt_thread/src/kservice.c **** {
  27              		.loc 1 629 0
  28              		.cfi_startproc
  29              		@ args = 12, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 36
  35              		.cfi_offset 4, -36
  36              		.cfi_offset 5, -32
  37              		.cfi_offset 6, -28
  38              		.cfi_offset 7, -24
  39              		.cfi_offset 8, -20
  40              		.cfi_offset 9, -16
  41              		.cfi_offset 10, -12
  42              		.cfi_offset 11, -8
  43              		.cfi_offset 14, -4
  44 0004 85B0     		sub	sp, sp, #20
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 56
  47 0006 0F9E     		ldr	r6, [sp, #60]
  48 0008 109F     		ldr	r7, [sp, #64]
  49              	.LVL1:
 630:rt_thread/src/kservice.c ****     char c, sign;
 631:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 632:rt_thread/src/kservice.c ****     char tmp[32];
 633:rt_thread/src/kservice.c **** #else
 634:rt_thread/src/kservice.c ****     char tmp[16];
 635:rt_thread/src/kservice.c **** #endif
 636:rt_thread/src/kservice.c ****     int precision_bak = precision;
ARM GAS  /tmp/ccJEowFS.s 			page 13


 637:rt_thread/src/kservice.c ****     const char *digits;
 638:rt_thread/src/kservice.c ****     static const char small_digits[] = "0123456789abcdef";
 639:rt_thread/src/kservice.c ****     static const char large_digits[] = "0123456789ABCDEF";
 640:rt_thread/src/kservice.c ****     register int i;
 641:rt_thread/src/kservice.c ****     register int size;
 642:rt_thread/src/kservice.c **** 
 643:rt_thread/src/kservice.c ****     size = s;
 644:rt_thread/src/kservice.c **** 
 645:rt_thread/src/kservice.c ****     digits = (type & LARGE) ? large_digits : small_digits;
  50              		.loc 1 645 0
  51 000a 17F0400F 		tst	r7, #64
  52 000e 02D0     		beq	.L33
  53 0010 DFF85491 		ldr	r9, .L41+4
  54 0014 01E0     		b	.L2
  55              	.L33:
  56 0016 DFF85491 		ldr	r9, .L41+8
  57              	.L2:
  58              	.LVL2:
 646:rt_thread/src/kservice.c ****     if (type & LEFT)
  59              		.loc 1 646 0 discriminator 4
  60 001a 17F0100F 		tst	r7, #16
  61 001e 01D0     		beq	.L3
 647:rt_thread/src/kservice.c ****         type &= ~ZEROPAD;
  62              		.loc 1 647 0
  63 0020 27F00107 		bic	r7, r7, #1
  64              	.LVL3:
  65              	.L3:
 648:rt_thread/src/kservice.c **** 
 649:rt_thread/src/kservice.c ****     c = (type & ZEROPAD) ? '0' : ' ';
  66              		.loc 1 649 0
  67 0024 17F0010F 		tst	r7, #1
  68 0028 02D0     		beq	.L34
  69 002a 4FF0300E 		mov	lr, #48
  70 002e 01E0     		b	.L4
  71              	.L34:
  72 0030 4FF0200E 		mov	lr, #32
  73              	.L4:
  74              	.LVL4:
 650:rt_thread/src/kservice.c **** 
 651:rt_thread/src/kservice.c ****     /* get sign */
 652:rt_thread/src/kservice.c ****     sign = 0;
 653:rt_thread/src/kservice.c ****     if (type & SIGN)
  75              		.loc 1 653 0 discriminator 4
  76 0034 17F0020F 		tst	r7, #2
  77 0038 0ED0     		beq	.L35
 654:rt_thread/src/kservice.c ****     {
 655:rt_thread/src/kservice.c ****         if (num < 0)
  78              		.loc 1 655 0
  79 003a 002A     		cmp	r2, #0
  80 003c 03DA     		bge	.L6
  81              	.LVL5:
 656:rt_thread/src/kservice.c ****         {
 657:rt_thread/src/kservice.c ****             sign = '-';
 658:rt_thread/src/kservice.c ****             num = -num;
  82              		.loc 1 658 0
  83 003e 5242     		negs	r2, r2
  84              	.LVL6:
ARM GAS  /tmp/ccJEowFS.s 			page 14


 657:rt_thread/src/kservice.c ****             num = -num;
  85              		.loc 1 657 0
  86 0040 4FF02D0C 		mov	ip, #45
  87 0044 10E0     		b	.L5
  88              	.LVL7:
  89              	.L6:
 659:rt_thread/src/kservice.c ****         }
 660:rt_thread/src/kservice.c ****         else if (type & PLUS)
  90              		.loc 1 660 0
  91 0046 17F0040F 		tst	r7, #4
  92 004a 08D1     		bne	.L36
 661:rt_thread/src/kservice.c ****             sign = '+';
 662:rt_thread/src/kservice.c ****         else if (type & SPACE)
  93              		.loc 1 662 0
  94 004c 17F0080F 		tst	r7, #8
  95 0050 08D1     		bne	.L37
 652:rt_thread/src/kservice.c ****     if (type & SIGN)
  96              		.loc 1 652 0
  97 0052 4FF0000C 		mov	ip, #0
  98 0056 07E0     		b	.L5
  99              	.L35:
 100 0058 4FF0000C 		mov	ip, #0
 101 005c 04E0     		b	.L5
 102              	.L36:
 661:rt_thread/src/kservice.c ****             sign = '+';
 103              		.loc 1 661 0
 104 005e 4FF02B0C 		mov	ip, #43
 105 0062 01E0     		b	.L5
 106              	.L37:
 663:rt_thread/src/kservice.c ****             sign = ' ';
 107              		.loc 1 663 0
 108 0064 4FF0200C 		mov	ip, #32
 109              	.LVL8:
 110              	.L5:
 664:rt_thread/src/kservice.c ****     }
 665:rt_thread/src/kservice.c **** 
 666:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_SPECIAL
 667:rt_thread/src/kservice.c ****     if (type & SPECIAL)
 668:rt_thread/src/kservice.c ****     {
 669:rt_thread/src/kservice.c ****         if (base == 16)
 670:rt_thread/src/kservice.c ****             size -= 2;
 671:rt_thread/src/kservice.c ****         else if (base == 8)
 672:rt_thread/src/kservice.c ****             size--;
 673:rt_thread/src/kservice.c ****     }
 674:rt_thread/src/kservice.c **** #endif
 675:rt_thread/src/kservice.c **** 
 676:rt_thread/src/kservice.c ****     i = 0;
 677:rt_thread/src/kservice.c ****     if (num == 0)
 111              		.loc 1 677 0
 112 0068 0ABB     		cbnz	r2, .L38
 113              	.LVL9:
 678:rt_thread/src/kservice.c ****         tmp[i++] = '0';
 114              		.loc 1 678 0
 115 006a 3023     		movs	r3, #48
 116              	.LVL10:
 117 006c 8DF80030 		strb	r3, [sp]
 118 0070 0124     		movs	r4, #1
ARM GAS  /tmp/ccJEowFS.s 			page 15


 119 0072 1FE0     		b	.L8
 120              	.LVL11:
 121              	.L11:
 679:rt_thread/src/kservice.c ****     else
 680:rt_thread/src/kservice.c ****     {
 681:rt_thread/src/kservice.c ****         while (num != 0)
 682:rt_thread/src/kservice.c ****             tmp[i++] = digits[divide(&num, base)];
 122              		.loc 1 682 0
 123 0074 04F10108 		add	r8, r4, #1
 124              	.LVL12:
 125              	.LBB8:
 126              	.LBB9:
 573:rt_thread/src/kservice.c ****     {
 127              		.loc 1 573 0
 128 0078 0A2B     		cmp	r3, #10
 129 007a 0CD1     		bne	.L9
 575:rt_thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 10U);
 130              		.loc 1 575 0
 131 007c 394D     		ldr	r5, .L41
 132 007e A5FB02A5 		umull	r10, r5, r5, r2
 133 0082 ED08     		lsrs	r5, r5, #3
 134 0084 AA46     		mov	r10, r5
 135 0086 05EB8505 		add	r5, r5, r5, lsl #2
 136 008a 4FEA450B 		lsl	fp, r5, #1
 137 008e CBEB020B 		rsb	fp, fp, r2
 138              	.LVL13:
 576:rt_thread/src/kservice.c ****     }
 139              		.loc 1 576 0
 140 0092 5246     		mov	r2, r10
 141              	.LVL14:
 142 0094 02E0     		b	.L10
 143              	.LVL15:
 144              	.L9:
 580:rt_thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 16U);
 145              		.loc 1 580 0
 146 0096 02F00F0B 		and	fp, r2, #15
 147              	.LVL16:
 581:rt_thread/src/kservice.c ****     }
 148              		.loc 1 581 0
 149 009a 1209     		lsrs	r2, r2, #4
 150              	.LVL17:
 151              	.L10:
 152              	.LBE9:
 153              	.LBE8:
 154              		.loc 1 682 0
 155 009c 19F80B50 		ldrb	r5, [r9, fp]	@ zero_extendqisi2
 156 00a0 0DF1100A 		add	r10, sp, #16
 157 00a4 5444     		add	r4, r4, r10
 158 00a6 04F8105C 		strb	r5, [r4, #-16]
 159 00aa 4446     		mov	r4, r8
 160 00ac 00E0     		b	.L7
 161              	.LVL18:
 162              	.L38:
 163 00ae 0024     		movs	r4, #0
 164              	.LVL19:
 165              	.L7:
 681:rt_thread/src/kservice.c ****             tmp[i++] = digits[divide(&num, base)];
ARM GAS  /tmp/ccJEowFS.s 			page 16


 166              		.loc 1 681 0
 167 00b0 002A     		cmp	r2, #0
 168 00b2 DFD1     		bne	.L11
 169              	.LVL20:
 170              	.L8:
 683:rt_thread/src/kservice.c ****     }
 684:rt_thread/src/kservice.c **** 
 685:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 686:rt_thread/src/kservice.c ****     if (i > precision)
 171              		.loc 1 686 0
 172 00b4 B442     		cmp	r4, r6
 173 00b6 01DC     		bgt	.L39
 174 00b8 3246     		mov	r2, r6
 175              	.LVL21:
 176 00ba 00E0     		b	.L12
 177              	.LVL22:
 178              	.L39:
 687:rt_thread/src/kservice.c ****         precision = i;
 179              		.loc 1 687 0
 180 00bc 2246     		mov	r2, r4
 181              	.LVL23:
 182              	.L12:
 688:rt_thread/src/kservice.c ****     size -= precision;
 183              		.loc 1 688 0
 184 00be 0E9B     		ldr	r3, [sp, #56]
 185 00c0 9B1A     		subs	r3, r3, r2
 186              	.LVL24:
 689:rt_thread/src/kservice.c **** #else
 690:rt_thread/src/kservice.c ****     size -= i;
 691:rt_thread/src/kservice.c **** #endif
 692:rt_thread/src/kservice.c **** 
 693:rt_thread/src/kservice.c ****     if (!(type & (ZEROPAD | LEFT)))
 187              		.loc 1 693 0
 188 00c2 17F0110F 		tst	r7, #17
 189 00c6 10D1     		bne	.L13
 694:rt_thread/src/kservice.c ****     {
 695:rt_thread/src/kservice.c ****         if ((sign) && (size > 0))
 190              		.loc 1 695 0
 191 00c8 BCF1000F 		cmp	ip, #0
 192 00cc 02D0     		beq	.L14
 193              		.loc 1 695 0 is_stmt 0 discriminator 1
 194 00ce 002B     		cmp	r3, #0
 195 00d0 00DD     		ble	.L14
 696:rt_thread/src/kservice.c ****             size--;
 196              		.loc 1 696 0 is_stmt 1
 197 00d2 013B     		subs	r3, r3, #1
 198              	.LVL25:
 199              	.L14:
 687:rt_thread/src/kservice.c ****     size -= precision;
 200              		.loc 1 687 0
 201 00d4 1D46     		mov	r5, r3
 202 00d6 05E0     		b	.L15
 203              	.L17:
 697:rt_thread/src/kservice.c **** 
 698:rt_thread/src/kservice.c ****         while (size-- > 0)
 699:rt_thread/src/kservice.c ****         {
 700:rt_thread/src/kservice.c ****             if (buf < end)
ARM GAS  /tmp/ccJEowFS.s 			page 17


 204              		.loc 1 700 0
 205 00d8 8842     		cmp	r0, r1
 206 00da 01D2     		bcs	.L16
 701:rt_thread/src/kservice.c ****                 *buf = ' ';
 207              		.loc 1 701 0
 208 00dc 2025     		movs	r5, #32
 209 00de 0570     		strb	r5, [r0]
 210              	.L16:
 702:rt_thread/src/kservice.c ****             ++ buf;
 211              		.loc 1 702 0
 212 00e0 0130     		adds	r0, r0, #1
 213              	.LVL26:
 698:rt_thread/src/kservice.c ****         {
 214              		.loc 1 698 0
 215 00e2 1D46     		mov	r5, r3
 216              	.L15:
 217 00e4 6B1E     		subs	r3, r5, #1
 218              	.LVL27:
 219 00e6 002D     		cmp	r5, #0
 220 00e8 F6DC     		bgt	.L17
 221              	.L13:
 703:rt_thread/src/kservice.c ****         }
 704:rt_thread/src/kservice.c ****     }
 705:rt_thread/src/kservice.c **** 
 706:rt_thread/src/kservice.c ****     if (sign)
 222              		.loc 1 706 0
 223 00ea BCF1000F 		cmp	ip, #0
 224 00ee 05D0     		beq	.L18
 707:rt_thread/src/kservice.c ****     {
 708:rt_thread/src/kservice.c ****         if (buf < end)
 225              		.loc 1 708 0
 226 00f0 8842     		cmp	r0, r1
 227 00f2 01D2     		bcs	.L19
 709:rt_thread/src/kservice.c ****         {
 710:rt_thread/src/kservice.c ****             *buf = sign;
 228              		.loc 1 710 0
 229 00f4 80F800C0 		strb	ip, [r0]
 230              	.L19:
 711:rt_thread/src/kservice.c ****         }
 712:rt_thread/src/kservice.c ****         -- size;
 231              		.loc 1 712 0
 232 00f8 013B     		subs	r3, r3, #1
 233              	.LVL28:
 713:rt_thread/src/kservice.c ****         ++ buf;
 234              		.loc 1 713 0
 235 00fa 0130     		adds	r0, r0, #1
 236              	.LVL29:
 237              	.L18:
 714:rt_thread/src/kservice.c ****     }
 715:rt_thread/src/kservice.c **** 
 716:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_SPECIAL
 717:rt_thread/src/kservice.c ****     if (type & SPECIAL)
 718:rt_thread/src/kservice.c ****     {
 719:rt_thread/src/kservice.c ****         if (base == 8)
 720:rt_thread/src/kservice.c ****         {
 721:rt_thread/src/kservice.c ****             if (buf < end)
 722:rt_thread/src/kservice.c ****                 *buf = '0';
ARM GAS  /tmp/ccJEowFS.s 			page 18


 723:rt_thread/src/kservice.c ****             ++ buf;
 724:rt_thread/src/kservice.c ****         }
 725:rt_thread/src/kservice.c ****         else if (base == 16)
 726:rt_thread/src/kservice.c ****         {
 727:rt_thread/src/kservice.c ****             if (buf < end)
 728:rt_thread/src/kservice.c ****                 *buf = '0';
 729:rt_thread/src/kservice.c ****             ++ buf;
 730:rt_thread/src/kservice.c ****             if (buf < end)
 731:rt_thread/src/kservice.c ****             {
 732:rt_thread/src/kservice.c ****                 *buf = type & LARGE ? 'X' : 'x';
 733:rt_thread/src/kservice.c ****             }
 734:rt_thread/src/kservice.c ****             ++ buf;
 735:rt_thread/src/kservice.c ****         }
 736:rt_thread/src/kservice.c ****     }
 737:rt_thread/src/kservice.c **** #endif
 738:rt_thread/src/kservice.c **** 
 739:rt_thread/src/kservice.c ****     /* no align to the left */
 740:rt_thread/src/kservice.c ****     if (!(type & LEFT))
 238              		.loc 1 740 0
 239 00fc 17F0100F 		tst	r7, #16
 240 0100 06D0     		beq	.L20
 241 0102 10E0     		b	.L24
 242              	.LVL30:
 243              	.L23:
 741:rt_thread/src/kservice.c ****     {
 742:rt_thread/src/kservice.c ****         while (size-- > 0)
 743:rt_thread/src/kservice.c ****         {
 744:rt_thread/src/kservice.c ****             if (buf < end)
 244              		.loc 1 744 0
 245 0104 8842     		cmp	r0, r1
 246 0106 01D2     		bcs	.L22
 745:rt_thread/src/kservice.c ****                 *buf = c;
 247              		.loc 1 745 0
 248 0108 80F800E0 		strb	lr, [r0]
 249              	.L22:
 746:rt_thread/src/kservice.c ****             ++ buf;
 250              		.loc 1 746 0
 251 010c 0130     		adds	r0, r0, #1
 252              	.LVL31:
 742:rt_thread/src/kservice.c ****         {
 253              		.loc 1 742 0
 254 010e 2B46     		mov	r3, r5
 255              	.LVL32:
 256              	.L20:
 257 0110 5D1E     		subs	r5, r3, #1
 258              	.LVL33:
 259 0112 002B     		cmp	r3, #0
 260 0114 F6DC     		bgt	.L23
 261 0116 2B46     		mov	r3, r5
 262 0118 05E0     		b	.L24
 263              	.LVL34:
 264              	.L26:
 747:rt_thread/src/kservice.c ****         }
 748:rt_thread/src/kservice.c ****     }
 749:rt_thread/src/kservice.c **** 
 750:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 751:rt_thread/src/kservice.c ****     while (i < precision--)
ARM GAS  /tmp/ccJEowFS.s 			page 19


 752:rt_thread/src/kservice.c ****     {
 753:rt_thread/src/kservice.c ****         if (buf < end)
 265              		.loc 1 753 0
 266 011a 8842     		cmp	r0, r1
 267 011c 01D2     		bcs	.L25
 754:rt_thread/src/kservice.c ****             *buf = '0';
 268              		.loc 1 754 0
 269 011e 3022     		movs	r2, #48
 270 0120 0270     		strb	r2, [r0]
 271              	.L25:
 755:rt_thread/src/kservice.c ****         ++ buf;
 272              		.loc 1 755 0
 273 0122 0130     		adds	r0, r0, #1
 274              	.LVL35:
 751:rt_thread/src/kservice.c ****     {
 275              		.loc 1 751 0
 276 0124 2A46     		mov	r2, r5
 277              	.LVL36:
 278              	.L24:
 279 0126 551E     		subs	r5, r2, #1
 280              	.LVL37:
 281 0128 A242     		cmp	r2, r4
 282 012a F6DC     		bgt	.L26
 283 012c 08E0     		b	.L27
 284              	.LVL38:
 285              	.L30:
 756:rt_thread/src/kservice.c ****     }
 757:rt_thread/src/kservice.c **** #endif
 758:rt_thread/src/kservice.c **** 
 759:rt_thread/src/kservice.c ****     /* put number in the temporary buffer */
 760:rt_thread/src/kservice.c ****     while (i-- > 0 && (precision_bak != 0))
 761:rt_thread/src/kservice.c ****     {
 762:rt_thread/src/kservice.c ****         if (buf < end)
 286              		.loc 1 762 0
 287 012e 8842     		cmp	r0, r1
 288 0130 04D2     		bcs	.L28
 763:rt_thread/src/kservice.c ****             *buf = tmp[i];
 289              		.loc 1 763 0
 290 0132 04AC     		add	r4, sp, #16
 291 0134 1444     		add	r4, r4, r2
 292 0136 14F8104C 		ldrb	r4, [r4, #-16]	@ zero_extendqisi2
 293 013a 0470     		strb	r4, [r0]
 294              	.L28:
 764:rt_thread/src/kservice.c ****         ++ buf;
 295              		.loc 1 764 0
 296 013c 0130     		adds	r0, r0, #1
 297              	.LVL39:
 760:rt_thread/src/kservice.c ****     {
 298              		.loc 1 760 0
 299 013e 1446     		mov	r4, r2
 300              	.LVL40:
 301              	.L27:
 302 0140 621E     		subs	r2, r4, #1
 303              	.LVL41:
 304 0142 002C     		cmp	r4, #0
 305 0144 08DD     		ble	.L29
 760:rt_thread/src/kservice.c ****     {
ARM GAS  /tmp/ccJEowFS.s 			page 20


 306              		.loc 1 760 0 is_stmt 0 discriminator 1
 307 0146 002E     		cmp	r6, #0
 308 0148 F1D1     		bne	.L30
 309 014a 05E0     		b	.L29
 310              	.LVL42:
 311              	.L32:
 765:rt_thread/src/kservice.c ****     }
 766:rt_thread/src/kservice.c **** 
 767:rt_thread/src/kservice.c ****     while (size-- > 0)
 768:rt_thread/src/kservice.c ****     {
 769:rt_thread/src/kservice.c ****         if (buf < end)
 312              		.loc 1 769 0 is_stmt 1
 313 014c 8842     		cmp	r0, r1
 314 014e 01D2     		bcs	.L31
 770:rt_thread/src/kservice.c ****             *buf = ' ';
 315              		.loc 1 770 0
 316 0150 2023     		movs	r3, #32
 317 0152 0370     		strb	r3, [r0]
 318              	.L31:
 771:rt_thread/src/kservice.c ****         ++ buf;
 319              		.loc 1 771 0
 320 0154 0130     		adds	r0, r0, #1
 321              	.LVL43:
 767:rt_thread/src/kservice.c ****     {
 322              		.loc 1 767 0
 323 0156 1346     		mov	r3, r2
 324              	.LVL44:
 325              	.L29:
 326 0158 5A1E     		subs	r2, r3, #1
 327              	.LVL45:
 328 015a 002B     		cmp	r3, #0
 329 015c F6DC     		bgt	.L32
 772:rt_thread/src/kservice.c ****     }
 773:rt_thread/src/kservice.c **** 
 774:rt_thread/src/kservice.c ****     return buf;
 775:rt_thread/src/kservice.c **** }
 330              		.loc 1 775 0
 331 015e 05B0     		add	sp, sp, #20
 332              	.LCFI2:
 333              		.cfi_def_cfa_offset 36
 334              		@ sp needed
 335 0160 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 336              	.LVL46:
 337              	.L42:
 338              		.align	2
 339              	.L41:
 340 0164 CDCCCCCC 		.word	-858993459
 341 0168 00000000 		.word	.LANCHOR0
 342 016c 00000000 		.word	.LANCHOR1
 343              		.cfi_endproc
 344              	.LFE33:
 346              		.section	.text.rt_get_errno,"ax",%progbits
 347              		.align	2
 348              		.global	rt_get_errno
 349              		.thumb
 350              		.thumb_func
 352              	rt_get_errno:
ARM GAS  /tmp/ccJEowFS.s 			page 21


 353              	.LFB15:
  51:rt_thread/src/kservice.c ****     rt_thread_t tid;
 354              		.loc 1 51 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358 0000 08B5     		push	{r3, lr}
 359              	.LCFI3:
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 3, -8
 362              		.cfi_offset 14, -4
  54:rt_thread/src/kservice.c ****     {
 363              		.loc 1 54 0
 364 0002 FFF7FEFF 		bl	rt_interrupt_get_nest
 365              	.LVL47:
 366 0006 10B1     		cbz	r0, .L44
  57:rt_thread/src/kservice.c ****     }
 367              		.loc 1 57 0
 368 0008 054B     		ldr	r3, .L48
 369 000a 1868     		ldr	r0, [r3]
 370 000c 08BD     		pop	{r3, pc}
 371              	.L44:
  60:rt_thread/src/kservice.c ****     if (tid == RT_NULL)
 372              		.loc 1 60 0
 373 000e FFF7FEFF 		bl	rt_thread_self
 374              	.LVL48:
  61:rt_thread/src/kservice.c ****         return __rt_errno;
 375              		.loc 1 61 0
 376 0012 10B9     		cbnz	r0, .L46
  62:rt_thread/src/kservice.c **** 
 377              		.loc 1 62 0
 378 0014 024B     		ldr	r3, .L48
 379 0016 1868     		ldr	r0, [r3]
 380              	.LVL49:
 381 0018 08BD     		pop	{r3, pc}
 382              	.LVL50:
 383              	.L46:
  64:rt_thread/src/kservice.c **** }
 384              		.loc 1 64 0
 385 001a 006B     		ldr	r0, [r0, #48]
 386              	.LVL51:
  65:rt_thread/src/kservice.c **** RTM_EXPORT(rt_get_errno);
 387              		.loc 1 65 0
 388 001c 08BD     		pop	{r3, pc}
 389              	.L49:
 390 001e 00BF     		.align	2
 391              	.L48:
 392 0020 00000000 		.word	.LANCHOR2
 393              		.cfi_endproc
 394              	.LFE15:
 396              		.section	.text.rt_set_errno,"ax",%progbits
 397              		.align	2
 398              		.global	rt_set_errno
 399              		.thumb
 400              		.thumb_func
 402              	rt_set_errno:
 403              	.LFB16:
ARM GAS  /tmp/ccJEowFS.s 			page 22


  74:rt_thread/src/kservice.c ****     rt_thread_t tid;
 404              		.loc 1 74 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              	.LVL52:
 409 0000 10B5     		push	{r4, lr}
 410              	.LCFI4:
 411              		.cfi_def_cfa_offset 8
 412              		.cfi_offset 4, -8
 413              		.cfi_offset 14, -4
 414 0002 0446     		mov	r4, r0
  77:rt_thread/src/kservice.c ****     {
 415              		.loc 1 77 0
 416 0004 FFF7FEFF 		bl	rt_interrupt_get_nest
 417              	.LVL53:
 418 0008 10B1     		cbz	r0, .L51
  80:rt_thread/src/kservice.c **** 
 419              		.loc 1 80 0
 420 000a 054B     		ldr	r3, .L55
 421 000c 1C60     		str	r4, [r3]
  82:rt_thread/src/kservice.c ****     }
 422              		.loc 1 82 0
 423 000e 10BD     		pop	{r4, pc}
 424              	.LVL54:
 425              	.L51:
  85:rt_thread/src/kservice.c ****     if (tid == RT_NULL)
 426              		.loc 1 85 0
 427 0010 FFF7FEFF 		bl	rt_thread_self
 428              	.LVL55:
  86:rt_thread/src/kservice.c ****     {
 429              		.loc 1 86 0
 430 0014 10B9     		cbnz	r0, .L53
  88:rt_thread/src/kservice.c **** 
 431              		.loc 1 88 0
 432 0016 024B     		ldr	r3, .L55
 433 0018 1C60     		str	r4, [r3]
  90:rt_thread/src/kservice.c ****     }
 434              		.loc 1 90 0
 435 001a 10BD     		pop	{r4, pc}
 436              	.LVL56:
 437              	.L53:
  93:rt_thread/src/kservice.c **** }
 438              		.loc 1 93 0
 439 001c 0463     		str	r4, [r0, #48]
 440 001e 10BD     		pop	{r4, pc}
 441              	.LVL57:
 442              	.L56:
 443              		.align	2
 444              	.L55:
 445 0020 00000000 		.word	.LANCHOR2
 446              		.cfi_endproc
 447              	.LFE16:
 449              		.section	.text._rt_errno,"ax",%progbits
 450              		.align	2
 451              		.global	_rt_errno
 452              		.thumb
ARM GAS  /tmp/ccJEowFS.s 			page 23


 453              		.thumb_func
 455              	_rt_errno:
 456              	.LFB17:
 103:rt_thread/src/kservice.c ****     rt_thread_t tid;
 457              		.loc 1 103 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461 0000 08B5     		push	{r3, lr}
 462              	.LCFI5:
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 3, -8
 465              		.cfi_offset 14, -4
 106:rt_thread/src/kservice.c ****         return (int *)&__rt_errno;
 466              		.loc 1 106 0
 467 0002 FFF7FEFF 		bl	rt_interrupt_get_nest
 468              	.LVL58:
 469 0006 20B9     		cbnz	r0, .L59
 109:rt_thread/src/kservice.c ****     if (tid != RT_NULL)
 470              		.loc 1 109 0
 471 0008 FFF7FEFF 		bl	rt_thread_self
 472              	.LVL59:
 110:rt_thread/src/kservice.c ****         return (int *) & (tid->error);
 473              		.loc 1 110 0
 474 000c 18B1     		cbz	r0, .L60
 111:rt_thread/src/kservice.c **** 
 475              		.loc 1 111 0
 476 000e 3030     		adds	r0, r0, #48
 477              	.LVL60:
 478 0010 08BD     		pop	{r3, pc}
 479              	.LVL61:
 480              	.L59:
 107:rt_thread/src/kservice.c **** 
 481              		.loc 1 107 0
 482 0012 0248     		ldr	r0, .L62
 483 0014 08BD     		pop	{r3, pc}
 484              	.LVL62:
 485              	.L60:
 113:rt_thread/src/kservice.c **** }
 486              		.loc 1 113 0
 487 0016 0148     		ldr	r0, .L62
 488              	.LVL63:
 114:rt_thread/src/kservice.c **** RTM_EXPORT(_rt_errno);
 489              		.loc 1 114 0
 490 0018 08BD     		pop	{r3, pc}
 491              	.L63:
 492 001a 00BF     		.align	2
 493              	.L62:
 494 001c 00000000 		.word	.LANCHOR2
 495              		.cfi_endproc
 496              	.LFE17:
 498              		.section	.text.rt_memset,"ax",%progbits
 499              		.align	2
 500              		.global	rt_memset
 501              		.thumb
 502              		.thumb_func
 504              	rt_memset:
ARM GAS  /tmp/ccJEowFS.s 			page 24


 505              	.LFB18:
 127:rt_thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 506              		.loc 1 127 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 511              	.LVL64:
 512 0000 10B4     		push	{r4}
 513              	.LCFI6:
 514              		.cfi_def_cfa_offset 4
 515              		.cfi_offset 4, -4
 516              	.LVL65:
 147:rt_thread/src/kservice.c ****     {
 517              		.loc 1 147 0
 518 0002 032A     		cmp	r2, #3
 519 0004 05D9     		bls	.L73
 520 0006 CCB2     		uxtb	r4, r1
 521              	.LVL66:
 147:rt_thread/src/kservice.c ****     {
 522              		.loc 1 147 0 is_stmt 0 discriminator 1
 523 0008 10F0030F 		tst	r0, #3
 524 000c 03D0     		beq	.L66
 141:rt_thread/src/kservice.c ****     unsigned long buffer;
 525              		.loc 1 141 0 is_stmt 1
 526 000e 0346     		mov	r3, r0
 527 0010 19E0     		b	.L67
 528              	.LVL67:
 529              	.L73:
 530 0012 0346     		mov	r3, r0
 531 0014 17E0     		b	.L67
 532              	.LVL68:
 533              	.L66:
 157:rt_thread/src/kservice.c ****             buffer |= (buffer << 16);
 534              		.loc 1 157 0
 535 0016 44EA0424 		orr	r4, r4, r4, lsl #8
 536              	.LVL69:
 158:rt_thread/src/kservice.c ****         }
 537              		.loc 1 158 0
 538 001a 44EA0444 		orr	r4, r4, r4, lsl #16
 539              	.LVL70:
 150:rt_thread/src/kservice.c **** 
 540              		.loc 1 150 0
 541 001e 0346     		mov	r3, r0
 542 0020 05E0     		b	.L68
 543              	.LVL71:
 544              	.L69:
 169:rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 545              		.loc 1 169 0
 546 0022 1C60     		str	r4, [r3]
 547              	.LVL72:
 170:rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 548              		.loc 1 170 0
 549 0024 5C60     		str	r4, [r3, #4]
 550              	.LVL73:
 171:rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 551              		.loc 1 171 0
ARM GAS  /tmp/ccJEowFS.s 			page 25


 552 0026 9C60     		str	r4, [r3, #8]
 553              	.LVL74:
 172:rt_thread/src/kservice.c ****             count -= 4 * LBLOCKSIZE;
 554              		.loc 1 172 0
 555 0028 DC60     		str	r4, [r3, #12]
 173:rt_thread/src/kservice.c ****         }
 556              		.loc 1 173 0
 557 002a 103A     		subs	r2, r2, #16
 558              	.LVL75:
 172:rt_thread/src/kservice.c ****             count -= 4 * LBLOCKSIZE;
 559              		.loc 1 172 0
 560 002c 1033     		adds	r3, r3, #16
 561              	.LVL76:
 562              	.L68:
 167:rt_thread/src/kservice.c ****         {
 563              		.loc 1 167 0
 564 002e 0F2A     		cmp	r2, #15
 565 0030 F7D8     		bhi	.L69
 566 0032 02E0     		b	.L70
 567              	.L71:
 568              	.LVL77:
 178:rt_thread/src/kservice.c ****             count -= LBLOCKSIZE;
 569              		.loc 1 178 0
 570 0034 1C60     		str	r4, [r3]
 179:rt_thread/src/kservice.c ****         }
 571              		.loc 1 179 0
 572 0036 043A     		subs	r2, r2, #4
 573              	.LVL78:
 178:rt_thread/src/kservice.c ****             count -= LBLOCKSIZE;
 574              		.loc 1 178 0
 575 0038 0433     		adds	r3, r3, #4
 576              	.LVL79:
 577              	.L70:
 176:rt_thread/src/kservice.c ****         {
 578              		.loc 1 176 0
 579 003a 032A     		cmp	r2, #3
 580 003c FAD8     		bhi	.L71
 581 003e 02E0     		b	.L67
 582              	.LVL80:
 583              	.L72:
 188:rt_thread/src/kservice.c ****     }
 584              		.loc 1 188 0
 585 0040 1970     		strb	r1, [r3]
 186:rt_thread/src/kservice.c ****     {
 586              		.loc 1 186 0
 587 0042 2246     		mov	r2, r4
 188:rt_thread/src/kservice.c ****     }
 588              		.loc 1 188 0
 589 0044 0133     		adds	r3, r3, #1
 590              	.LVL81:
 591              	.L67:
 186:rt_thread/src/kservice.c ****     {
 592              		.loc 1 186 0
 593 0046 541E     		subs	r4, r2, #1
 594              	.LVL82:
 595 0048 002A     		cmp	r2, #0
 596 004a F9D1     		bne	.L72
ARM GAS  /tmp/ccJEowFS.s 			page 26


 197:rt_thread/src/kservice.c **** RTM_EXPORT(rt_memset);
 597              		.loc 1 197 0
 598 004c 10BC     		pop	{r4}
 599              	.LCFI7:
 600              		.cfi_restore 4
 601              		.cfi_def_cfa_offset 0
 602              	.LVL83:
 603 004e 7047     		bx	lr
 604              		.cfi_endproc
 605              	.LFE18:
 607              		.weak	memset
 608              		.thumb_set memset,rt_memset
 609              		.section	.text.rt_memcpy,"ax",%progbits
 610              		.align	2
 611              		.global	rt_memcpy
 612              		.thumb
 613              		.thumb_func
 615              	rt_memcpy:
 616              	.LFB19:
 211:rt_thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 617              		.loc 1 211 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 622              	.LVL84:
 623 0000 10B4     		push	{r4}
 624              	.LCFI8:
 625              		.cfi_def_cfa_offset 4
 626              		.cfi_offset 4, -4
 627              	.LVL85:
 244:rt_thread/src/kservice.c ****     {
 628              		.loc 1 244 0
 629 0002 0F2A     		cmp	r2, #15
 630 0004 06D9     		bls	.L83
 244:rt_thread/src/kservice.c ****     {
 631              		.loc 1 244 0 is_stmt 0 discriminator 1
 632 0006 41EA0003 		orr	r3, r1, r0
 633 000a 13F0030F 		tst	r3, #3
 634 000e 0FD0     		beq	.L84
 236:rt_thread/src/kservice.c ****     char *src_ptr = (char *)src;
 635              		.loc 1 236 0 is_stmt 1
 636 0010 0346     		mov	r3, r0
 637 0012 1EE0     		b	.L78
 638              	.L83:
 639 0014 0346     		mov	r3, r0
 640 0016 1CE0     		b	.L78
 641              	.LVL86:
 642              	.L79:
 252:rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 643              		.loc 1 252 0
 644 0018 0C68     		ldr	r4, [r1]
 645 001a 1C60     		str	r4, [r3]
 646              	.LVL87:
 253:rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 647              		.loc 1 253 0
 648 001c 4C68     		ldr	r4, [r1, #4]
ARM GAS  /tmp/ccJEowFS.s 			page 27


 649 001e 5C60     		str	r4, [r3, #4]
 650              	.LVL88:
 254:rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 651              		.loc 1 254 0
 652 0020 8C68     		ldr	r4, [r1, #8]
 653 0022 9C60     		str	r4, [r3, #8]
 654              	.LVL89:
 255:rt_thread/src/kservice.c ****             len -= BIGBLOCKSIZE;
 655              		.loc 1 255 0
 656 0024 CC68     		ldr	r4, [r1, #12]
 657 0026 DC60     		str	r4, [r3, #12]
 256:rt_thread/src/kservice.c ****         }
 658              		.loc 1 256 0
 659 0028 103A     		subs	r2, r2, #16
 660              	.LVL90:
 255:rt_thread/src/kservice.c ****             len -= BIGBLOCKSIZE;
 661              		.loc 1 255 0
 662 002a 1031     		adds	r1, r1, #16
 663              	.LVL91:
 664 002c 1033     		adds	r3, r3, #16
 665              	.LVL92:
 666 002e 00E0     		b	.L77
 667              	.LVL93:
 668              	.L84:
 669 0030 0346     		mov	r3, r0
 670              	.LVL94:
 671              	.L77:
 250:rt_thread/src/kservice.c ****         {
 672              		.loc 1 250 0
 673 0032 0F2A     		cmp	r2, #15
 674 0034 F0D8     		bhi	.L79
 675 0036 04E0     		b	.L80
 676              	.L81:
 677              	.LVL95:
 262:rt_thread/src/kservice.c ****             len -= LITTLEBLOCKSIZE;
 678              		.loc 1 262 0
 679 0038 0C68     		ldr	r4, [r1]
 680 003a 1C60     		str	r4, [r3]
 263:rt_thread/src/kservice.c ****         }
 681              		.loc 1 263 0
 682 003c 043A     		subs	r2, r2, #4
 683              	.LVL96:
 262:rt_thread/src/kservice.c ****             len -= LITTLEBLOCKSIZE;
 684              		.loc 1 262 0
 685 003e 0431     		adds	r1, r1, #4
 686              	.LVL97:
 687 0040 0433     		adds	r3, r3, #4
 688              	.LVL98:
 689              	.L80:
 260:rt_thread/src/kservice.c ****         {
 690              		.loc 1 260 0
 691 0042 032A     		cmp	r2, #3
 692 0044 F8D8     		bhi	.L81
 693 0046 04E0     		b	.L78
 694              	.LVL99:
 695              	.L82:
 272:rt_thread/src/kservice.c **** 
ARM GAS  /tmp/ccJEowFS.s 			page 28


 696              		.loc 1 272 0
 697 0048 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 698 004a 1A70     		strb	r2, [r3]
 271:rt_thread/src/kservice.c ****         *dst_ptr++ = *src_ptr++;
 699              		.loc 1 271 0
 700 004c 2246     		mov	r2, r4
 272:rt_thread/src/kservice.c **** 
 701              		.loc 1 272 0
 702 004e 0131     		adds	r1, r1, #1
 703              	.LVL100:
 704 0050 0133     		adds	r3, r3, #1
 705              	.LVL101:
 706              	.L78:
 271:rt_thread/src/kservice.c ****         *dst_ptr++ = *src_ptr++;
 707              		.loc 1 271 0
 708 0052 541E     		subs	r4, r2, #1
 709              	.LVL102:
 710 0054 002A     		cmp	r2, #0
 711 0056 F7D1     		bne	.L82
 280:rt_thread/src/kservice.c **** RTM_EXPORT(rt_memcpy);
 712              		.loc 1 280 0
 713 0058 10BC     		pop	{r4}
 714              	.LCFI9:
 715              		.cfi_restore 4
 716              		.cfi_def_cfa_offset 0
 717              	.LVL103:
 718 005a 7047     		bx	lr
 719              		.cfi_endproc
 720              	.LFE19:
 722              		.weak	memcpy
 723              		.thumb_set memcpy,rt_memcpy
 724              		.section	.text.rt_memmove,"ax",%progbits
 725              		.align	2
 726              		.global	rt_memmove
 727              		.thumb
 728              		.thumb_func
 730              	rt_memmove:
 731              	.LFB20:
 294:rt_thread/src/kservice.c ****     char *tmp = (char *)dest, *s = (char *)src;
 732              		.loc 1 294 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737              	.LVL104:
 738 0000 10B4     		push	{r4}
 739              	.LCFI10:
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 4, -4
 742              	.LVL105:
 297:rt_thread/src/kservice.c ****     {
 743              		.loc 1 297 0
 744 0002 8842     		cmp	r0, r1
 745 0004 13D9     		bls	.L92
 297:rt_thread/src/kservice.c ****     {
 746              		.loc 1 297 0 is_stmt 0 discriminator 1
 747 0006 8B18     		adds	r3, r1, r2
ARM GAS  /tmp/ccJEowFS.s 			page 29


 748 0008 9842     		cmp	r0, r3
 749 000a 12D2     		bcs	.L93
 299:rt_thread/src/kservice.c ****         s += n;
 750              		.loc 1 299 0 is_stmt 1
 751 000c 8118     		adds	r1, r0, r2
 752              	.LVL106:
 302:rt_thread/src/kservice.c ****             *(--tmp) = *(--s);
 753              		.loc 1 302 0
 754 000e 04E0     		b	.L88
 755              	.LVL107:
 756              	.L89:
 303:rt_thread/src/kservice.c ****     }
 757              		.loc 1 303 0
 758 0010 13F8012D 		ldrb	r2, [r3, #-1]!	@ zero_extendqisi2
 759              	.LVL108:
 760 0014 01F8012D 		strb	r2, [r1, #-1]!
 761              	.LVL109:
 302:rt_thread/src/kservice.c ****             *(--tmp) = *(--s);
 762              		.loc 1 302 0
 763 0018 2246     		mov	r2, r4
 764              	.LVL110:
 765              	.L88:
 766 001a 541E     		subs	r4, r2, #1
 767              	.LVL111:
 768 001c 002A     		cmp	r2, #0
 769 001e F7D1     		bne	.L89
 770 0020 0BE0     		b	.L90
 771              	.LVL112:
 772              	.L91:
 308:rt_thread/src/kservice.c ****     }
 773              		.loc 1 308 0
 774 0022 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 775 0024 1A70     		strb	r2, [r3]
 307:rt_thread/src/kservice.c ****             *tmp++ = *s++;
 776              		.loc 1 307 0
 777 0026 2246     		mov	r2, r4
 308:rt_thread/src/kservice.c ****     }
 778              		.loc 1 308 0
 779 0028 0131     		adds	r1, r1, #1
 780              	.LVL113:
 781 002a 0133     		adds	r3, r3, #1
 782              	.LVL114:
 783 002c 02E0     		b	.L87
 784              	.LVL115:
 785              	.L92:
 786 002e 0346     		mov	r3, r0
 787 0030 00E0     		b	.L87
 788              	.L93:
 789 0032 0346     		mov	r3, r0
 790              	.LVL116:
 791              	.L87:
 307:rt_thread/src/kservice.c ****             *tmp++ = *s++;
 792              		.loc 1 307 0
 793 0034 541E     		subs	r4, r2, #1
 794              	.LVL117:
 795 0036 002A     		cmp	r2, #0
 796 0038 F3D1     		bne	.L91
ARM GAS  /tmp/ccJEowFS.s 			page 30


 797              	.LVL118:
 798              	.L90:
 312:rt_thread/src/kservice.c **** RTM_EXPORT(rt_memmove);
 799              		.loc 1 312 0
 800 003a 10BC     		pop	{r4}
 801              	.LCFI11:
 802              		.cfi_restore 4
 803              		.cfi_def_cfa_offset 0
 804              	.LVL119:
 805 003c 7047     		bx	lr
 806              		.cfi_endproc
 807              	.LFE20:
 809              		.weak	memmove
 810              		.thumb_set memmove,rt_memmove
 811 003e 00BF     		.section	.text.rt_memcmp,"ax",%progbits
 812              		.align	2
 813              		.global	rt_memcmp
 814              		.thumb
 815              		.thumb_func
 817              	rt_memcmp:
 818              	.LFB21:
 325:rt_thread/src/kservice.c ****     const unsigned char *su1, *su2;
 819              		.loc 1 325 0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 0
 822              		@ frame_needed = 0, uses_anonymous_args = 0
 823              		@ link register save eliminated.
 824              	.LVL120:
 825 0000 10B4     		push	{r4}
 826              	.LCFI12:
 827              		.cfi_def_cfa_offset 4
 828              		.cfi_offset 4, -4
 829              	.LVL121:
 327:rt_thread/src/kservice.c **** 
 830              		.loc 1 327 0
 831 0002 0023     		movs	r3, #0
 329:rt_thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 832              		.loc 1 329 0
 833 0004 06E0     		b	.L96
 834              	.LVL122:
 835              	.L98:
 330:rt_thread/src/kservice.c ****             break;
 836              		.loc 1 330 0
 837 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 838              	.LVL123:
 839 0008 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 840              	.LVL124:
 841 000a 1B1B     		subs	r3, r3, r4
 842              	.LVL125:
 843 000c 04D1     		bne	.L97
 329:rt_thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 844              		.loc 1 329 0 discriminator 2
 845 000e 0130     		adds	r0, r0, #1
 846              	.LVL126:
 847 0010 0131     		adds	r1, r1, #1
 848              	.LVL127:
 849 0012 013A     		subs	r2, r2, #1
ARM GAS  /tmp/ccJEowFS.s 			page 31


 850              	.LVL128:
 851              	.L96:
 329:rt_thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 852              		.loc 1 329 0 is_stmt 0 discriminator 1
 853 0014 002A     		cmp	r2, #0
 854 0016 F6D1     		bne	.L98
 855              	.L97:
 334:rt_thread/src/kservice.c **** RTM_EXPORT(rt_memcmp);
 856              		.loc 1 334 0 is_stmt 1
 857 0018 1846     		mov	r0, r3
 858              	.LVL129:
 859 001a 10BC     		pop	{r4}
 860              	.LCFI13:
 861              		.cfi_restore 4
 862              		.cfi_def_cfa_offset 0
 863 001c 7047     		bx	lr
 864              		.cfi_endproc
 865              	.LFE21:
 867              		.weak	memcmp
 868              		.thumb_set memcmp,rt_memcmp
 869 001e 00BF     		.section	.text.rt_strcasecmp,"ax",%progbits
 870              		.align	2
 871              		.global	rt_strcasecmp
 872              		.thumb
 873              		.thumb_func
 875              	rt_strcasecmp:
 876              	.LFB23:
 374:rt_thread/src/kservice.c ****     int ca, cb;
 877              		.loc 1 374 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              		@ link register save eliminated.
 882              	.LVL130:
 883 0000 70B4     		push	{r4, r5, r6}
 884              	.LCFI14:
 885              		.cfi_def_cfa_offset 12
 886              		.cfi_offset 4, -12
 887              		.cfi_offset 5, -8
 888              		.cfi_offset 6, -4
 889              	.L104:
 379:rt_thread/src/kservice.c ****         cb = *b++ & 0xff;
 890              		.loc 1 379 0
 891 0002 461C     		adds	r6, r0, #1
 892              	.LVL131:
 893 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 894              	.LVL132:
 380:rt_thread/src/kservice.c ****         if (ca >= 'A' && ca <= 'Z')
 895              		.loc 1 380 0
 896 0006 4D1C     		adds	r5, r1, #1
 897              	.LVL133:
 898 0008 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 899 000a 1446     		mov	r4, r2
 900              	.LVL134:
 381:rt_thread/src/kservice.c ****             ca += 'a' - 'A';
 901              		.loc 1 381 0
 902 000c A3F14101 		sub	r1, r3, #65
ARM GAS  /tmp/ccJEowFS.s 			page 32


 903 0010 1929     		cmp	r1, #25
 904 0012 00D8     		bhi	.L101
 382:rt_thread/src/kservice.c ****         if (cb >= 'A' && cb <= 'Z')
 905              		.loc 1 382 0
 906 0014 2033     		adds	r3, r3, #32
 907              	.LVL135:
 908              	.L101:
 383:rt_thread/src/kservice.c ****             cb += 'a' - 'A';
 909              		.loc 1 383 0
 910 0016 A2F14101 		sub	r1, r2, #65
 911 001a 1929     		cmp	r1, #25
 912 001c 01D8     		bhi	.L102
 384:rt_thread/src/kservice.c ****     }
 913              		.loc 1 384 0
 914 001e 02F12004 		add	r4, r2, #32
 915              	.LVL136:
 916              	.L102:
 386:rt_thread/src/kservice.c **** 
 917              		.loc 1 386 0
 918 0022 A342     		cmp	r3, r4
 919 0024 03D1     		bne	.L103
 379:rt_thread/src/kservice.c ****         cb = *b++ & 0xff;
 920              		.loc 1 379 0 discriminator 1
 921 0026 3046     		mov	r0, r6
 380:rt_thread/src/kservice.c ****         if (ca >= 'A' && ca <= 'Z')
 922              		.loc 1 380 0 discriminator 1
 923 0028 2946     		mov	r1, r5
 386:rt_thread/src/kservice.c **** 
 924              		.loc 1 386 0 discriminator 1
 925 002a 002B     		cmp	r3, #0
 926 002c E9D1     		bne	.L104
 927              	.L103:
 389:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strcasecmp);
 928              		.loc 1 389 0
 929 002e 181B     		subs	r0, r3, r4
 930 0030 70BC     		pop	{r4, r5, r6}
 931              	.LCFI15:
 932              		.cfi_restore 6
 933              		.cfi_restore 5
 934              		.cfi_restore 4
 935              		.cfi_def_cfa_offset 0
 936              	.LVL137:
 937 0032 7047     		bx	lr
 938              		.cfi_endproc
 939              	.LFE23:
 941              		.weak	strcasecmp
 942              		.thumb_set strcasecmp,rt_strcasecmp
 943              		.section	.text.rt_strncpy,"ax",%progbits
 944              		.align	2
 945              		.global	rt_strncpy
 946              		.thumb
 947              		.thumb_func
 949              	rt_strncpy:
 950              	.LFB24:
 402:rt_thread/src/kservice.c ****     if (n != 0)
 951              		.loc 1 402 0
 952              		.cfi_startproc
ARM GAS  /tmp/ccJEowFS.s 			page 33


 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 955              		@ link register save eliminated.
 956              	.LVL138:
 403:rt_thread/src/kservice.c ****     {
 957              		.loc 1 403 0
 958 0000 9AB1     		cbz	r2, .L115
 402:rt_thread/src/kservice.c ****     if (n != 0)
 959              		.loc 1 402 0
 960 0002 30B4     		push	{r4, r5}
 961              	.LCFI16:
 962              		.cfi_def_cfa_offset 8
 963              		.cfi_offset 4, -8
 964              		.cfi_offset 5, -4
 965 0004 1346     		mov	r3, r2
 966 0006 0446     		mov	r4, r0
 967              	.LVL139:
 968              	.L111:
 969              	.LBB10:
 410:rt_thread/src/kservice.c ****             {
 970              		.loc 1 410 0
 971 0008 621C     		adds	r2, r4, #1
 972              	.LVL140:
 973 000a 4D1C     		adds	r5, r1, #1
 974              	.LVL141:
 975 000c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 976 000e 2170     		strb	r1, [r4]
 977 0010 31B9     		cbnz	r1, .L112
 978 0012 02E0     		b	.L108
 979              	.L110:
 980              	.LVL142:
 414:rt_thread/src/kservice.c ****                 break;
 981              		.loc 1 414 0
 982 0014 0021     		movs	r1, #0
 983 0016 1170     		strb	r1, [r2]
 984 0018 0132     		adds	r2, r2, #1
 985              	.LVL143:
 986              	.L108:
 413:rt_thread/src/kservice.c ****                     *d++ = 0;
 987              		.loc 1 413 0
 988 001a 013B     		subs	r3, r3, #1
 989              	.LVL144:
 990 001c FAD1     		bne	.L110
 991 001e 03E0     		b	.L107
 992              	.L112:
 993              	.LVL145:
 410:rt_thread/src/kservice.c ****             {
 994              		.loc 1 410 0
 995 0020 1446     		mov	r4, r2
 996 0022 2946     		mov	r1, r5
 417:rt_thread/src/kservice.c ****     }
 997              		.loc 1 417 0
 998 0024 013B     		subs	r3, r3, #1
 999              	.LVL146:
 1000 0026 EFD1     		bne	.L111
 1001              	.L107:
 1002              	.LBE10:
ARM GAS  /tmp/ccJEowFS.s 			page 34


 421:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strncpy);
 1003              		.loc 1 421 0
 1004 0028 30BC     		pop	{r4, r5}
 1005              	.LCFI17:
 1006              		.cfi_restore 5
 1007              		.cfi_restore 4
 1008              		.cfi_def_cfa_offset 0
 1009              	.LVL147:
 1010              	.L115:
 1011 002a 7047     		bx	lr
 1012              		.cfi_endproc
 1013              	.LFE24:
 1015              		.weak	strncpy
 1016              		.thumb_set strncpy,rt_strncpy
 1017              		.section	.text.rt_strncmp,"ax",%progbits
 1018              		.align	2
 1019              		.global	rt_strncmp
 1020              		.thumb
 1021              		.thumb_func
 1023              	rt_strncmp:
 1024              	.LFB25:
 434:rt_thread/src/kservice.c ****     register signed char __res = 0;
 1025              		.loc 1 434 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              		@ link register save eliminated.
 1030              	.LVL148:
 1031 0000 30B4     		push	{r4, r5}
 1032              	.LCFI18:
 1033              		.cfi_def_cfa_offset 8
 1034              		.cfi_offset 4, -8
 1035              		.cfi_offset 5, -4
 1036              	.LVL149:
 435:rt_thread/src/kservice.c **** 
 1037              		.loc 1 435 0
 1038 0002 0023     		movs	r3, #0
 437:rt_thread/src/kservice.c ****     {
 1039              		.loc 1 437 0
 1040 0004 09E0     		b	.L117
 1041              	.LVL150:
 1042              	.L119:
 439:rt_thread/src/kservice.c ****             break;
 1043              		.loc 1 439 0
 1044 0006 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 1045 0008 4D1C     		adds	r5, r1, #1
 1046              	.LVL151:
 1047 000a 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1048              	.LVL152:
 1049 000c E31A     		subs	r3, r4, r3
 1050 000e 5BB2     		sxtb	r3, r3
 1051              	.LVL153:
 1052 0010 2BB9     		cbnz	r3, .L118
 439:rt_thread/src/kservice.c ****             break;
 1053              		.loc 1 439 0 is_stmt 0 discriminator 1
 1054 0012 0130     		adds	r0, r0, #1
 1055              	.LVL154:
ARM GAS  /tmp/ccJEowFS.s 			page 35


 1056 0014 1CB1     		cbz	r4, .L118
 441:rt_thread/src/kservice.c ****     }
 1057              		.loc 1 441 0 is_stmt 1
 1058 0016 013A     		subs	r2, r2, #1
 1059              	.LVL155:
 439:rt_thread/src/kservice.c ****             break;
 1060              		.loc 1 439 0
 1061 0018 2946     		mov	r1, r5
 1062              	.LVL156:
 1063              	.L117:
 437:rt_thread/src/kservice.c ****     {
 1064              		.loc 1 437 0
 1065 001a 002A     		cmp	r2, #0
 1066 001c F3D1     		bne	.L119
 1067              	.LVL157:
 1068              	.L118:
 445:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strncmp);
 1069              		.loc 1 445 0
 1070 001e 1846     		mov	r0, r3
 1071              	.LVL158:
 1072 0020 30BC     		pop	{r4, r5}
 1073              	.LCFI19:
 1074              		.cfi_restore 5
 1075              		.cfi_restore 4
 1076              		.cfi_def_cfa_offset 0
 1077 0022 7047     		bx	lr
 1078              		.cfi_endproc
 1079              	.LFE25:
 1081              		.weak	strncmp
 1082              		.thumb_set strncmp,rt_strncmp
 1083              		.section	.text.rt_strcmp,"ax",%progbits
 1084              		.align	2
 1085              		.global	rt_strcmp
 1086              		.thumb
 1087              		.thumb_func
 1089              	rt_strcmp:
 1090              	.LFB26:
 457:rt_thread/src/kservice.c ****     while (*cs && *cs == *ct)
 1091              		.loc 1 457 0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 1095              		@ link register save eliminated.
 1096              	.LVL159:
 458:rt_thread/src/kservice.c ****         cs++, ct++;
 1097              		.loc 1 458 0
 1098 0000 01E0     		b	.L122
 1099              	.L124:
 459:rt_thread/src/kservice.c **** 
 1100              		.loc 1 459 0
 1101 0002 0130     		adds	r0, r0, #1
 1102              	.LVL160:
 1103 0004 0131     		adds	r1, r1, #1
 1104              	.LVL161:
 1105              	.L122:
 458:rt_thread/src/kservice.c ****         cs++, ct++;
 1106              		.loc 1 458 0
ARM GAS  /tmp/ccJEowFS.s 			page 36


 1107 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1108 0008 13B1     		cbz	r3, .L123
 458:rt_thread/src/kservice.c ****         cs++, ct++;
 1109              		.loc 1 458 0 is_stmt 0 discriminator 1
 1110 000a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 1111 000c 9342     		cmp	r3, r2
 1112 000e F8D0     		beq	.L124
 1113              	.L123:
 461:rt_thread/src/kservice.c **** }
 1114              		.loc 1 461 0 is_stmt 1
 1115 0010 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 1116              	.LVL162:
 462:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strcmp);
 1117              		.loc 1 462 0
 1118 0012 181A     		subs	r0, r3, r0
 1119 0014 7047     		bx	lr
 1120              		.cfi_endproc
 1121              	.LFE26:
 1123 0016 00BF     		.section	.text.rt_strnlen,"ax",%progbits
 1124              		.align	2
 1125              		.global	rt_strnlen
 1126              		.thumb
 1127              		.thumb_func
 1129              	rt_strnlen:
 1130              	.LFB27:
 477:rt_thread/src/kservice.c ****     const char *sc;
 1131              		.loc 1 477 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 0
 1134              		@ frame_needed = 0, uses_anonymous_args = 0
 1135              		@ link register save eliminated.
 1136              	.LVL163:
 480:rt_thread/src/kservice.c ****         ;
 1137              		.loc 1 480 0
 1138 0000 0346     		mov	r3, r0
 1139 0002 00E0     		b	.L126
 1140              	.LVL164:
 1141              	.L128:
 480:rt_thread/src/kservice.c ****         ;
 1142              		.loc 1 480 0 is_stmt 0 discriminator 4
 1143 0004 0133     		adds	r3, r3, #1
 1144              	.LVL165:
 1145              	.L126:
 480:rt_thread/src/kservice.c ****         ;
 1146              		.loc 1 480 0 discriminator 1
 1147 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1148 0008 12B1     		cbz	r2, .L127
 480:rt_thread/src/kservice.c ****         ;
 1149              		.loc 1 480 0 discriminator 3
 1150 000a 1A1A     		subs	r2, r3, r0
 1151 000c 8A42     		cmp	r2, r1
 1152 000e F9D3     		bcc	.L128
 1153              	.L127:
 484:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strnlen);
 1154              		.loc 1 484 0 is_stmt 1
 1155 0010 181A     		subs	r0, r3, r0
 1156              	.LVL166:
ARM GAS  /tmp/ccJEowFS.s 			page 37


 1157 0012 7047     		bx	lr
 1158              		.cfi_endproc
 1159              	.LFE27:
 1161              		.section	.text.rt_strlen,"ax",%progbits
 1162              		.align	2
 1163              		.global	rt_strlen
 1164              		.thumb
 1165              		.thumb_func
 1167              	rt_strlen:
 1168              	.LFB28:
 496:rt_thread/src/kservice.c ****     const char *sc;
 1169              		.loc 1 496 0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 0
 1172              		@ frame_needed = 0, uses_anonymous_args = 0
 1173              		@ link register save eliminated.
 1174              	.LVL167:
 499:rt_thread/src/kservice.c ****         ;
 1175              		.loc 1 499 0
 1176 0000 0346     		mov	r3, r0
 1177 0002 00E0     		b	.L130
 1178              	.LVL168:
 1179              	.L131:
 499:rt_thread/src/kservice.c ****         ;
 1180              		.loc 1 499 0 is_stmt 0 discriminator 3
 1181 0004 0133     		adds	r3, r3, #1
 1182              	.LVL169:
 1183              	.L130:
 499:rt_thread/src/kservice.c ****         ;
 1184              		.loc 1 499 0 discriminator 1
 1185 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1186 0008 002A     		cmp	r2, #0
 1187 000a FBD1     		bne	.L131
 503:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strlen);
 1188              		.loc 1 503 0 is_stmt 1
 1189 000c 181A     		subs	r0, r3, r0
 1190              	.LVL170:
 1191 000e 7047     		bx	lr
 1192              		.cfi_endproc
 1193              	.LFE28:
 1195              		.weak	strlen
 1196              		.thumb_set strlen,rt_strlen
 1197              		.section	.text.rt_strstr,"ax",%progbits
 1198              		.align	2
 1199              		.global	rt_strstr
 1200              		.thumb
 1201              		.thumb_func
 1203              	rt_strstr:
 1204              	.LFB22:
 346:rt_thread/src/kservice.c ****     int l1, l2;
 1205              		.loc 1 346 0
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 0
 1208              		@ frame_needed = 0, uses_anonymous_args = 0
 1209              	.LVL171:
 1210 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1211              	.LCFI20:
ARM GAS  /tmp/ccJEowFS.s 			page 38


 1212              		.cfi_def_cfa_offset 24
 1213              		.cfi_offset 4, -24
 1214              		.cfi_offset 5, -20
 1215              		.cfi_offset 6, -16
 1216              		.cfi_offset 7, -12
 1217              		.cfi_offset 8, -8
 1218              		.cfi_offset 14, -4
 1219 0004 0446     		mov	r4, r0
 1220 0006 0F46     		mov	r7, r1
 349:rt_thread/src/kservice.c ****     if (!l2)
 1221              		.loc 1 349 0
 1222 0008 0846     		mov	r0, r1
 1223              	.LVL172:
 1224 000a FFF7FEFF 		bl	rt_strlen
 1225              	.LVL173:
 350:rt_thread/src/kservice.c ****         return (char *)s1;
 1226              		.loc 1 350 0
 1227 000e 98B1     		cbz	r0, .L136
 1228 0010 0646     		mov	r6, r0
 1229 0012 8046     		mov	r8, r0
 352:rt_thread/src/kservice.c ****     while (l1 >= l2)
 1230              		.loc 1 352 0
 1231 0014 2046     		mov	r0, r4
 1232              	.LVL174:
 1233 0016 FFF7FEFF 		bl	rt_strlen
 1234              	.LVL175:
 1235 001a 0546     		mov	r5, r0
 1236              	.LVL176:
 353:rt_thread/src/kservice.c ****     {
 1237              		.loc 1 353 0
 1238 001c 07E0     		b	.L134
 1239              	.LVL177:
 1240              	.L135:
 355:rt_thread/src/kservice.c ****         if (!rt_memcmp(s1, s2, l2))
 1241              		.loc 1 355 0
 1242 001e 013D     		subs	r5, r5, #1
 1243              	.LVL178:
 356:rt_thread/src/kservice.c ****             return (char *)s1;
 1244              		.loc 1 356 0
 1245 0020 3246     		mov	r2, r6
 1246 0022 3946     		mov	r1, r7
 1247 0024 2046     		mov	r0, r4
 1248 0026 FFF7FEFF 		bl	rt_memcmp
 1249              	.LVL179:
 1250 002a 40B1     		cbz	r0, .L137
 358:rt_thread/src/kservice.c ****     }
 1251              		.loc 1 358 0
 1252 002c 0134     		adds	r4, r4, #1
 1253              	.LVL180:
 1254              	.L134:
 353:rt_thread/src/kservice.c ****     {
 1255              		.loc 1 353 0
 1256 002e 4545     		cmp	r5, r8
 1257 0030 F5DA     		bge	.L135
 361:rt_thread/src/kservice.c **** }
 1258              		.loc 1 361 0
 1259 0032 0020     		movs	r0, #0
ARM GAS  /tmp/ccJEowFS.s 			page 39


 1260 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1261              	.LVL181:
 1262              	.L136:
 351:rt_thread/src/kservice.c ****     l1 = rt_strlen(s1);
 1263              		.loc 1 351 0
 1264 0038 2046     		mov	r0, r4
 1265              	.LVL182:
 1266 003a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1267              	.LVL183:
 1268              	.L137:
 357:rt_thread/src/kservice.c ****         s1 ++;
 1269              		.loc 1 357 0
 1270 003e 2046     		mov	r0, r4
 362:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strstr);
 1271              		.loc 1 362 0
 1272 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1273              		.cfi_endproc
 1274              	.LFE22:
 1276              		.weak	strstr
 1277              		.thumb_set strstr,rt_strstr
 1278              		.section	.text.rt_strdup,"ax",%progbits
 1279              		.align	2
 1280              		.global	rt_strdup
 1281              		.thumb
 1282              		.thumb_func
 1284              	rt_strdup:
 1285              	.LFB29:
 515:rt_thread/src/kservice.c ****     rt_size_t len = rt_strlen(s) + 1;
 1286              		.loc 1 515 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              	.LVL184:
 1291 0000 70B5     		push	{r4, r5, r6, lr}
 1292              	.LCFI21:
 1293              		.cfi_def_cfa_offset 16
 1294              		.cfi_offset 4, -16
 1295              		.cfi_offset 5, -12
 1296              		.cfi_offset 6, -8
 1297              		.cfi_offset 14, -4
 1298 0002 0646     		mov	r6, r0
 516:rt_thread/src/kservice.c ****     char *tmp = (char *)rt_malloc(len);
 1299              		.loc 1 516 0
 1300 0004 FFF7FEFF 		bl	rt_strlen
 1301              	.LVL185:
 1302 0008 451C     		adds	r5, r0, #1
 1303              	.LVL186:
 517:rt_thread/src/kservice.c **** 
 1304              		.loc 1 517 0
 1305 000a 2846     		mov	r0, r5
 1306 000c FFF7FEFF 		bl	rt_malloc
 1307              	.LVL187:
 519:rt_thread/src/kservice.c ****         return RT_NULL;
 1308              		.loc 1 519 0
 1309 0010 30B1     		cbz	r0, .L141
 1310 0012 0446     		mov	r4, r0
 522:rt_thread/src/kservice.c **** 
ARM GAS  /tmp/ccJEowFS.s 			page 40


 1311              		.loc 1 522 0
 1312 0014 2A46     		mov	r2, r5
 1313 0016 3146     		mov	r1, r6
 1314 0018 FFF7FEFF 		bl	rt_memcpy
 1315              	.LVL188:
 524:rt_thread/src/kservice.c **** }
 1316              		.loc 1 524 0
 1317 001c 2046     		mov	r0, r4
 1318 001e 70BD     		pop	{r4, r5, r6, pc}
 1319              	.LVL189:
 1320              	.L141:
 520:rt_thread/src/kservice.c **** 
 1321              		.loc 1 520 0
 1322 0020 0020     		movs	r0, #0
 1323              	.LVL190:
 525:rt_thread/src/kservice.c **** RTM_EXPORT(rt_strdup);
 1324              		.loc 1 525 0
 1325 0022 70BD     		pop	{r4, r5, r6, pc}
 1326              		.cfi_endproc
 1327              	.LFE29:
 1329              		.weak	strdup
 1330              		.thumb_set strdup,rt_strdup
 1331              		.section	.text.rt_vsnprintf,"ax",%progbits
 1332              		.align	2
 1333              		.global	rt_vsnprintf
 1334              		.thumb
 1335              		.thumb_func
 1337              	rt_vsnprintf:
 1338              	.LFB34:
 776:rt_thread/src/kservice.c **** 
 777:rt_thread/src/kservice.c **** rt_int32_t rt_vsnprintf(char       *buf,
 778:rt_thread/src/kservice.c ****                         rt_size_t   size,
 779:rt_thread/src/kservice.c ****                         const char *fmt,
 780:rt_thread/src/kservice.c ****                         va_list     args)
 781:rt_thread/src/kservice.c **** {
 1339              		.loc 1 781 0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 8
 1342              		@ frame_needed = 0, uses_anonymous_args = 0
 1343              	.LVL191:
 1344 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1345              	.LCFI22:
 1346              		.cfi_def_cfa_offset 36
 1347              		.cfi_offset 4, -36
 1348              		.cfi_offset 5, -32
 1349              		.cfi_offset 6, -28
 1350              		.cfi_offset 7, -24
 1351              		.cfi_offset 8, -20
 1352              		.cfi_offset 9, -16
 1353              		.cfi_offset 10, -12
 1354              		.cfi_offset 11, -8
 1355              		.cfi_offset 14, -4
 1356 0004 87B0     		sub	sp, sp, #28
 1357              	.LCFI23:
 1358              		.cfi_def_cfa_offset 64
 1359 0006 0490     		str	r0, [sp, #16]
 1360 0008 0591     		str	r1, [sp, #20]
ARM GAS  /tmp/ccJEowFS.s 			page 41


 1361 000a 1446     		mov	r4, r2
 1362 000c 9A46     		mov	r10, r3
 1363              	.LVL192:
 782:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 783:rt_thread/src/kservice.c ****     unsigned long long num;
 784:rt_thread/src/kservice.c **** #else
 785:rt_thread/src/kservice.c ****     rt_uint32_t num;
 786:rt_thread/src/kservice.c **** #endif
 787:rt_thread/src/kservice.c ****     int i, len;
 788:rt_thread/src/kservice.c ****     char *str, *end, c;
 789:rt_thread/src/kservice.c ****     const char *s;
 790:rt_thread/src/kservice.c **** 
 791:rt_thread/src/kservice.c ****     rt_uint8_t base;            /* the base of number */
 792:rt_thread/src/kservice.c ****     rt_uint8_t flags;           /* flags to print number */
 793:rt_thread/src/kservice.c ****     rt_uint8_t qualifier;       /* 'h', 'l', or 'L' for integer fields */
 794:rt_thread/src/kservice.c ****     rt_int32_t field_width;     /* width of output field */
 795:rt_thread/src/kservice.c **** 
 796:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 797:rt_thread/src/kservice.c ****     int precision;      /* min. # of digits for integers and max for a string */
 798:rt_thread/src/kservice.c **** #endif
 799:rt_thread/src/kservice.c **** 
 800:rt_thread/src/kservice.c ****     str = buf;
 801:rt_thread/src/kservice.c ****     end = buf + size;
 802:rt_thread/src/kservice.c **** 
 803:rt_thread/src/kservice.c ****     /* Make sure end is always >= buf */
 804:rt_thread/src/kservice.c ****     if (end < buf)
 1364              		.loc 1 804 0
 1365 000e 10EB0109 		adds	r9, r0, r1
 1366              	.LVL193:
 1367 0012 03D3     		bcc	.L144
 1368              	.LVL194:
 805:rt_thread/src/kservice.c ****     {
 806:rt_thread/src/kservice.c ****         end  = ((char *) - 1);
 807:rt_thread/src/kservice.c ****         size = end - buf;
 1369              		.loc 1 807 0
 1370 0014 C343     		mvns	r3, r0
 1371              	.LVL195:
 1372 0016 0593     		str	r3, [sp, #20]
 1373              	.LVL196:
 806:rt_thread/src/kservice.c ****         size = end - buf;
 1374              		.loc 1 806 0
 1375 0018 4FF0FF39 		mov	r9, #-1
 1376              	.LVL197:
 1377              	.L144:
 808:rt_thread/src/kservice.c ****     }
 809:rt_thread/src/kservice.c **** 
 810:rt_thread/src/kservice.c ****     for (; *fmt ; ++fmt)
 811:rt_thread/src/kservice.c ****     {
 812:rt_thread/src/kservice.c ****         if (*fmt != '%')
 813:rt_thread/src/kservice.c ****         {
 814:rt_thread/src/kservice.c ****             if (str < end)
 815:rt_thread/src/kservice.c ****                 *str = *fmt;
 816:rt_thread/src/kservice.c ****             ++ str;
 817:rt_thread/src/kservice.c ****             continue;
 818:rt_thread/src/kservice.c ****         }
 819:rt_thread/src/kservice.c **** 
 820:rt_thread/src/kservice.c ****         /* process flags */
ARM GAS  /tmp/ccJEowFS.s 			page 42


 821:rt_thread/src/kservice.c ****         flags = 0;
 822:rt_thread/src/kservice.c **** 
 823:rt_thread/src/kservice.c ****         while (1)
 824:rt_thread/src/kservice.c ****         {
 825:rt_thread/src/kservice.c ****             /* skips the first '%' also */
 826:rt_thread/src/kservice.c ****             ++ fmt;
 827:rt_thread/src/kservice.c ****             if (*fmt == '-') flags |= LEFT;
 828:rt_thread/src/kservice.c ****             else if (*fmt == '+') flags |= PLUS;
 829:rt_thread/src/kservice.c ****             else if (*fmt == ' ') flags |= SPACE;
 830:rt_thread/src/kservice.c ****             else if (*fmt == '#') flags |= SPECIAL;
 831:rt_thread/src/kservice.c ****             else if (*fmt == '0') flags |= ZEROPAD;
 832:rt_thread/src/kservice.c ****             else break;
 833:rt_thread/src/kservice.c ****         }
 834:rt_thread/src/kservice.c **** 
 835:rt_thread/src/kservice.c ****         /* get field width */
 836:rt_thread/src/kservice.c ****         field_width = -1;
 837:rt_thread/src/kservice.c ****         if (isdigit(*fmt)) field_width = skip_atoi(&fmt);
 838:rt_thread/src/kservice.c ****         else if (*fmt == '*')
 839:rt_thread/src/kservice.c ****         {
 840:rt_thread/src/kservice.c ****             ++ fmt;
 841:rt_thread/src/kservice.c ****             /* it's the next argument */
 842:rt_thread/src/kservice.c ****             field_width = va_arg(args, int);
 843:rt_thread/src/kservice.c ****             if (field_width < 0)
 844:rt_thread/src/kservice.c ****             {
 845:rt_thread/src/kservice.c ****                 field_width = -field_width;
 846:rt_thread/src/kservice.c ****                 flags |= LEFT;
 847:rt_thread/src/kservice.c ****             }
 848:rt_thread/src/kservice.c ****         }
 849:rt_thread/src/kservice.c **** 
 850:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 851:rt_thread/src/kservice.c ****         /* get the precision */
 852:rt_thread/src/kservice.c ****         precision = -1;
 853:rt_thread/src/kservice.c ****         if (*fmt == '.')
 854:rt_thread/src/kservice.c ****         {
 855:rt_thread/src/kservice.c ****             ++ fmt;
 856:rt_thread/src/kservice.c ****             if (isdigit(*fmt)) precision = skip_atoi(&fmt);
 857:rt_thread/src/kservice.c ****             else if (*fmt == '*')
 858:rt_thread/src/kservice.c ****             {
 859:rt_thread/src/kservice.c ****                 ++ fmt;
 860:rt_thread/src/kservice.c ****                 /* it's the next argument */
 861:rt_thread/src/kservice.c ****                 precision = va_arg(args, int);
 862:rt_thread/src/kservice.c ****             }
 863:rt_thread/src/kservice.c ****             if (precision < 0) precision = 0;
 864:rt_thread/src/kservice.c ****         }
 865:rt_thread/src/kservice.c **** #endif
 866:rt_thread/src/kservice.c ****         /* get the conversion qualifier */
 867:rt_thread/src/kservice.c ****         qualifier = 0;
 868:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 869:rt_thread/src/kservice.c ****         if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
 870:rt_thread/src/kservice.c **** #else
 871:rt_thread/src/kservice.c ****         if (*fmt == 'h' || *fmt == 'l')
 872:rt_thread/src/kservice.c **** #endif
 873:rt_thread/src/kservice.c ****         {
 874:rt_thread/src/kservice.c ****             qualifier = *fmt;
 875:rt_thread/src/kservice.c ****             ++ fmt;
 876:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 877:rt_thread/src/kservice.c ****             if (qualifier == 'l' && *fmt == 'l')
ARM GAS  /tmp/ccJEowFS.s 			page 43


 878:rt_thread/src/kservice.c ****             {
 879:rt_thread/src/kservice.c ****                 qualifier = 'L';
 880:rt_thread/src/kservice.c ****                 ++ fmt;
 881:rt_thread/src/kservice.c ****             }
 882:rt_thread/src/kservice.c **** #endif
 883:rt_thread/src/kservice.c ****         }
 884:rt_thread/src/kservice.c **** 
 885:rt_thread/src/kservice.c ****         /* the default base */
 886:rt_thread/src/kservice.c ****         base = 10;
 887:rt_thread/src/kservice.c **** 
 888:rt_thread/src/kservice.c ****         switch (*fmt)
 889:rt_thread/src/kservice.c ****         {
 890:rt_thread/src/kservice.c ****         case 'c':
 891:rt_thread/src/kservice.c ****             if (!(flags & LEFT))
 892:rt_thread/src/kservice.c ****             {
 893:rt_thread/src/kservice.c ****                 while (--field_width > 0)
 894:rt_thread/src/kservice.c ****                 {
 895:rt_thread/src/kservice.c ****                     if (str < end) *str = ' ';
 896:rt_thread/src/kservice.c ****                     ++ str;
 897:rt_thread/src/kservice.c ****                 }
 898:rt_thread/src/kservice.c ****             }
 899:rt_thread/src/kservice.c **** 
 900:rt_thread/src/kservice.c ****             /* get character */
 901:rt_thread/src/kservice.c ****             c = (rt_uint8_t)va_arg(args, int);
 902:rt_thread/src/kservice.c ****             if (str < end) *str = c;
 903:rt_thread/src/kservice.c ****             ++ str;
 904:rt_thread/src/kservice.c **** 
 905:rt_thread/src/kservice.c ****             /* put width */
 906:rt_thread/src/kservice.c ****             while (--field_width > 0)
 907:rt_thread/src/kservice.c ****             {
 908:rt_thread/src/kservice.c ****                 if (str < end) *str = ' ';
 909:rt_thread/src/kservice.c ****                 ++ str;
 910:rt_thread/src/kservice.c ****             }
 911:rt_thread/src/kservice.c ****             continue;
 912:rt_thread/src/kservice.c **** 
 913:rt_thread/src/kservice.c ****         case 's':
 914:rt_thread/src/kservice.c ****             s = va_arg(args, char *);
 915:rt_thread/src/kservice.c ****             if (!s) s = "(NULL)";
 916:rt_thread/src/kservice.c **** 
 917:rt_thread/src/kservice.c ****             len = rt_strlen(s);
 918:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 919:rt_thread/src/kservice.c ****             if (precision > 0 && len > precision) len = precision;
 920:rt_thread/src/kservice.c **** #endif
 921:rt_thread/src/kservice.c **** 
 922:rt_thread/src/kservice.c ****             if (!(flags & LEFT))
 923:rt_thread/src/kservice.c ****             {
 924:rt_thread/src/kservice.c ****                 while (len < field_width--)
 925:rt_thread/src/kservice.c ****                 {
 926:rt_thread/src/kservice.c ****                     if (str < end) *str = ' ';
 927:rt_thread/src/kservice.c ****                     ++ str;
 928:rt_thread/src/kservice.c ****                 }
 929:rt_thread/src/kservice.c ****             }
 930:rt_thread/src/kservice.c **** 
 931:rt_thread/src/kservice.c ****             for (i = 0; i < len; ++i)
 932:rt_thread/src/kservice.c ****             {
 933:rt_thread/src/kservice.c ****                 if (str < end) *str = *s;
 934:rt_thread/src/kservice.c ****                 ++ str;
ARM GAS  /tmp/ccJEowFS.s 			page 44


 935:rt_thread/src/kservice.c ****                 ++ s;
 936:rt_thread/src/kservice.c ****             }
 937:rt_thread/src/kservice.c **** 
 938:rt_thread/src/kservice.c ****             while (len < field_width--)
 939:rt_thread/src/kservice.c ****             {
 940:rt_thread/src/kservice.c ****                 if (str < end) *str = ' ';
 941:rt_thread/src/kservice.c ****                 ++ str;
 942:rt_thread/src/kservice.c ****             }
 943:rt_thread/src/kservice.c ****             continue;
 944:rt_thread/src/kservice.c **** 
 945:rt_thread/src/kservice.c ****         case 'p':
 946:rt_thread/src/kservice.c ****             if (field_width == -1)
 947:rt_thread/src/kservice.c ****             {
 948:rt_thread/src/kservice.c ****                 field_width = sizeof(void *) << 1;
 949:rt_thread/src/kservice.c ****                 flags |= ZEROPAD;
 950:rt_thread/src/kservice.c ****             }
 951:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 952:rt_thread/src/kservice.c ****             str = print_number(str, end,
 953:rt_thread/src/kservice.c ****                                (long)va_arg(args, void *),
 954:rt_thread/src/kservice.c ****                                16, field_width, precision, flags);
 955:rt_thread/src/kservice.c **** #else
 956:rt_thread/src/kservice.c ****             str = print_number(str, end,
 957:rt_thread/src/kservice.c ****                                (long)va_arg(args, void *),
 958:rt_thread/src/kservice.c ****                                16, field_width, flags);
 959:rt_thread/src/kservice.c **** #endif
 960:rt_thread/src/kservice.c ****             continue;
 961:rt_thread/src/kservice.c **** 
 962:rt_thread/src/kservice.c ****         case '%':
 963:rt_thread/src/kservice.c ****             if (str < end) *str = '%';
 964:rt_thread/src/kservice.c ****             ++ str;
 965:rt_thread/src/kservice.c ****             continue;
 966:rt_thread/src/kservice.c **** 
 967:rt_thread/src/kservice.c ****         /* integer number formats - set up the flags and "break" */
 968:rt_thread/src/kservice.c ****         case 'o':
 969:rt_thread/src/kservice.c ****             base = 8;
 970:rt_thread/src/kservice.c ****             break;
 971:rt_thread/src/kservice.c **** 
 972:rt_thread/src/kservice.c ****         case 'X':
 973:rt_thread/src/kservice.c ****             flags |= LARGE;
 974:rt_thread/src/kservice.c ****         case 'x':
 975:rt_thread/src/kservice.c ****             base = 16;
 1378              		.loc 1 975 0 discriminator 1
 1379 001c 049F     		ldr	r7, [sp, #16]
 1380 001e 5FE1     		b	.L145
 1381              	.LVL198:
 1382              	.L206:
 812:rt_thread/src/kservice.c ****         {
 1383              		.loc 1 812 0
 1384 0020 252B     		cmp	r3, #37
 1385 0022 06D0     		beq	.L209
 814:rt_thread/src/kservice.c ****                 *str = *fmt;
 1386              		.loc 1 814 0
 1387 0024 4F45     		cmp	r7, r9
 1388 0026 00D2     		bcs	.L147
 815:rt_thread/src/kservice.c ****             ++ str;
 1389              		.loc 1 815 0
 1390 0028 3B70     		strb	r3, [r7]
ARM GAS  /tmp/ccJEowFS.s 			page 45


 1391              	.L147:
 816:rt_thread/src/kservice.c ****             continue;
 1392              		.loc 1 816 0
 1393 002a 0137     		adds	r7, r7, #1
 1394              	.LVL199:
 817:rt_thread/src/kservice.c ****         }
 1395              		.loc 1 817 0
 1396 002c 57E1     		b	.L148
 1397              	.LVL200:
 1398              	.L150:
 1399 002e 1446     		mov	r4, r2
 1400 0030 00E0     		b	.L146
 1401              	.LVL201:
 1402              	.L209:
 1403 0032 0025     		movs	r5, #0
 1404              	.L146:
 1405              	.LVL202:
 826:rt_thread/src/kservice.c ****             if (*fmt == '-') flags |= LEFT;
 1406              		.loc 1 826 0
 1407 0034 621C     		adds	r2, r4, #1
 1408              	.LVL203:
 827:rt_thread/src/kservice.c ****             else if (*fmt == '+') flags |= PLUS;
 1409              		.loc 1 827 0
 1410 0036 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1411 0038 2D2B     		cmp	r3, #45
 1412 003a 02D1     		bne	.L149
 827:rt_thread/src/kservice.c ****             else if (*fmt == '+') flags |= PLUS;
 1413              		.loc 1 827 0 is_stmt 0 discriminator 1
 1414 003c 45F01005 		orr	r5, r5, #16
 1415              	.LVL204:
 1416 0040 F5E7     		b	.L150
 1417              	.L149:
 828:rt_thread/src/kservice.c ****             else if (*fmt == ' ') flags |= SPACE;
 1418              		.loc 1 828 0 is_stmt 1
 1419 0042 2B2B     		cmp	r3, #43
 1420 0044 02D1     		bne	.L151
 828:rt_thread/src/kservice.c ****             else if (*fmt == ' ') flags |= SPACE;
 1421              		.loc 1 828 0 is_stmt 0 discriminator 1
 1422 0046 45F00405 		orr	r5, r5, #4
 1423              	.LVL205:
 1424 004a F0E7     		b	.L150
 1425              	.L151:
 829:rt_thread/src/kservice.c ****             else if (*fmt == '#') flags |= SPECIAL;
 1426              		.loc 1 829 0 is_stmt 1
 1427 004c 202B     		cmp	r3, #32
 1428 004e 02D1     		bne	.L152
 829:rt_thread/src/kservice.c ****             else if (*fmt == '#') flags |= SPECIAL;
 1429              		.loc 1 829 0 is_stmt 0 discriminator 1
 1430 0050 45F00805 		orr	r5, r5, #8
 1431              	.LVL206:
 1432 0054 EBE7     		b	.L150
 1433              	.L152:
 830:rt_thread/src/kservice.c ****             else if (*fmt == '0') flags |= ZEROPAD;
 1434              		.loc 1 830 0 is_stmt 1
 1435 0056 232B     		cmp	r3, #35
 1436 0058 02D1     		bne	.L153
 830:rt_thread/src/kservice.c ****             else if (*fmt == '0') flags |= ZEROPAD;
ARM GAS  /tmp/ccJEowFS.s 			page 46


 1437              		.loc 1 830 0 is_stmt 0 discriminator 1
 1438 005a 45F02005 		orr	r5, r5, #32
 1439              	.LVL207:
 1440 005e E6E7     		b	.L150
 1441              	.L153:
 831:rt_thread/src/kservice.c ****             else break;
 1442              		.loc 1 831 0 is_stmt 1
 1443 0060 302B     		cmp	r3, #48
 1444 0062 02D1     		bne	.L154
 831:rt_thread/src/kservice.c ****             else break;
 1445              		.loc 1 831 0 is_stmt 0 discriminator 1
 1446 0064 45F00105 		orr	r5, r5, #1
 1447              	.LVL208:
 1448 0068 E1E7     		b	.L150
 1449              	.L154:
 1450              	.LVL209:
 837:rt_thread/src/kservice.c ****         else if (*fmt == '*')
 1451              		.loc 1 837 0 is_stmt 1
 1452 006a A3F13001 		sub	r1, r3, #48
 1453 006e 0929     		cmp	r1, #9
 1454 0070 07D9     		bls	.L210
 1455 0072 0EE0     		b	.L220
 1456              	.LVL210:
 1457              	.L157:
 1458              	.LBB11:
 1459              	.LBB12:
 592:rt_thread/src/kservice.c **** 
 1460              		.loc 1 592 0
 1461 0074 06EB8601 		add	r1, r6, r6, lsl #2
 1462 0078 4E00     		lsls	r6, r1, #1
 1463              	.LVL211:
 1464 007a 0132     		adds	r2, r2, #1
 1465              	.LVL212:
 1466 007c 1E44     		add	r6, r6, r3
 1467 007e 303E     		subs	r6, r6, #48
 1468              	.LVL213:
 1469 0080 00E0     		b	.L155
 1470              	.LVL214:
 1471              	.L210:
 1472              	.LBE12:
 1473              	.LBE11:
 1474 0082 0026     		movs	r6, #0
 1475              	.L155:
 1476              	.LVL215:
 1477              	.LBB14:
 1478              	.LBB13:
 591:rt_thread/src/kservice.c ****         i = i * 10 + *((*s)++) - '0';
 1479              		.loc 1 591 0
 1480 0084 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1481 0086 A3F13001 		sub	r1, r3, #48
 1482 008a 0929     		cmp	r1, #9
 1483 008c F2D9     		bls	.L157
 1484 008e 1446     		mov	r4, r2
 1485 0090 0FE0     		b	.L158
 1486              	.LVL216:
 1487              	.L220:
 1488              	.LBE13:
ARM GAS  /tmp/ccJEowFS.s 			page 47


 1489              	.LBE14:
 838:rt_thread/src/kservice.c ****         {
 1490              		.loc 1 838 0
 1491 0092 2A2B     		cmp	r3, #42
 1492 0094 0AD1     		bne	.L211
 840:rt_thread/src/kservice.c ****             /* it's the next argument */
 1493              		.loc 1 840 0
 1494 0096 0234     		adds	r4, r4, #2
 1495              	.LVL217:
 842:rt_thread/src/kservice.c ****             if (field_width < 0)
 1496              		.loc 1 842 0
 1497 0098 DAF80060 		ldr	r6, [r10]
 1498              	.LVL218:
 1499 009c 0AF1040A 		add	r10, r10, #4
 1500              	.LVL219:
 843:rt_thread/src/kservice.c ****             {
 1501              		.loc 1 843 0
 1502 00a0 002E     		cmp	r6, #0
 1503 00a2 06DA     		bge	.L158
 845:rt_thread/src/kservice.c ****                 flags |= LEFT;
 1504              		.loc 1 845 0
 1505 00a4 7642     		negs	r6, r6
 1506              	.LVL220:
 846:rt_thread/src/kservice.c ****             }
 1507              		.loc 1 846 0
 1508 00a6 45F01005 		orr	r5, r5, #16
 1509              	.LVL221:
 1510 00aa 02E0     		b	.L158
 1511              	.LVL222:
 1512              	.L211:
 826:rt_thread/src/kservice.c ****             if (*fmt == '-') flags |= LEFT;
 1513              		.loc 1 826 0
 1514 00ac 1446     		mov	r4, r2
 836:rt_thread/src/kservice.c ****         if (isdigit(*fmt)) field_width = skip_atoi(&fmt);
 1515              		.loc 1 836 0
 1516 00ae 4FF0FF36 		mov	r6, #-1
 1517              	.LVL223:
 1518              	.L158:
 853:rt_thread/src/kservice.c ****         {
 1519              		.loc 1 853 0
 1520 00b2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1521 00b4 2E2B     		cmp	r3, #46
 1522 00b6 27D1     		bne	.L212
 855:rt_thread/src/kservice.c ****             if (isdigit(*fmt)) precision = skip_atoi(&fmt);
 1523              		.loc 1 855 0
 1524 00b8 621C     		adds	r2, r4, #1
 1525              	.LVL224:
 856:rt_thread/src/kservice.c ****             else if (*fmt == '*')
 1526              		.loc 1 856 0
 1527 00ba 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1528 00bc A3F13001 		sub	r1, r3, #48
 1529 00c0 0929     		cmp	r1, #9
 1530 00c2 09D9     		bls	.L213
 1531 00c4 11E0     		b	.L221
 1532              	.LVL225:
 1533              	.L162:
 1534              	.LBB15:
ARM GAS  /tmp/ccJEowFS.s 			page 48


 1535              	.LBB16:
 592:rt_thread/src/kservice.c **** 
 1536              		.loc 1 592 0
 1537 00c6 08EB8801 		add	r1, r8, r8, lsl #2
 1538 00ca 4FEA4108 		lsl	r8, r1, #1
 1539              	.LVL226:
 1540 00ce 0132     		adds	r2, r2, #1
 1541              	.LVL227:
 1542 00d0 9844     		add	r8, r8, r3
 1543 00d2 A8F13008 		sub	r8, r8, #48
 1544              	.LVL228:
 1545 00d6 01E0     		b	.L160
 1546              	.LVL229:
 1547              	.L213:
 1548              	.LBE16:
 1549              	.LBE15:
 1550 00d8 4FF00008 		mov	r8, #0
 1551              	.L160:
 1552              	.LVL230:
 1553              	.LBB18:
 1554              	.LBB17:
 591:rt_thread/src/kservice.c ****         i = i * 10 + *((*s)++) - '0';
 1555              		.loc 1 591 0
 1556 00dc 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1557 00de A3F13001 		sub	r1, r3, #48
 1558 00e2 0929     		cmp	r1, #9
 1559 00e4 EFD9     		bls	.L162
 1560 00e6 1446     		mov	r4, r2
 1561 00e8 0AE0     		b	.L163
 1562              	.LVL231:
 1563              	.L221:
 1564              	.LBE17:
 1565              	.LBE18:
 857:rt_thread/src/kservice.c ****             {
 1566              		.loc 1 857 0
 1567 00ea 2A2B     		cmp	r3, #42
 1568 00ec 05D1     		bne	.L214
 859:rt_thread/src/kservice.c ****                 /* it's the next argument */
 1569              		.loc 1 859 0
 1570 00ee 0234     		adds	r4, r4, #2
 1571              	.LVL232:
 861:rt_thread/src/kservice.c ****             }
 1572              		.loc 1 861 0
 1573 00f0 DAF80080 		ldr	r8, [r10]
 1574              	.LVL233:
 1575 00f4 0AF1040A 		add	r10, r10, #4
 1576              	.LVL234:
 1577 00f8 02E0     		b	.L163
 1578              	.LVL235:
 1579              	.L214:
 855:rt_thread/src/kservice.c ****             if (isdigit(*fmt)) precision = skip_atoi(&fmt);
 1580              		.loc 1 855 0
 1581 00fa 1446     		mov	r4, r2
 852:rt_thread/src/kservice.c ****         if (*fmt == '.')
 1582              		.loc 1 852 0
 1583 00fc 4FF0FF38 		mov	r8, #-1
 1584              	.LVL236:
ARM GAS  /tmp/ccJEowFS.s 			page 49


 1585              	.L163:
 863:rt_thread/src/kservice.c ****         }
 1586              		.loc 1 863 0
 1587 0100 B8F1000F 		cmp	r8, #0
 1588 0104 05DA     		bge	.L159
 1589 0106 02E0     		b	.L215
 1590              	.LVL237:
 1591              	.L212:
 852:rt_thread/src/kservice.c ****         if (*fmt == '.')
 1592              		.loc 1 852 0
 1593 0108 4FF0FF38 		mov	r8, #-1
 1594 010c 01E0     		b	.L159
 1595              	.LVL238:
 1596              	.L215:
 863:rt_thread/src/kservice.c ****         }
 1597              		.loc 1 863 0
 1598 010e 4FF00008 		mov	r8, #0
 1599              	.LVL239:
 1600              	.L159:
 871:rt_thread/src/kservice.c **** #endif
 1601              		.loc 1 871 0
 1602 0112 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 1603 0114 682A     		cmp	r2, #104
 1604 0116 01D0     		beq	.L164
 871:rt_thread/src/kservice.c **** #endif
 1605              		.loc 1 871 0 is_stmt 0 discriminator 1
 1606 0118 6C2A     		cmp	r2, #108
 1607 011a 01D1     		bne	.L216
 1608              	.L164:
 1609              	.LVL240:
 875:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 1610              		.loc 1 875 0 is_stmt 1
 1611 011c 0134     		adds	r4, r4, #1
 1612              	.LVL241:
 1613 011e 00E0     		b	.L165
 1614              	.LVL242:
 1615              	.L216:
 867:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 1616              		.loc 1 867 0
 1617 0120 0022     		movs	r2, #0
 1618              	.LVL243:
 1619              	.L165:
 888:rt_thread/src/kservice.c ****         {
 1620              		.loc 1 888 0
 1621 0122 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1622 0124 253B     		subs	r3, r3, #37
 1623 0126 532B     		cmp	r3, #83
 1624 0128 00F2A780 		bhi	.L166
 1625 012c DFE803F0 		tbb	[pc, r3]
 1626              	.L168:
 1627 0130 95       		.byte	(.L167-.L168)/2
 1628 0131 A5       		.byte	(.L166-.L168)/2
 1629 0132 A5       		.byte	(.L166-.L168)/2
 1630 0133 A5       		.byte	(.L166-.L168)/2
 1631 0134 A5       		.byte	(.L166-.L168)/2
 1632 0135 A5       		.byte	(.L166-.L168)/2
 1633 0136 A5       		.byte	(.L166-.L168)/2
ARM GAS  /tmp/ccJEowFS.s 			page 50


 1634 0137 A5       		.byte	(.L166-.L168)/2
 1635 0138 A5       		.byte	(.L166-.L168)/2
 1636 0139 A5       		.byte	(.L166-.L168)/2
 1637 013a A5       		.byte	(.L166-.L168)/2
 1638 013b A5       		.byte	(.L166-.L168)/2
 1639 013c A5       		.byte	(.L166-.L168)/2
 1640 013d A5       		.byte	(.L166-.L168)/2
 1641 013e A5       		.byte	(.L166-.L168)/2
 1642 013f A5       		.byte	(.L166-.L168)/2
 1643 0140 A5       		.byte	(.L166-.L168)/2
 1644 0141 A5       		.byte	(.L166-.L168)/2
 1645 0142 A5       		.byte	(.L166-.L168)/2
 1646 0143 A5       		.byte	(.L166-.L168)/2
 1647 0144 A5       		.byte	(.L166-.L168)/2
 1648 0145 A5       		.byte	(.L166-.L168)/2
 1649 0146 A5       		.byte	(.L166-.L168)/2
 1650 0147 A5       		.byte	(.L166-.L168)/2
 1651 0148 A5       		.byte	(.L166-.L168)/2
 1652 0149 A5       		.byte	(.L166-.L168)/2
 1653 014a A5       		.byte	(.L166-.L168)/2
 1654 014b A5       		.byte	(.L166-.L168)/2
 1655 014c A5       		.byte	(.L166-.L168)/2
 1656 014d A5       		.byte	(.L166-.L168)/2
 1657 014e A5       		.byte	(.L166-.L168)/2
 1658 014f A5       		.byte	(.L166-.L168)/2
 1659 0150 A5       		.byte	(.L166-.L168)/2
 1660 0151 A5       		.byte	(.L166-.L168)/2
 1661 0152 A5       		.byte	(.L166-.L168)/2
 1662 0153 A5       		.byte	(.L166-.L168)/2
 1663 0154 A5       		.byte	(.L166-.L168)/2
 1664 0155 A5       		.byte	(.L166-.L168)/2
 1665 0156 A5       		.byte	(.L166-.L168)/2
 1666 0157 A5       		.byte	(.L166-.L168)/2
 1667 0158 A5       		.byte	(.L166-.L168)/2
 1668 0159 A5       		.byte	(.L166-.L168)/2
 1669 015a A5       		.byte	(.L166-.L168)/2
 1670 015b A5       		.byte	(.L166-.L168)/2
 1671 015c A5       		.byte	(.L166-.L168)/2
 1672 015d A5       		.byte	(.L166-.L168)/2
 1673 015e A5       		.byte	(.L166-.L168)/2
 1674 015f A5       		.byte	(.L166-.L168)/2
 1675 0160 A5       		.byte	(.L166-.L168)/2
 1676 0161 A5       		.byte	(.L166-.L168)/2
 1677 0162 A5       		.byte	(.L166-.L168)/2
 1678 0163 9D       		.byte	(.L169-.L168)/2
 1679 0164 A5       		.byte	(.L166-.L168)/2
 1680 0165 A5       		.byte	(.L166-.L168)/2
 1681 0166 A5       		.byte	(.L166-.L168)/2
 1682 0167 A5       		.byte	(.L166-.L168)/2
 1683 0168 A5       		.byte	(.L166-.L168)/2
 1684 0169 A5       		.byte	(.L166-.L168)/2
 1685 016a A5       		.byte	(.L166-.L168)/2
 1686 016b A5       		.byte	(.L166-.L168)/2
 1687 016c A5       		.byte	(.L166-.L168)/2
 1688 016d A5       		.byte	(.L166-.L168)/2
 1689 016e 2A       		.byte	(.L170-.L168)/2
 1690 016f A1       		.byte	(.L171-.L168)/2
ARM GAS  /tmp/ccJEowFS.s 			page 51


 1691 0170 A5       		.byte	(.L166-.L168)/2
 1692 0171 A5       		.byte	(.L166-.L168)/2
 1693 0172 A5       		.byte	(.L166-.L168)/2
 1694 0173 A5       		.byte	(.L166-.L168)/2
 1695 0174 A1       		.byte	(.L171-.L168)/2
 1696 0175 A5       		.byte	(.L166-.L168)/2
 1697 0176 A5       		.byte	(.L166-.L168)/2
 1698 0177 A5       		.byte	(.L166-.L168)/2
 1699 0178 A5       		.byte	(.L166-.L168)/2
 1700 0179 A5       		.byte	(.L166-.L168)/2
 1701 017a 9B       		.byte	(.L172-.L168)/2
 1702 017b 80       		.byte	(.L173-.L168)/2
 1703 017c A5       		.byte	(.L166-.L168)/2
 1704 017d A5       		.byte	(.L166-.L168)/2
 1705 017e 48       		.byte	(.L174-.L168)/2
 1706 017f A5       		.byte	(.L166-.L168)/2
 1707 0180 B4       		.byte	(.L175-.L168)/2
 1708 0181 A5       		.byte	(.L166-.L168)/2
 1709 0182 A5       		.byte	(.L166-.L168)/2
 1710 0183 B6       		.byte	(.L217-.L168)/2
 1711              		.p2align 1
 1712              	.L170:
 891:rt_thread/src/kservice.c ****             {
 1713              		.loc 1 891 0
 1714 0184 15F0100F 		tst	r5, #16
 1715 0188 05D0     		beq	.L177
 1716 018a 07E0     		b	.L178
 1717              	.L180:
 895:rt_thread/src/kservice.c ****                     ++ str;
 1718              		.loc 1 895 0
 1719 018c 4F45     		cmp	r7, r9
 1720 018e 01D2     		bcs	.L179
 895:rt_thread/src/kservice.c ****                     ++ str;
 1721              		.loc 1 895 0 is_stmt 0 discriminator 1
 1722 0190 2023     		movs	r3, #32
 1723 0192 3B70     		strb	r3, [r7]
 1724              	.L179:
 896:rt_thread/src/kservice.c ****                 }
 1725              		.loc 1 896 0 is_stmt 1
 1726 0194 0137     		adds	r7, r7, #1
 1727              	.LVL244:
 1728              	.L177:
 893:rt_thread/src/kservice.c ****                 {
 1729              		.loc 1 893 0
 1730 0196 013E     		subs	r6, r6, #1
 1731              	.LVL245:
 1732 0198 002E     		cmp	r6, #0
 1733 019a F7DC     		bgt	.L180
 1734              	.L178:
 901:rt_thread/src/kservice.c ****             if (str < end) *str = c;
 1735              		.loc 1 901 0
 1736 019c 9AF80030 		ldrb	r3, [r10]	@ zero_extendqisi2
 1737              	.LVL246:
 1738 01a0 0AF1040A 		add	r10, r10, #4
 1739              	.LVL247:
 902:rt_thread/src/kservice.c ****             ++ str;
 1740              		.loc 1 902 0
ARM GAS  /tmp/ccJEowFS.s 			page 52


 1741 01a4 4F45     		cmp	r7, r9
 1742 01a6 00D2     		bcs	.L181
 902:rt_thread/src/kservice.c ****             ++ str;
 1743              		.loc 1 902 0 is_stmt 0 discriminator 1
 1744 01a8 3B70     		strb	r3, [r7]
 1745              	.L181:
 903:rt_thread/src/kservice.c **** 
 1746              		.loc 1 903 0 is_stmt 1
 1747 01aa 0137     		adds	r7, r7, #1
 1748              	.LVL248:
 906:rt_thread/src/kservice.c ****             {
 1749              		.loc 1 906 0
 1750 01ac 04E0     		b	.L182
 1751              	.LVL249:
 1752              	.L184:
 908:rt_thread/src/kservice.c ****                 ++ str;
 1753              		.loc 1 908 0
 1754 01ae 4F45     		cmp	r7, r9
 1755 01b0 01D2     		bcs	.L183
 908:rt_thread/src/kservice.c ****                 ++ str;
 1756              		.loc 1 908 0 is_stmt 0 discriminator 1
 1757 01b2 2023     		movs	r3, #32
 1758 01b4 3B70     		strb	r3, [r7]
 1759              	.L183:
 909:rt_thread/src/kservice.c ****             }
 1760              		.loc 1 909 0 is_stmt 1
 1761 01b6 0137     		adds	r7, r7, #1
 1762              	.LVL250:
 1763              	.L182:
 906:rt_thread/src/kservice.c ****             {
 1764              		.loc 1 906 0
 1765 01b8 013E     		subs	r6, r6, #1
 1766              	.LVL251:
 1767 01ba 002E     		cmp	r6, #0
 1768 01bc F7DC     		bgt	.L184
 1769 01be 8EE0     		b	.L148
 1770              	.L174:
 914:rt_thread/src/kservice.c ****             if (!s) s = "(NULL)";
 1771              		.loc 1 914 0
 1772 01c0 DAF800B0 		ldr	fp, [r10]
 1773              	.LVL252:
 1774 01c4 0AF1040A 		add	r10, r10, #4
 1775              	.LVL253:
 915:rt_thread/src/kservice.c **** 
 1776              		.loc 1 915 0
 1777 01c8 BBF1000F 		cmp	fp, #0
 1778 01cc 01D1     		bne	.L185
 1779 01ce DFF838B1 		ldr	fp, .L223
 1780              	.LVL254:
 1781              	.L185:
 917:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 1782              		.loc 1 917 0
 1783 01d2 5846     		mov	r0, fp
 1784 01d4 FFF7FEFF 		bl	rt_strlen
 1785              	.LVL255:
 919:rt_thread/src/kservice.c **** #endif
 1786              		.loc 1 919 0
ARM GAS  /tmp/ccJEowFS.s 			page 53


 1787 01d8 B8F1000F 		cmp	r8, #0
 1788 01dc 02DD     		ble	.L186
 919:rt_thread/src/kservice.c **** #endif
 1789              		.loc 1 919 0 is_stmt 0 discriminator 1
 1790 01de 8045     		cmp	r8, r0
 1791 01e0 00DA     		bge	.L186
 919:rt_thread/src/kservice.c **** #endif
 1792              		.loc 1 919 0
 1793 01e2 4046     		mov	r0, r8
 1794              	.LVL256:
 1795              	.L186:
 922:rt_thread/src/kservice.c ****             {
 1796              		.loc 1 922 0 is_stmt 1
 1797 01e4 15F0100F 		tst	r5, #16
 1798 01e8 06D0     		beq	.L187
 1799 01ea 09E0     		b	.L188
 1800              	.LVL257:
 1801              	.L190:
 926:rt_thread/src/kservice.c ****                     ++ str;
 1802              		.loc 1 926 0
 1803 01ec 4F45     		cmp	r7, r9
 1804 01ee 01D2     		bcs	.L189
 926:rt_thread/src/kservice.c ****                     ++ str;
 1805              		.loc 1 926 0 is_stmt 0 discriminator 1
 1806 01f0 2022     		movs	r2, #32
 1807 01f2 3A70     		strb	r2, [r7]
 1808              	.L189:
 927:rt_thread/src/kservice.c ****                 }
 1809              		.loc 1 927 0 is_stmt 1
 1810 01f4 0137     		adds	r7, r7, #1
 1811              	.LVL258:
 924:rt_thread/src/kservice.c ****                 {
 1812              		.loc 1 924 0
 1813 01f6 1E46     		mov	r6, r3
 1814              	.LVL259:
 1815              	.L187:
 1816 01f8 731E     		subs	r3, r6, #1
 1817              	.LVL260:
 1818 01fa B042     		cmp	r0, r6
 1819 01fc F6DB     		blt	.L190
 1820 01fe 1E46     		mov	r6, r3
 1821              	.LVL261:
 1822              	.L188:
 931:rt_thread/src/kservice.c ****             {
 1823              		.loc 1 931 0
 1824 0200 0023     		movs	r3, #0
 1825 0202 08E0     		b	.L191
 1826              	.LVL262:
 1827              	.L193:
 933:rt_thread/src/kservice.c ****                 ++ str;
 1828              		.loc 1 933 0
 1829 0204 4F45     		cmp	r7, r9
 1830 0206 02D2     		bcs	.L192
 933:rt_thread/src/kservice.c ****                 ++ str;
 1831              		.loc 1 933 0 is_stmt 0 discriminator 1
 1832 0208 9BF80020 		ldrb	r2, [fp]	@ zero_extendqisi2
 1833 020c 3A70     		strb	r2, [r7]
ARM GAS  /tmp/ccJEowFS.s 			page 54


 1834              	.L192:
 934:rt_thread/src/kservice.c ****                 ++ s;
 1835              		.loc 1 934 0 is_stmt 1 discriminator 2
 1836 020e 0137     		adds	r7, r7, #1
 1837              	.LVL263:
 935:rt_thread/src/kservice.c ****             }
 1838              		.loc 1 935 0 discriminator 2
 1839 0210 0BF1010B 		add	fp, fp, #1
 1840              	.LVL264:
 931:rt_thread/src/kservice.c ****             {
 1841              		.loc 1 931 0 discriminator 2
 1842 0214 0133     		adds	r3, r3, #1
 1843              	.LVL265:
 1844              	.L191:
 931:rt_thread/src/kservice.c ****             {
 1845              		.loc 1 931 0 is_stmt 0 discriminator 1
 1846 0216 8342     		cmp	r3, r0
 1847 0218 F4DB     		blt	.L193
 1848 021a 05E0     		b	.L194
 1849              	.LVL266:
 1850              	.L196:
 940:rt_thread/src/kservice.c ****                 ++ str;
 1851              		.loc 1 940 0 is_stmt 1
 1852 021c 4F45     		cmp	r7, r9
 1853 021e 01D2     		bcs	.L195
 940:rt_thread/src/kservice.c ****                 ++ str;
 1854              		.loc 1 940 0 is_stmt 0 discriminator 1
 1855 0220 2022     		movs	r2, #32
 1856 0222 3A70     		strb	r2, [r7]
 1857              	.L195:
 941:rt_thread/src/kservice.c ****             }
 1858              		.loc 1 941 0 is_stmt 1
 1859 0224 0137     		adds	r7, r7, #1
 1860              	.LVL267:
 938:rt_thread/src/kservice.c ****             {
 1861              		.loc 1 938 0
 1862 0226 1E46     		mov	r6, r3
 1863              	.LVL268:
 1864              	.L194:
 1865 0228 731E     		subs	r3, r6, #1
 1866              	.LVL269:
 1867 022a B042     		cmp	r0, r6
 1868 022c F6DB     		blt	.L196
 1869 022e 56E0     		b	.L148
 1870              	.LVL270:
 1871              	.L173:
 946:rt_thread/src/kservice.c ****             {
 1872              		.loc 1 946 0
 1873 0230 B6F1FF3F 		cmp	r6, #-1
 1874 0234 02D1     		bne	.L197
 1875              	.LVL271:
 949:rt_thread/src/kservice.c ****             }
 1876              		.loc 1 949 0
 1877 0236 45F00105 		orr	r5, r5, #1
 1878              	.LVL272:
 948:rt_thread/src/kservice.c ****                 flags |= ZEROPAD;
 1879              		.loc 1 948 0
ARM GAS  /tmp/ccJEowFS.s 			page 55


 1880 023a 0826     		movs	r6, #8
 1881              	.LVL273:
 1882              	.L197:
 953:rt_thread/src/kservice.c ****                                16, field_width, precision, flags);
 1883              		.loc 1 953 0
 1884 023c DAF80020 		ldr	r2, [r10]
 1885              	.LVL274:
 1886 0240 0AF1040A 		add	r10, r10, #4
 1887              	.LVL275:
 952:rt_thread/src/kservice.c ****                                (long)va_arg(args, void *),
 1888              		.loc 1 952 0
 1889 0244 0295     		str	r5, [sp, #8]
 1890 0246 CDF80480 		str	r8, [sp, #4]
 1891 024a 0096     		str	r6, [sp]
 1892 024c 1023     		movs	r3, #16
 1893 024e 4946     		mov	r1, r9
 1894 0250 3846     		mov	r0, r7
 1895 0252 FFF7FEFF 		bl	print_number
 1896              	.LVL276:
 1897 0256 0746     		mov	r7, r0
 1898              	.LVL277:
 960:rt_thread/src/kservice.c **** 
 1899              		.loc 1 960 0
 1900 0258 41E0     		b	.L148
 1901              	.LVL278:
 1902              	.L167:
 963:rt_thread/src/kservice.c ****             ++ str;
 1903              		.loc 1 963 0
 1904 025a 4F45     		cmp	r7, r9
 1905 025c 01D2     		bcs	.L198
 963:rt_thread/src/kservice.c ****             ++ str;
 1906              		.loc 1 963 0 is_stmt 0 discriminator 1
 1907 025e 2523     		movs	r3, #37
 1908 0260 3B70     		strb	r3, [r7]
 1909              	.L198:
 964:rt_thread/src/kservice.c ****             continue;
 1910              		.loc 1 964 0 is_stmt 1
 1911 0262 0137     		adds	r7, r7, #1
 1912              	.LVL279:
 965:rt_thread/src/kservice.c **** 
 1913              		.loc 1 965 0
 1914 0264 3BE0     		b	.L148
 1915              	.L172:
 1916              	.LVL280:
 969:rt_thread/src/kservice.c ****             break;
 1917              		.loc 1 969 0
 1918 0266 0823     		movs	r3, #8
 970:rt_thread/src/kservice.c **** 
 1919              		.loc 1 970 0
 1920 0268 19E0     		b	.L176
 1921              	.LVL281:
 1922              	.L169:
 973:rt_thread/src/kservice.c ****         case 'x':
 1923              		.loc 1 973 0
 1924 026a 45F04005 		orr	r5, r5, #64
 1925              	.LVL282:
 1926              		.loc 1 975 0
ARM GAS  /tmp/ccJEowFS.s 			page 56


 1927 026e 1023     		movs	r3, #16
 1928 0270 15E0     		b	.L176
 1929              	.L171:
 976:rt_thread/src/kservice.c ****             break;
 977:rt_thread/src/kservice.c **** 
 978:rt_thread/src/kservice.c ****         case 'd':
 979:rt_thread/src/kservice.c ****         case 'i':
 980:rt_thread/src/kservice.c ****             flags |= SIGN;
 1930              		.loc 1 980 0
 1931 0272 45F00205 		orr	r5, r5, #2
 1932              	.LVL283:
 886:rt_thread/src/kservice.c **** 
 1933              		.loc 1 886 0
 1934 0276 0A23     		movs	r3, #10
 1935 0278 11E0     		b	.L176
 1936              	.L166:
 981:rt_thread/src/kservice.c ****         case 'u':
 982:rt_thread/src/kservice.c ****             break;
 983:rt_thread/src/kservice.c **** 
 984:rt_thread/src/kservice.c ****         default:
 985:rt_thread/src/kservice.c ****             if (str < end) *str = '%';
 1937              		.loc 1 985 0
 1938 027a 4F45     		cmp	r7, r9
 1939 027c 01D2     		bcs	.L199
 1940              		.loc 1 985 0 is_stmt 0 discriminator 1
 1941 027e 2523     		movs	r3, #37
 1942 0280 3B70     		strb	r3, [r7]
 1943              	.L199:
 986:rt_thread/src/kservice.c ****             ++ str;
 1944              		.loc 1 986 0 is_stmt 1
 1945 0282 7A1C     		adds	r2, r7, #1
 1946              	.LVL284:
 987:rt_thread/src/kservice.c **** 
 988:rt_thread/src/kservice.c ****             if (*fmt)
 1947              		.loc 1 988 0
 1948 0284 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1949 0286 23B1     		cbz	r3, .L200
 989:rt_thread/src/kservice.c ****             {
 990:rt_thread/src/kservice.c ****                 if (str < end) *str = *fmt;
 1950              		.loc 1 990 0
 1951 0288 4A45     		cmp	r2, r9
 1952 028a 00D2     		bcs	.L201
 1953              		.loc 1 990 0 is_stmt 0 discriminator 1
 1954 028c 7B70     		strb	r3, [r7, #1]
 1955              	.L201:
 991:rt_thread/src/kservice.c ****                 ++ str;
 1956              		.loc 1 991 0 is_stmt 1
 1957 028e 0237     		adds	r7, r7, #2
 1958              	.LVL285:
 1959 0290 25E0     		b	.L148
 1960              	.LVL286:
 1961              	.L200:
 992:rt_thread/src/kservice.c ****             }
 993:rt_thread/src/kservice.c ****             else
 994:rt_thread/src/kservice.c ****             {
 995:rt_thread/src/kservice.c ****                 -- fmt;
 1962              		.loc 1 995 0
ARM GAS  /tmp/ccJEowFS.s 			page 57


 1963 0292 013C     		subs	r4, r4, #1
 1964              	.LVL287:
 986:rt_thread/src/kservice.c **** 
 1965              		.loc 1 986 0
 1966 0294 1746     		mov	r7, r2
 1967              	.LVL288:
 996:rt_thread/src/kservice.c ****             }
 997:rt_thread/src/kservice.c ****             continue;
 1968              		.loc 1 997 0
 1969 0296 22E0     		b	.L148
 1970              	.LVL289:
 1971              	.L175:
 886:rt_thread/src/kservice.c **** 
 1972              		.loc 1 886 0
 1973 0298 0A23     		movs	r3, #10
 1974 029a 00E0     		b	.L176
 1975              	.L217:
 975:rt_thread/src/kservice.c ****             break;
 1976              		.loc 1 975 0
 1977 029c 1023     		movs	r3, #16
 1978              	.LVL290:
 1979              	.L176:
 998:rt_thread/src/kservice.c ****         }
 999:rt_thread/src/kservice.c **** 
1000:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
1001:rt_thread/src/kservice.c ****         if (qualifier == 'L') num = va_arg(args, long long);
1002:rt_thread/src/kservice.c ****         else if (qualifier == 'l')
1003:rt_thread/src/kservice.c **** #else
1004:rt_thread/src/kservice.c ****         if (qualifier == 'l')
 1980              		.loc 1 1004 0
 1981 029e 6C2A     		cmp	r2, #108
 1982 02a0 04D1     		bne	.L203
1005:rt_thread/src/kservice.c **** #endif
1006:rt_thread/src/kservice.c ****         {
1007:rt_thread/src/kservice.c ****             num = va_arg(args, rt_uint32_t);
 1983              		.loc 1 1007 0
 1984 02a2 DAF80020 		ldr	r2, [r10]
 1985              	.LVL291:
 1986 02a6 0AF1040A 		add	r10, r10, #4
 1987              	.LVL292:
 1988 02aa 0FE0     		b	.L204
 1989              	.LVL293:
 1990              	.L203:
1008:rt_thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int32_t)num;
1009:rt_thread/src/kservice.c ****         }
1010:rt_thread/src/kservice.c ****         else if (qualifier == 'h')
 1991              		.loc 1 1010 0
 1992 02ac 682A     		cmp	r2, #104
 1993 02ae 09D1     		bne	.L205
1011:rt_thread/src/kservice.c ****         {
1012:rt_thread/src/kservice.c ****             num = (rt_uint16_t)va_arg(args, rt_int32_t);
 1994              		.loc 1 1012 0
 1995 02b0 DAF80010 		ldr	r1, [r10]
 1996              	.LVL294:
 1997 02b4 0AF1040A 		add	r10, r10, #4
 1998              	.LVL295:
 1999 02b8 8AB2     		uxth	r2, r1
ARM GAS  /tmp/ccJEowFS.s 			page 58


 2000              	.LVL296:
1013:rt_thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int16_t)num;
 2001              		.loc 1 1013 0
 2002 02ba 15F0020F 		tst	r5, #2
 2003 02be 05D0     		beq	.L204
 2004              		.loc 1 1013 0 is_stmt 0 discriminator 1
 2005 02c0 0AB2     		sxth	r2, r1
 2006              	.LVL297:
 2007 02c2 03E0     		b	.L204
 2008              	.LVL298:
 2009              	.L205:
1014:rt_thread/src/kservice.c ****         }
1015:rt_thread/src/kservice.c ****         else
1016:rt_thread/src/kservice.c ****         {
1017:rt_thread/src/kservice.c ****             num = va_arg(args, rt_uint32_t);
 2010              		.loc 1 1017 0 is_stmt 1
 2011 02c4 DAF80020 		ldr	r2, [r10]
 2012              	.LVL299:
 2013 02c8 0AF1040A 		add	r10, r10, #4
 2014              	.LVL300:
 2015              	.L204:
1018:rt_thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int32_t)num;
1019:rt_thread/src/kservice.c ****         }
1020:rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
1021:rt_thread/src/kservice.c ****         str = print_number(str, end, num, base, field_width, precision, flags);
 2016              		.loc 1 1021 0
 2017 02cc 0295     		str	r5, [sp, #8]
 2018 02ce CDF80480 		str	r8, [sp, #4]
 2019 02d2 0096     		str	r6, [sp]
 2020 02d4 4946     		mov	r1, r9
 2021 02d6 3846     		mov	r0, r7
 2022 02d8 FFF7FEFF 		bl	print_number
 2023              	.LVL301:
 2024 02dc 0746     		mov	r7, r0
 2025              	.LVL302:
 2026              	.L148:
 810:rt_thread/src/kservice.c ****     {
 2027              		.loc 1 810 0
 2028 02de 0134     		adds	r4, r4, #1
 2029              	.LVL303:
 2030              	.L145:
 810:rt_thread/src/kservice.c ****     {
 2031              		.loc 1 810 0 is_stmt 0 discriminator 1
 2032 02e0 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2033              	.LVL304:
 2034 02e2 002B     		cmp	r3, #0
 2035 02e4 7FF49CAE 		bne	.L206
1022:rt_thread/src/kservice.c **** #else
1023:rt_thread/src/kservice.c ****         str = print_number(str, end, num, base, field_width, flags);
1024:rt_thread/src/kservice.c **** #endif
1025:rt_thread/src/kservice.c ****     }
1026:rt_thread/src/kservice.c **** 
1027:rt_thread/src/kservice.c ****     if (size > 0)
 2036              		.loc 1 1027 0 is_stmt 1
 2037 02e8 059B     		ldr	r3, [sp, #20]
 2038 02ea 3BB1     		cbz	r3, .L207
1028:rt_thread/src/kservice.c ****     {
ARM GAS  /tmp/ccJEowFS.s 			page 59


1029:rt_thread/src/kservice.c ****         if (str < end) *str = '\0';
 2039              		.loc 1 1029 0
 2040 02ec 4F45     		cmp	r7, r9
 2041 02ee 02D2     		bcs	.L208
 2042              		.loc 1 1029 0 is_stmt 0 discriminator 1
 2043 02f0 0023     		movs	r3, #0
 2044 02f2 3B70     		strb	r3, [r7]
 2045 02f4 02E0     		b	.L207
 2046              	.LVL305:
 2047              	.L208:
1030:rt_thread/src/kservice.c ****         else
1031:rt_thread/src/kservice.c ****         {
1032:rt_thread/src/kservice.c ****             end[-1] = '\0';
 2048              		.loc 1 1032 0 is_stmt 1
 2049 02f6 0023     		movs	r3, #0
 2050              	.LVL306:
 2051 02f8 09F8013C 		strb	r3, [r9, #-1]
 2052              	.L207:
1033:rt_thread/src/kservice.c ****         }
1034:rt_thread/src/kservice.c ****     }
1035:rt_thread/src/kservice.c **** 
1036:rt_thread/src/kservice.c ****     /* the trailing null byte doesn't count towards the total
1037:rt_thread/src/kservice.c ****     * ++str;
1038:rt_thread/src/kservice.c ****     */
1039:rt_thread/src/kservice.c ****     return str - buf;
1040:rt_thread/src/kservice.c **** }
 2053              		.loc 1 1040 0
 2054 02fc 049B     		ldr	r3, [sp, #16]
 2055 02fe F81A     		subs	r0, r7, r3
 2056 0300 07B0     		add	sp, sp, #28
 2057              	.LCFI24:
 2058              		.cfi_def_cfa_offset 36
 2059              		@ sp needed
 2060 0302 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2061              	.LVL307:
 2062              	.L224:
 2063 0306 00BF     		.align	2
 2064              	.L223:
 2065 0308 00000000 		.word	.LC0
 2066              		.cfi_endproc
 2067              	.LFE34:
 2069              		.section	.text.rt_snprintf,"ax",%progbits
 2070              		.align	2
 2071              		.global	rt_snprintf
 2072              		.thumb
 2073              		.thumb_func
 2075              	rt_snprintf:
 2076              	.LFB35:
1041:rt_thread/src/kservice.c **** RTM_EXPORT(rt_vsnprintf);
1042:rt_thread/src/kservice.c **** 
1043:rt_thread/src/kservice.c **** /**
1044:rt_thread/src/kservice.c ****  * This function will fill a formatted string to buffer
1045:rt_thread/src/kservice.c ****  *
1046:rt_thread/src/kservice.c ****  * @param buf the buffer to save formatted string
1047:rt_thread/src/kservice.c ****  * @param size the size of buffer
1048:rt_thread/src/kservice.c ****  * @param fmt the format
1049:rt_thread/src/kservice.c ****  */
ARM GAS  /tmp/ccJEowFS.s 			page 60


1050:rt_thread/src/kservice.c **** rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *fmt, ...)
1051:rt_thread/src/kservice.c **** {
 2077              		.loc 1 1051 0
 2078              		.cfi_startproc
 2079              		@ args = 4, pretend = 8, frame = 8
 2080              		@ frame_needed = 0, uses_anonymous_args = 1
 2081              	.LVL308:
 2082 0000 0CB4     		push	{r2, r3}
 2083              	.LCFI25:
 2084              		.cfi_def_cfa_offset 8
 2085              		.cfi_offset 2, -8
 2086              		.cfi_offset 3, -4
 2087 0002 00B5     		push	{lr}
 2088              	.LCFI26:
 2089              		.cfi_def_cfa_offset 12
 2090              		.cfi_offset 14, -12
 2091 0004 83B0     		sub	sp, sp, #12
 2092              	.LCFI27:
 2093              		.cfi_def_cfa_offset 24
 2094 0006 04AB     		add	r3, sp, #16
 2095 0008 53F8042B 		ldr	r2, [r3], #4
1052:rt_thread/src/kservice.c ****     rt_int32_t n;
1053:rt_thread/src/kservice.c ****     va_list args;
1054:rt_thread/src/kservice.c **** 
1055:rt_thread/src/kservice.c ****     va_start(args, fmt);
 2096              		.loc 1 1055 0
 2097 000c 0193     		str	r3, [sp, #4]
1056:rt_thread/src/kservice.c ****     n = rt_vsnprintf(buf, size, fmt, args);
 2098              		.loc 1 1056 0
 2099 000e FFF7FEFF 		bl	rt_vsnprintf
 2100              	.LVL309:
1057:rt_thread/src/kservice.c ****     va_end(args);
1058:rt_thread/src/kservice.c **** 
1059:rt_thread/src/kservice.c ****     return n;
1060:rt_thread/src/kservice.c **** }
 2101              		.loc 1 1060 0
 2102 0012 03B0     		add	sp, sp, #12
 2103              	.LCFI28:
 2104              		.cfi_def_cfa_offset 12
 2105              		@ sp needed
 2106 0014 5DF804EB 		ldr	lr, [sp], #4
 2107              	.LCFI29:
 2108              		.cfi_restore 14
 2109              		.cfi_def_cfa_offset 8
 2110 0018 02B0     		add	sp, sp, #8
 2111              	.LCFI30:
 2112              		.cfi_restore 3
 2113              		.cfi_restore 2
 2114              		.cfi_def_cfa_offset 0
 2115 001a 7047     		bx	lr
 2116              		.cfi_endproc
 2117              	.LFE35:
 2119              		.weak	snprintf
 2120              		.thumb_set snprintf,rt_snprintf
 2121              		.section	.text.rt_vsprintf,"ax",%progbits
 2122              		.align	2
 2123              		.global	rt_vsprintf
ARM GAS  /tmp/ccJEowFS.s 			page 61


 2124              		.thumb
 2125              		.thumb_func
 2127              	rt_vsprintf:
 2128              	.LFB36:
1061:rt_thread/src/kservice.c **** RTM_EXPORT(rt_snprintf);
1062:rt_thread/src/kservice.c **** 
1063:rt_thread/src/kservice.c **** /**
1064:rt_thread/src/kservice.c ****  * This function will fill a formatted string to buffer
1065:rt_thread/src/kservice.c ****  *
1066:rt_thread/src/kservice.c ****  * @param buf the buffer to save formatted string
1067:rt_thread/src/kservice.c ****  * @param arg_ptr the arg_ptr
1068:rt_thread/src/kservice.c ****  * @param format the format
1069:rt_thread/src/kservice.c ****  */
1070:rt_thread/src/kservice.c **** rt_int32_t rt_vsprintf(char *buf, const char *format, va_list arg_ptr)
1071:rt_thread/src/kservice.c **** {
 2129              		.loc 1 1071 0
 2130              		.cfi_startproc
 2131              		@ args = 0, pretend = 0, frame = 0
 2132              		@ frame_needed = 0, uses_anonymous_args = 0
 2133              	.LVL310:
 2134 0000 08B5     		push	{r3, lr}
 2135              	.LCFI31:
 2136              		.cfi_def_cfa_offset 8
 2137              		.cfi_offset 3, -8
 2138              		.cfi_offset 14, -4
1072:rt_thread/src/kservice.c ****     return rt_vsnprintf(buf, (rt_size_t) - 1, format, arg_ptr);
 2139              		.loc 1 1072 0
 2140 0002 1346     		mov	r3, r2
 2141 0004 0A46     		mov	r2, r1
 2142              	.LVL311:
 2143 0006 4FF0FF31 		mov	r1, #-1
 2144              	.LVL312:
 2145 000a FFF7FEFF 		bl	rt_vsnprintf
 2146              	.LVL313:
1073:rt_thread/src/kservice.c **** }
 2147              		.loc 1 1073 0
 2148 000e 08BD     		pop	{r3, pc}
 2149              		.cfi_endproc
 2150              	.LFE36:
 2152              		.weak	vsprintf
 2153              		.thumb_set vsprintf,rt_vsprintf
 2154              		.section	.text.rt_sprintf,"ax",%progbits
 2155              		.align	2
 2156              		.global	rt_sprintf
 2157              		.thumb
 2158              		.thumb_func
 2160              	rt_sprintf:
 2161              	.LFB37:
1074:rt_thread/src/kservice.c **** RTM_EXPORT(rt_vsprintf);
1075:rt_thread/src/kservice.c **** 
1076:rt_thread/src/kservice.c **** /**
1077:rt_thread/src/kservice.c ****  * This function will fill a formatted string to buffer
1078:rt_thread/src/kservice.c ****  *
1079:rt_thread/src/kservice.c ****  * @param buf the buffer to save formatted string
1080:rt_thread/src/kservice.c ****  * @param format the format
1081:rt_thread/src/kservice.c ****  */
1082:rt_thread/src/kservice.c **** rt_int32_t rt_sprintf(char *buf, const char *format, ...)
ARM GAS  /tmp/ccJEowFS.s 			page 62


1083:rt_thread/src/kservice.c **** {
 2162              		.loc 1 1083 0
 2163              		.cfi_startproc
 2164              		@ args = 4, pretend = 12, frame = 8
 2165              		@ frame_needed = 0, uses_anonymous_args = 1
 2166              	.LVL314:
 2167 0000 0EB4     		push	{r1, r2, r3}
 2168              	.LCFI32:
 2169              		.cfi_def_cfa_offset 12
 2170              		.cfi_offset 1, -12
 2171              		.cfi_offset 2, -8
 2172              		.cfi_offset 3, -4
 2173 0002 00B5     		push	{lr}
 2174              	.LCFI33:
 2175              		.cfi_def_cfa_offset 16
 2176              		.cfi_offset 14, -16
 2177 0004 82B0     		sub	sp, sp, #8
 2178              	.LCFI34:
 2179              		.cfi_def_cfa_offset 24
 2180 0006 03AA     		add	r2, sp, #12
 2181 0008 52F8041B 		ldr	r1, [r2], #4
1084:rt_thread/src/kservice.c ****     rt_int32_t n;
1085:rt_thread/src/kservice.c ****     va_list arg_ptr;
1086:rt_thread/src/kservice.c **** 
1087:rt_thread/src/kservice.c ****     va_start(arg_ptr, format);
 2182              		.loc 1 1087 0
 2183 000c 0192     		str	r2, [sp, #4]
1088:rt_thread/src/kservice.c ****     n = rt_vsprintf(buf, format, arg_ptr);
 2184              		.loc 1 1088 0
 2185 000e FFF7FEFF 		bl	rt_vsprintf
 2186              	.LVL315:
1089:rt_thread/src/kservice.c ****     va_end(arg_ptr);
1090:rt_thread/src/kservice.c **** 
1091:rt_thread/src/kservice.c ****     return n;
1092:rt_thread/src/kservice.c **** }
 2187              		.loc 1 1092 0
 2188 0012 02B0     		add	sp, sp, #8
 2189              	.LCFI35:
 2190              		.cfi_def_cfa_offset 16
 2191              		@ sp needed
 2192 0014 5DF804EB 		ldr	lr, [sp], #4
 2193              	.LCFI36:
 2194              		.cfi_restore 14
 2195              		.cfi_def_cfa_offset 12
 2196 0018 03B0     		add	sp, sp, #12
 2197              	.LCFI37:
 2198              		.cfi_restore 3
 2199              		.cfi_restore 2
 2200              		.cfi_restore 1
 2201              		.cfi_def_cfa_offset 0
 2202 001a 7047     		bx	lr
 2203              		.cfi_endproc
 2204              	.LFE37:
 2206              		.weak	sprintf
 2207              		.thumb_set sprintf,rt_sprintf
 2208              		.section	.text.rt_console_get_device,"ax",%progbits
 2209              		.align	2
ARM GAS  /tmp/ccJEowFS.s 			page 63


 2210              		.global	rt_console_get_device
 2211              		.thumb
 2212              		.thumb_func
 2214              	rt_console_get_device:
 2215              	.LFB38:
1093:rt_thread/src/kservice.c **** RTM_EXPORT(rt_sprintf);
1094:rt_thread/src/kservice.c **** 
1095:rt_thread/src/kservice.c **** #ifdef RT_USING_CONSOLE
1096:rt_thread/src/kservice.c **** 
1097:rt_thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1098:rt_thread/src/kservice.c **** /**
1099:rt_thread/src/kservice.c ****  * This function returns the device using in console.
1100:rt_thread/src/kservice.c ****  *
1101:rt_thread/src/kservice.c ****  * @return the device using in console or RT_NULL
1102:rt_thread/src/kservice.c ****  */
1103:rt_thread/src/kservice.c **** rt_device_t rt_console_get_device(void)
1104:rt_thread/src/kservice.c **** {
 2216              		.loc 1 1104 0
 2217              		.cfi_startproc
 2218              		@ args = 0, pretend = 0, frame = 0
 2219              		@ frame_needed = 0, uses_anonymous_args = 0
 2220              		@ link register save eliminated.
1105:rt_thread/src/kservice.c ****     return _console_device;
1106:rt_thread/src/kservice.c **** }
 2221              		.loc 1 1106 0
 2222 0000 014B     		ldr	r3, .L232
 2223 0002 1868     		ldr	r0, [r3]
 2224 0004 7047     		bx	lr
 2225              	.L233:
 2226 0006 00BF     		.align	2
 2227              	.L232:
 2228 0008 00000000 		.word	.LANCHOR3
 2229              		.cfi_endproc
 2230              	.LFE38:
 2232              		.section	.text.rt_console_set_device,"ax",%progbits
 2233              		.align	2
 2234              		.global	rt_console_set_device
 2235              		.thumb
 2236              		.thumb_func
 2238              	rt_console_set_device:
 2239              	.LFB39:
1107:rt_thread/src/kservice.c **** RTM_EXPORT(rt_console_get_device);
1108:rt_thread/src/kservice.c **** 
1109:rt_thread/src/kservice.c **** /**
1110:rt_thread/src/kservice.c ****  * This function will set a device as console device.
1111:rt_thread/src/kservice.c ****  * After set a device to console, all output of rt_kprintf will be
1112:rt_thread/src/kservice.c ****  * redirected to this new device.
1113:rt_thread/src/kservice.c ****  *
1114:rt_thread/src/kservice.c ****  * @param name the name of new console device
1115:rt_thread/src/kservice.c ****  *
1116:rt_thread/src/kservice.c ****  * @return the old console device handler
1117:rt_thread/src/kservice.c ****  */
1118:rt_thread/src/kservice.c **** rt_device_t rt_console_set_device(const char *name)
1119:rt_thread/src/kservice.c **** {
 2240              		.loc 1 1119 0
 2241              		.cfi_startproc
 2242              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccJEowFS.s 			page 64


 2243              		@ frame_needed = 0, uses_anonymous_args = 0
 2244              	.LVL316:
 2245 0000 38B5     		push	{r3, r4, r5, lr}
 2246              	.LCFI38:
 2247              		.cfi_def_cfa_offset 16
 2248              		.cfi_offset 3, -16
 2249              		.cfi_offset 4, -12
 2250              		.cfi_offset 5, -8
 2251              		.cfi_offset 14, -4
1120:rt_thread/src/kservice.c ****     rt_device_t new_device, old_device;
1121:rt_thread/src/kservice.c **** 
1122:rt_thread/src/kservice.c ****     /* save old device */
1123:rt_thread/src/kservice.c ****     old_device = _console_device;
 2252              		.loc 1 1123 0
 2253 0002 094B     		ldr	r3, .L238
 2254 0004 1D68     		ldr	r5, [r3]
 2255              	.LVL317:
1124:rt_thread/src/kservice.c **** 
1125:rt_thread/src/kservice.c ****     /* find new console device */
1126:rt_thread/src/kservice.c ****     new_device = rt_device_find(name);
 2256              		.loc 1 1126 0
 2257 0006 FFF7FEFF 		bl	rt_device_find
 2258              	.LVL318:
1127:rt_thread/src/kservice.c ****     if (new_device != RT_NULL)
 2259              		.loc 1 1127 0
 2260 000a 58B1     		cbz	r0, .L235
 2261 000c 0446     		mov	r4, r0
1128:rt_thread/src/kservice.c ****     {
1129:rt_thread/src/kservice.c ****         if (_console_device != RT_NULL)
 2262              		.loc 1 1129 0
 2263 000e 064B     		ldr	r3, .L238
 2264 0010 1868     		ldr	r0, [r3]
 2265              	.LVL319:
 2266 0012 08B1     		cbz	r0, .L236
1130:rt_thread/src/kservice.c ****         {
1131:rt_thread/src/kservice.c ****             /* close old console device */
1132:rt_thread/src/kservice.c ****             rt_device_close(_console_device);
 2267              		.loc 1 1132 0
 2268 0014 FFF7FEFF 		bl	rt_device_close
 2269              	.LVL320:
 2270              	.L236:
1133:rt_thread/src/kservice.c ****         }
1134:rt_thread/src/kservice.c **** 
1135:rt_thread/src/kservice.c ****         /* set new console device */
1136:rt_thread/src/kservice.c ****         rt_device_open(new_device, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_STREAM);
 2271              		.loc 1 1136 0
 2272 0018 4321     		movs	r1, #67
 2273 001a 2046     		mov	r0, r4
 2274 001c FFF7FEFF 		bl	rt_device_open
 2275              	.LVL321:
1137:rt_thread/src/kservice.c ****         _console_device = new_device;
 2276              		.loc 1 1137 0
 2277 0020 014B     		ldr	r3, .L238
 2278 0022 1C60     		str	r4, [r3]
 2279              	.LVL322:
 2280              	.L235:
1138:rt_thread/src/kservice.c ****     }
ARM GAS  /tmp/ccJEowFS.s 			page 65


1139:rt_thread/src/kservice.c **** 
1140:rt_thread/src/kservice.c ****     return old_device;
1141:rt_thread/src/kservice.c **** }
 2281              		.loc 1 1141 0
 2282 0024 2846     		mov	r0, r5
 2283 0026 38BD     		pop	{r3, r4, r5, pc}
 2284              	.LVL323:
 2285              	.L239:
 2286              		.align	2
 2287              	.L238:
 2288 0028 00000000 		.word	.LANCHOR3
 2289              		.cfi_endproc
 2290              	.LFE39:
 2292              		.section	.text.rt_hw_console_output,"ax",%progbits
 2293              		.align	2
 2294              		.weak	rt_hw_console_output
 2295              		.thumb
 2296              		.thumb_func
 2298              	rt_hw_console_output:
 2299              	.LFB40:
1142:rt_thread/src/kservice.c **** RTM_EXPORT(rt_console_set_device);
1143:rt_thread/src/kservice.c **** #endif
1144:rt_thread/src/kservice.c **** 
1145:rt_thread/src/kservice.c **** RT_WEAK void rt_hw_console_output(const char *str)
1146:rt_thread/src/kservice.c **** {
 2300              		.loc 1 1146 0
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 0
 2303              		@ frame_needed = 0, uses_anonymous_args = 0
 2304              		@ link register save eliminated.
 2305              	.LVL324:
 2306 0000 7047     		bx	lr
 2307              		.cfi_endproc
 2308              	.LFE40:
 2310 0002 00BF     		.section	.text.rt_kputs,"ax",%progbits
 2311              		.align	2
 2312              		.global	rt_kputs
 2313              		.thumb
 2314              		.thumb_func
 2316              	rt_kputs:
 2317              	.LFB41:
1147:rt_thread/src/kservice.c ****     /* empty console output */
1148:rt_thread/src/kservice.c **** }
1149:rt_thread/src/kservice.c **** RTM_EXPORT(rt_hw_console_output);
1150:rt_thread/src/kservice.c **** 
1151:rt_thread/src/kservice.c **** /**
1152:rt_thread/src/kservice.c ****  * This function will put string to the console.
1153:rt_thread/src/kservice.c ****  *
1154:rt_thread/src/kservice.c ****  * @param str the string output to the console.
1155:rt_thread/src/kservice.c ****  */
1156:rt_thread/src/kservice.c **** void rt_kputs(const char *str)
1157:rt_thread/src/kservice.c **** {
 2318              		.loc 1 1157 0
 2319              		.cfi_startproc
 2320              		@ args = 0, pretend = 0, frame = 0
 2321              		@ frame_needed = 0, uses_anonymous_args = 0
 2322              	.LVL325:
ARM GAS  /tmp/ccJEowFS.s 			page 66


1158:rt_thread/src/kservice.c ****     if (!str) return;
 2323              		.loc 1 1158 0
 2324 0000 B8B1     		cbz	r0, .L245
1157:rt_thread/src/kservice.c ****     if (!str) return;
 2325              		.loc 1 1157 0
 2326 0002 70B5     		push	{r4, r5, r6, lr}
 2327              	.LCFI39:
 2328              		.cfi_def_cfa_offset 16
 2329              		.cfi_offset 4, -16
 2330              		.cfi_offset 5, -12
 2331              		.cfi_offset 6, -8
 2332              		.cfi_offset 14, -4
 2333 0004 0446     		mov	r4, r0
1159:rt_thread/src/kservice.c **** 
1160:rt_thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1161:rt_thread/src/kservice.c ****     if (_console_device == RT_NULL)
 2334              		.loc 1 1161 0
 2335 0006 0B4B     		ldr	r3, .L246
 2336 0008 1D68     		ldr	r5, [r3]
 2337 000a 15B9     		cbnz	r5, .L243
1162:rt_thread/src/kservice.c ****     {
1163:rt_thread/src/kservice.c ****         rt_hw_console_output(str);
 2338              		.loc 1 1163 0
 2339 000c FFF7FEFF 		bl	rt_hw_console_output
 2340              	.LVL326:
 2341 0010 70BD     		pop	{r4, r5, r6, pc}
 2342              	.LVL327:
 2343              	.L243:
 2344              	.LBB19:
1164:rt_thread/src/kservice.c ****     }
1165:rt_thread/src/kservice.c ****     else
1166:rt_thread/src/kservice.c ****     {
1167:rt_thread/src/kservice.c ****         rt_uint16_t old_flag = _console_device->open_flag;
 2345              		.loc 1 1167 0
 2346 0012 2E8B     		ldrh	r6, [r5, #24]
 2347              	.LVL328:
1168:rt_thread/src/kservice.c **** 
1169:rt_thread/src/kservice.c ****         _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
 2348              		.loc 1 1169 0
 2349 0014 46F04003 		orr	r3, r6, #64
 2350 0018 2B83     		strh	r3, [r5, #24]	@ movhi
1170:rt_thread/src/kservice.c ****         rt_device_write(_console_device, 0, str, rt_strlen(str));
 2351              		.loc 1 1170 0
 2352 001a FFF7FEFF 		bl	rt_strlen
 2353              	.LVL329:
 2354 001e 0346     		mov	r3, r0
 2355 0020 2246     		mov	r2, r4
 2356 0022 0021     		movs	r1, #0
 2357 0024 2846     		mov	r0, r5
 2358 0026 FFF7FEFF 		bl	rt_device_write
 2359              	.LVL330:
1171:rt_thread/src/kservice.c ****         _console_device->open_flag = old_flag;
 2360              		.loc 1 1171 0
 2361 002a 024B     		ldr	r3, .L246
 2362 002c 1B68     		ldr	r3, [r3]
 2363 002e 1E83     		strh	r6, [r3, #24]	@ movhi
 2364 0030 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccJEowFS.s 			page 67


 2365              	.LVL331:
 2366              	.L245:
 2367              	.LCFI40:
 2368              		.cfi_def_cfa_offset 0
 2369              		.cfi_restore 4
 2370              		.cfi_restore 5
 2371              		.cfi_restore 6
 2372              		.cfi_restore 14
 2373 0032 7047     		bx	lr
 2374              	.L247:
 2375              		.align	2
 2376              	.L246:
 2377 0034 00000000 		.word	.LANCHOR3
 2378              	.LBE19:
 2379              		.cfi_endproc
 2380              	.LFE41:
 2382              		.section	.text.rt_kprintf,"ax",%progbits
 2383              		.align	2
 2384              		.global	rt_kprintf
 2385              		.thumb
 2386              		.thumb_func
 2388              	rt_kprintf:
 2389              	.LFB42:
1172:rt_thread/src/kservice.c ****     }
1173:rt_thread/src/kservice.c **** #else
1174:rt_thread/src/kservice.c ****     rt_hw_console_output(str);
1175:rt_thread/src/kservice.c **** #endif
1176:rt_thread/src/kservice.c **** }
1177:rt_thread/src/kservice.c **** 
1178:rt_thread/src/kservice.c **** /**
1179:rt_thread/src/kservice.c ****  * This function will print a formatted string on system console
1180:rt_thread/src/kservice.c ****  *
1181:rt_thread/src/kservice.c ****  * @param fmt the format
1182:rt_thread/src/kservice.c ****  */
1183:rt_thread/src/kservice.c **** void rt_kprintf(const char *fmt, ...)
1184:rt_thread/src/kservice.c **** {
 2390              		.loc 1 1184 0
 2391              		.cfi_startproc
 2392              		@ args = 4, pretend = 16, frame = 8
 2393              		@ frame_needed = 0, uses_anonymous_args = 1
 2394              	.LVL332:
 2395 0000 0FB4     		push	{r0, r1, r2, r3}
 2396              	.LCFI41:
 2397              		.cfi_def_cfa_offset 16
 2398              		.cfi_offset 0, -16
 2399              		.cfi_offset 1, -12
 2400              		.cfi_offset 2, -8
 2401              		.cfi_offset 3, -4
 2402 0002 30B5     		push	{r4, r5, lr}
 2403              	.LCFI42:
 2404              		.cfi_def_cfa_offset 28
 2405              		.cfi_offset 4, -28
 2406              		.cfi_offset 5, -24
 2407              		.cfi_offset 14, -20
 2408 0004 83B0     		sub	sp, sp, #12
 2409              	.LCFI43:
 2410              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccJEowFS.s 			page 68


 2411 0006 06AB     		add	r3, sp, #24
 2412 0008 53F8042B 		ldr	r2, [r3], #4
1185:rt_thread/src/kservice.c ****     va_list args;
1186:rt_thread/src/kservice.c ****     rt_size_t length;
1187:rt_thread/src/kservice.c ****     static char rt_log_buf[RT_CONSOLEBUF_SIZE];
1188:rt_thread/src/kservice.c **** 
1189:rt_thread/src/kservice.c ****     va_start(args, fmt);
 2413              		.loc 1 1189 0
 2414 000c 0193     		str	r3, [sp, #4]
1190:rt_thread/src/kservice.c ****     /* the return value of vsnprintf is the number of bytes that would be
1191:rt_thread/src/kservice.c ****      * written to buffer had if the size of the buffer been sufficiently
1192:rt_thread/src/kservice.c ****      * large excluding the terminating null byte. If the output string
1193:rt_thread/src/kservice.c ****      * would be larger than the rt_log_buf, we have to adjust the output
1194:rt_thread/src/kservice.c ****      * length. */
1195:rt_thread/src/kservice.c ****     length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 2415              		.loc 1 1195 0
 2416 000e 7F21     		movs	r1, #127
 2417 0010 0F48     		ldr	r0, .L254
 2418 0012 FFF7FEFF 		bl	rt_vsnprintf
 2419              	.LVL333:
1196:rt_thread/src/kservice.c ****     if (length > RT_CONSOLEBUF_SIZE - 1)
 2420              		.loc 1 1196 0
 2421 0016 7F28     		cmp	r0, #127
 2422 0018 00D9     		bls	.L249
1197:rt_thread/src/kservice.c ****         length = RT_CONSOLEBUF_SIZE - 1;
 2423              		.loc 1 1197 0
 2424 001a 7F20     		movs	r0, #127
 2425              	.LVL334:
 2426              	.L249:
1198:rt_thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1199:rt_thread/src/kservice.c ****     if (_console_device == RT_NULL)
 2427              		.loc 1 1199 0
 2428 001c 0D4B     		ldr	r3, .L254+4
 2429 001e 1C68     		ldr	r4, [r3]
 2430 0020 1CB9     		cbnz	r4, .L250
1200:rt_thread/src/kservice.c ****     {
1201:rt_thread/src/kservice.c ****         rt_hw_console_output(rt_log_buf);
 2431              		.loc 1 1201 0
 2432 0022 0B48     		ldr	r0, .L254
 2433              	.LVL335:
 2434 0024 FFF7FEFF 		bl	rt_hw_console_output
 2435              	.LVL336:
 2436 0028 0CE0     		b	.L248
 2437              	.LVL337:
 2438              	.L250:
 2439              	.LBB20:
1202:rt_thread/src/kservice.c ****     }
1203:rt_thread/src/kservice.c ****     else
1204:rt_thread/src/kservice.c ****     {
1205:rt_thread/src/kservice.c ****         rt_uint16_t old_flag = _console_device->open_flag;
 2440              		.loc 1 1205 0
 2441 002a 258B     		ldrh	r5, [r4, #24]
 2442              	.LVL338:
1206:rt_thread/src/kservice.c **** 
1207:rt_thread/src/kservice.c ****         _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
 2443              		.loc 1 1207 0
 2444 002c 45F04003 		orr	r3, r5, #64
ARM GAS  /tmp/ccJEowFS.s 			page 69


 2445 0030 2383     		strh	r3, [r4, #24]	@ movhi
1208:rt_thread/src/kservice.c ****         rt_device_write(_console_device, 0, rt_log_buf, length);
 2446              		.loc 1 1208 0
 2447 0032 0346     		mov	r3, r0
 2448 0034 064A     		ldr	r2, .L254
 2449 0036 0021     		movs	r1, #0
 2450 0038 2046     		mov	r0, r4
 2451              	.LVL339:
 2452 003a FFF7FEFF 		bl	rt_device_write
 2453              	.LVL340:
1209:rt_thread/src/kservice.c ****         _console_device->open_flag = old_flag;
 2454              		.loc 1 1209 0
 2455 003e 054B     		ldr	r3, .L254+4
 2456 0040 1B68     		ldr	r3, [r3]
 2457 0042 1D83     		strh	r5, [r3, #24]	@ movhi
 2458              	.LVL341:
 2459              	.L248:
 2460              	.LBE20:
1210:rt_thread/src/kservice.c ****     }
1211:rt_thread/src/kservice.c **** #else
1212:rt_thread/src/kservice.c ****     rt_hw_console_output(rt_log_buf);
1213:rt_thread/src/kservice.c **** #endif
1214:rt_thread/src/kservice.c ****     va_end(args);
1215:rt_thread/src/kservice.c **** }
 2461              		.loc 1 1215 0
 2462 0044 03B0     		add	sp, sp, #12
 2463              	.LCFI44:
 2464              		.cfi_def_cfa_offset 28
 2465              		@ sp needed
 2466 0046 BDE83040 		pop	{r4, r5, lr}
 2467              	.LCFI45:
 2468              		.cfi_restore 14
 2469              		.cfi_restore 5
 2470              		.cfi_restore 4
 2471              		.cfi_def_cfa_offset 16
 2472 004a 04B0     		add	sp, sp, #16
 2473              	.LCFI46:
 2474              		.cfi_restore 3
 2475              		.cfi_restore 2
 2476              		.cfi_restore 1
 2477              		.cfi_restore 0
 2478              		.cfi_def_cfa_offset 0
 2479 004c 7047     		bx	lr
 2480              	.L255:
 2481 004e 00BF     		.align	2
 2482              	.L254:
 2483 0050 00000000 		.word	.LANCHOR4
 2484 0054 00000000 		.word	.LANCHOR3
 2485              		.cfi_endproc
 2486              	.LFE42:
 2488              		.section	.text.rt_show_version,"ax",%progbits
 2489              		.align	2
 2490              		.global	rt_show_version
 2491              		.thumb
 2492              		.thumb_func
 2494              	rt_show_version:
 2495              	.LFB30:
ARM GAS  /tmp/ccJEowFS.s 			page 70


 536:rt_thread/src/kservice.c ****     rt_kprintf("\n \\ | /\n");
 2496              		.loc 1 536 0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 0
 2499              		@ frame_needed = 0, uses_anonymous_args = 0
 2500 0000 00B5     		push	{lr}
 2501              	.LCFI47:
 2502              		.cfi_def_cfa_offset 4
 2503              		.cfi_offset 14, -4
 2504 0002 83B0     		sub	sp, sp, #12
 2505              	.LCFI48:
 2506              		.cfi_def_cfa_offset 16
 537:rt_thread/src/kservice.c ****     rt_kprintf("- RT -     Thread Operating System\n");
 2507              		.loc 1 537 0
 2508 0004 0948     		ldr	r0, .L258
 2509 0006 FFF7FEFF 		bl	rt_kprintf
 2510              	.LVL342:
 538:rt_thread/src/kservice.c ****     rt_kprintf(" / | \\     %d.%d.%d build %s\n",
 2511              		.loc 1 538 0
 2512 000a 0948     		ldr	r0, .L258+4
 2513 000c FFF7FEFF 		bl	rt_kprintf
 2514              	.LVL343:
 539:rt_thread/src/kservice.c ****                RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__);
 2515              		.loc 1 539 0
 2516 0010 084B     		ldr	r3, .L258+8
 2517 0012 0093     		str	r3, [sp]
 2518 0014 0423     		movs	r3, #4
 2519 0016 0122     		movs	r2, #1
 2520 0018 0321     		movs	r1, #3
 2521 001a 0748     		ldr	r0, .L258+12
 2522 001c FFF7FEFF 		bl	rt_kprintf
 2523              	.LVL344:
 541:rt_thread/src/kservice.c **** }
 2524              		.loc 1 541 0
 2525 0020 0648     		ldr	r0, .L258+16
 2526 0022 FFF7FEFF 		bl	rt_kprintf
 2527              	.LVL345:
 542:rt_thread/src/kservice.c **** RTM_EXPORT(rt_show_version);
 2528              		.loc 1 542 0
 2529 0026 03B0     		add	sp, sp, #12
 2530              	.LCFI49:
 2531              		.cfi_def_cfa_offset 4
 2532              		@ sp needed
 2533 0028 5DF804FB 		ldr	pc, [sp], #4
 2534              	.L259:
 2535              		.align	2
 2536              	.L258:
 2537 002c 08000000 		.word	.LC1
 2538 0030 14000000 		.word	.LC2
 2539 0034 58000000 		.word	.LC4
 2540 0038 38000000 		.word	.LC3
 2541 003c 64000000 		.word	.LC5
 2542              		.cfi_endproc
 2543              	.LFE30:
 2545              		.section	.text.rt_malloc_align,"ax",%progbits
 2546              		.align	2
 2547              		.global	rt_malloc_align
ARM GAS  /tmp/ccJEowFS.s 			page 71


 2548              		.thumb
 2549              		.thumb_func
 2551              	rt_malloc_align:
 2552              	.LFB43:
1216:rt_thread/src/kservice.c **** RTM_EXPORT(rt_kprintf);
1217:rt_thread/src/kservice.c **** #endif
1218:rt_thread/src/kservice.c **** 
1219:rt_thread/src/kservice.c **** #ifdef RT_USING_HEAP
1220:rt_thread/src/kservice.c **** /**
1221:rt_thread/src/kservice.c ****  * This function allocates a memory block, which address is aligned to the
1222:rt_thread/src/kservice.c ****  * specified alignment size.
1223:rt_thread/src/kservice.c ****  *
1224:rt_thread/src/kservice.c ****  * @param size the allocated memory block size
1225:rt_thread/src/kservice.c ****  * @param align the alignment size
1226:rt_thread/src/kservice.c ****  *
1227:rt_thread/src/kservice.c ****  * @return the allocated memory block on successful, otherwise returns RT_NULL
1228:rt_thread/src/kservice.c ****  */
1229:rt_thread/src/kservice.c **** void *rt_malloc_align(rt_size_t size, rt_size_t align)
1230:rt_thread/src/kservice.c **** {
 2553              		.loc 1 1230 0
 2554              		.cfi_startproc
 2555              		@ args = 0, pretend = 0, frame = 0
 2556              		@ frame_needed = 0, uses_anonymous_args = 0
 2557              	.LVL346:
 2558 0000 10B5     		push	{r4, lr}
 2559              	.LCFI50:
 2560              		.cfi_def_cfa_offset 8
 2561              		.cfi_offset 4, -8
 2562              		.cfi_offset 14, -4
 2563              	.LVL347:
1231:rt_thread/src/kservice.c ****     void *ptr;
1232:rt_thread/src/kservice.c ****     void *align_ptr;
1233:rt_thread/src/kservice.c ****     int uintptr_size;
1234:rt_thread/src/kservice.c ****     rt_size_t align_size;
1235:rt_thread/src/kservice.c **** 
1236:rt_thread/src/kservice.c ****     /* sizeof pointer */
1237:rt_thread/src/kservice.c ****     uintptr_size = sizeof(void*);
1238:rt_thread/src/kservice.c ****     uintptr_size -= 1;
1239:rt_thread/src/kservice.c **** 
1240:rt_thread/src/kservice.c ****     /* align the alignment size to uintptr size byte */
1241:rt_thread/src/kservice.c ****     align = ((align + uintptr_size) & ~uintptr_size);
 2564              		.loc 1 1241 0
 2565 0002 0331     		adds	r1, r1, #3
 2566              	.LVL348:
 2567 0004 21F00304 		bic	r4, r1, #3
 2568              	.LVL349:
1242:rt_thread/src/kservice.c **** 
1243:rt_thread/src/kservice.c ****     /* get total aligned size */
1244:rt_thread/src/kservice.c ****     align_size = ((size + uintptr_size) & ~uintptr_size) + align;
 2569              		.loc 1 1244 0
 2570 0008 0330     		adds	r0, r0, #3
 2571              	.LVL350:
 2572 000a 20F00300 		bic	r0, r0, #3
 2573              	.LVL351:
1245:rt_thread/src/kservice.c ****     /* allocate memory block from heap */
1246:rt_thread/src/kservice.c ****     ptr = rt_malloc(align_size);
 2574              		.loc 1 1246 0
ARM GAS  /tmp/ccJEowFS.s 			page 72


 2575 000e 2044     		add	r0, r0, r4
 2576              	.LVL352:
 2577 0010 FFF7FEFF 		bl	rt_malloc
 2578              	.LVL353:
1247:rt_thread/src/kservice.c ****     if (ptr != RT_NULL)
 2579              		.loc 1 1247 0
 2580 0014 0346     		mov	r3, r0
 2581 0016 58B1     		cbz	r0, .L261
1248:rt_thread/src/kservice.c ****     {
1249:rt_thread/src/kservice.c ****         /* the allocated memory block is aligned */
1250:rt_thread/src/kservice.c ****         if (((rt_ubase_t)ptr & (align - 1)) == 0)
 2582              		.loc 1 1250 0
 2583 0018 621E     		subs	r2, r4, #1
 2584 001a 0146     		mov	r1, r0
 2585 001c 1042     		tst	r0, r2
 2586 001e 01D1     		bne	.L262
1251:rt_thread/src/kservice.c ****         {
1252:rt_thread/src/kservice.c ****             align_ptr = (void *)((rt_ubase_t)ptr + align);
 2587              		.loc 1 1252 0
 2588 0020 2344     		add	r3, r3, r4
 2589              	.LVL354:
 2590 0022 03E0     		b	.L263
 2591              	.LVL355:
 2592              	.L262:
1253:rt_thread/src/kservice.c ****         }
1254:rt_thread/src/kservice.c ****         else
1255:rt_thread/src/kservice.c ****         {
1256:rt_thread/src/kservice.c ****             align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
 2593              		.loc 1 1256 0
 2594 0024 2344     		add	r3, r3, r4
 2595 0026 013B     		subs	r3, r3, #1
 2596 0028 6442     		negs	r4, r4
 2597              	.LVL356:
 2598 002a 2340     		ands	r3, r3, r4
 2599              	.LVL357:
 2600              	.L263:
1257:rt_thread/src/kservice.c ****         }
1258:rt_thread/src/kservice.c **** 
1259:rt_thread/src/kservice.c ****         /* set the pointer before alignment pointer to the real pointer */
1260:rt_thread/src/kservice.c ****         *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
 2601              		.loc 1 1260 0
 2602 002c 43F8041C 		str	r1, [r3, #-4]
 2603              	.LVL358:
 2604              	.L261:
1261:rt_thread/src/kservice.c **** 
1262:rt_thread/src/kservice.c ****         ptr = align_ptr;
1263:rt_thread/src/kservice.c ****     }
1264:rt_thread/src/kservice.c **** 
1265:rt_thread/src/kservice.c ****     return ptr;
1266:rt_thread/src/kservice.c **** }
 2605              		.loc 1 1266 0
 2606 0030 1846     		mov	r0, r3
 2607 0032 10BD     		pop	{r4, pc}
 2608              		.cfi_endproc
 2609              	.LFE43:
 2611              		.section	.text.rt_free_align,"ax",%progbits
 2612              		.align	2
ARM GAS  /tmp/ccJEowFS.s 			page 73


 2613              		.global	rt_free_align
 2614              		.thumb
 2615              		.thumb_func
 2617              	rt_free_align:
 2618              	.LFB44:
1267:rt_thread/src/kservice.c **** RTM_EXPORT(rt_malloc_align);
1268:rt_thread/src/kservice.c **** 
1269:rt_thread/src/kservice.c **** /**
1270:rt_thread/src/kservice.c ****  * This function release the memory block, which is allocated by
1271:rt_thread/src/kservice.c ****  * rt_malloc_align function and address is aligned.
1272:rt_thread/src/kservice.c ****  *
1273:rt_thread/src/kservice.c ****  * @param ptr the memory block pointer
1274:rt_thread/src/kservice.c ****  */
1275:rt_thread/src/kservice.c **** void rt_free_align(void *ptr)
1276:rt_thread/src/kservice.c **** {
 2619              		.loc 1 1276 0
 2620              		.cfi_startproc
 2621              		@ args = 0, pretend = 0, frame = 0
 2622              		@ frame_needed = 0, uses_anonymous_args = 0
 2623              	.LVL359:
 2624 0000 08B5     		push	{r3, lr}
 2625              	.LCFI51:
 2626              		.cfi_def_cfa_offset 8
 2627              		.cfi_offset 3, -8
 2628              		.cfi_offset 14, -4
 2629              	.LVL360:
1277:rt_thread/src/kservice.c ****     void *real_ptr;
1278:rt_thread/src/kservice.c **** 
1279:rt_thread/src/kservice.c ****     real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
1280:rt_thread/src/kservice.c ****     rt_free(real_ptr);
 2630              		.loc 1 1280 0
 2631 0002 50F8040C 		ldr	r0, [r0, #-4]
 2632              	.LVL361:
 2633 0006 FFF7FEFF 		bl	rt_free
 2634              	.LVL362:
 2635 000a 08BD     		pop	{r3, pc}
 2636              		.cfi_endproc
 2637              	.LFE44:
 2639              		.section	.text.__rt_ffs,"ax",%progbits
 2640              		.align	2
 2641              		.global	__rt_ffs
 2642              		.thumb
 2643              		.thumb_func
 2645              	__rt_ffs:
 2646              	.LFB45:
1281:rt_thread/src/kservice.c **** }
1282:rt_thread/src/kservice.c **** RTM_EXPORT(rt_free_align);
1283:rt_thread/src/kservice.c **** #endif
1284:rt_thread/src/kservice.c **** 
1285:rt_thread/src/kservice.c **** #ifndef RT_USING_CPU_FFS
1286:rt_thread/src/kservice.c **** const rt_uint8_t __lowest_bit_bitmap[] =
1287:rt_thread/src/kservice.c **** {
1288:rt_thread/src/kservice.c ****     /* 00 */ 0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1289:rt_thread/src/kservice.c ****     /* 10 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1290:rt_thread/src/kservice.c ****     /* 20 */ 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1291:rt_thread/src/kservice.c ****     /* 30 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1292:rt_thread/src/kservice.c ****     /* 40 */ 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
ARM GAS  /tmp/ccJEowFS.s 			page 74


1293:rt_thread/src/kservice.c ****     /* 50 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1294:rt_thread/src/kservice.c ****     /* 60 */ 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1295:rt_thread/src/kservice.c ****     /* 70 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1296:rt_thread/src/kservice.c ****     /* 80 */ 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1297:rt_thread/src/kservice.c ****     /* 90 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1298:rt_thread/src/kservice.c ****     /* A0 */ 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1299:rt_thread/src/kservice.c ****     /* B0 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1300:rt_thread/src/kservice.c ****     /* C0 */ 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1301:rt_thread/src/kservice.c ****     /* D0 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1302:rt_thread/src/kservice.c ****     /* E0 */ 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1303:rt_thread/src/kservice.c ****     /* F0 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0
1304:rt_thread/src/kservice.c **** };
1305:rt_thread/src/kservice.c **** 
1306:rt_thread/src/kservice.c **** /**
1307:rt_thread/src/kservice.c ****  * This function finds the first bit set (beginning with the least significant bit)
1308:rt_thread/src/kservice.c ****  * in value and return the index of that bit.
1309:rt_thread/src/kservice.c ****  *
1310:rt_thread/src/kservice.c ****  * Bits are numbered starting at 1 (the least significant bit).  A return value of
1311:rt_thread/src/kservice.c ****  * zero from any of these functions means that the argument was zero.
1312:rt_thread/src/kservice.c ****  *
1313:rt_thread/src/kservice.c ****  * @return return the index of the first bit set. If value is 0, then this function
1314:rt_thread/src/kservice.c ****  * shall return 0.
1315:rt_thread/src/kservice.c ****  */
1316:rt_thread/src/kservice.c **** int __rt_ffs(int value)
1317:rt_thread/src/kservice.c **** {
 2647              		.loc 1 1317 0
 2648              		.cfi_startproc
 2649              		@ args = 0, pretend = 0, frame = 0
 2650              		@ frame_needed = 0, uses_anonymous_args = 0
 2651              		@ link register save eliminated.
 2652              	.LVL363:
1318:rt_thread/src/kservice.c ****     if (value == 0) return 0;
 2653              		.loc 1 1318 0
 2654 0000 E8B1     		cbz	r0, .L272
1319:rt_thread/src/kservice.c **** 
1320:rt_thread/src/kservice.c ****     if (value & 0xff)
 2655              		.loc 1 1320 0
 2656 0002 10F0FF02 		ands	r2, r0, #255
 2657 0006 03D0     		beq	.L269
1321:rt_thread/src/kservice.c ****         return __lowest_bit_bitmap[value & 0xff] + 1;
 2658              		.loc 1 1321 0
 2659 0008 0E4B     		ldr	r3, .L273
 2660 000a 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 2661              	.LVL364:
 2662 000c 0130     		adds	r0, r0, #1
 2663 000e 7047     		bx	lr
 2664              	.LVL365:
 2665              	.L269:
1322:rt_thread/src/kservice.c **** 
1323:rt_thread/src/kservice.c ****     if (value & 0xff00)
 2666              		.loc 1 1323 0
 2667 0010 10F47F4F 		tst	r0, #65280
 2668 0014 05D0     		beq	.L270
1324:rt_thread/src/kservice.c ****         return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
 2669              		.loc 1 1324 0
 2670 0016 C0F30723 		ubfx	r3, r0, #8, #8
 2671 001a 0A4A     		ldr	r2, .L273
ARM GAS  /tmp/ccJEowFS.s 			page 75


 2672 001c D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 2673              	.LVL366:
 2674 001e 0930     		adds	r0, r0, #9
 2675 0020 7047     		bx	lr
 2676              	.LVL367:
 2677              	.L270:
1325:rt_thread/src/kservice.c **** 
1326:rt_thread/src/kservice.c ****     if (value & 0xff0000)
 2678              		.loc 1 1326 0
 2679 0022 10F47F0F 		tst	r0, #16711680
 2680 0026 05D0     		beq	.L271
1327:rt_thread/src/kservice.c ****         return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
 2681              		.loc 1 1327 0
 2682 0028 C0F30743 		ubfx	r3, r0, #16, #8
 2683 002c 054A     		ldr	r2, .L273
 2684 002e D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 2685              	.LVL368:
 2686 0030 1130     		adds	r0, r0, #17
 2687 0032 7047     		bx	lr
 2688              	.LVL369:
 2689              	.L271:
1328:rt_thread/src/kservice.c **** 
1329:rt_thread/src/kservice.c ****     return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
 2690              		.loc 1 1329 0
 2691 0034 030E     		lsrs	r3, r0, #24
 2692 0036 034A     		ldr	r2, .L273
 2693 0038 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 2694              	.LVL370:
 2695 003a 1930     		adds	r0, r0, #25
 2696 003c 7047     		bx	lr
 2697              	.LVL371:
 2698              	.L272:
1318:rt_thread/src/kservice.c **** 
 2699              		.loc 1 1318 0
 2700 003e 0020     		movs	r0, #0
 2701              	.LVL372:
1330:rt_thread/src/kservice.c **** }
 2702              		.loc 1 1330 0
 2703 0040 7047     		bx	lr
 2704              	.L274:
 2705 0042 00BF     		.align	2
 2706              	.L273:
 2707 0044 00000000 		.word	.LANCHOR5
 2708              		.cfi_endproc
 2709              	.LFE45:
 2711              		.section	.text.rt_assert_set_hook,"ax",%progbits
 2712              		.align	2
 2713              		.global	rt_assert_set_hook
 2714              		.thumb
 2715              		.thumb_func
 2717              	rt_assert_set_hook:
 2718              	.LFB46:
1331:rt_thread/src/kservice.c **** #endif
1332:rt_thread/src/kservice.c **** 
1333:rt_thread/src/kservice.c **** #ifdef RT_DEBUG
1334:rt_thread/src/kservice.c **** /* RT_ASSERT(EX)'s hook */
1335:rt_thread/src/kservice.c **** 
ARM GAS  /tmp/ccJEowFS.s 			page 76


1336:rt_thread/src/kservice.c **** void (*rt_assert_hook)(const char *ex, const char *func, rt_size_t line);
1337:rt_thread/src/kservice.c **** 
1338:rt_thread/src/kservice.c **** /**
1339:rt_thread/src/kservice.c ****  * This function will set a hook function to RT_ASSERT(EX). It will run when the expression is fals
1340:rt_thread/src/kservice.c ****  *
1341:rt_thread/src/kservice.c ****  * @param hook the hook function
1342:rt_thread/src/kservice.c ****  */
1343:rt_thread/src/kservice.c **** void rt_assert_set_hook(void (*hook)(const char *ex, const char *func, rt_size_t line))
1344:rt_thread/src/kservice.c **** {
 2719              		.loc 1 1344 0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 0
 2722              		@ frame_needed = 0, uses_anonymous_args = 0
 2723              		@ link register save eliminated.
 2724              	.LVL373:
1345:rt_thread/src/kservice.c ****     rt_assert_hook = hook;
 2725              		.loc 1 1345 0
 2726 0000 014B     		ldr	r3, .L276
 2727 0002 1860     		str	r0, [r3]
 2728 0004 7047     		bx	lr
 2729              	.L277:
 2730 0006 00BF     		.align	2
 2731              	.L276:
 2732 0008 00000000 		.word	rt_assert_hook
 2733              		.cfi_endproc
 2734              	.LFE46:
 2736              		.section	.text.rt_assert_handler,"ax",%progbits
 2737              		.align	2
 2738              		.global	rt_assert_handler
 2739              		.thumb
 2740              		.thumb_func
 2742              	rt_assert_handler:
 2743              	.LFB47:
1346:rt_thread/src/kservice.c **** }
1347:rt_thread/src/kservice.c **** 
1348:rt_thread/src/kservice.c **** /**
1349:rt_thread/src/kservice.c ****  * The RT_ASSERT function.
1350:rt_thread/src/kservice.c ****  *
1351:rt_thread/src/kservice.c ****  * @param ex the assertion condition string
1352:rt_thread/src/kservice.c ****  * @param func the function name when assertion.
1353:rt_thread/src/kservice.c ****  * @param line the file line number when assertion.
1354:rt_thread/src/kservice.c ****  */
1355:rt_thread/src/kservice.c **** void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
1356:rt_thread/src/kservice.c **** {
 2744              		.loc 1 1356 0
 2745              		.cfi_startproc
 2746              		@ args = 0, pretend = 0, frame = 8
 2747              		@ frame_needed = 0, uses_anonymous_args = 0
 2748              	.LVL374:
 2749 0000 10B5     		push	{r4, lr}
 2750              	.LCFI52:
 2751              		.cfi_def_cfa_offset 8
 2752              		.cfi_offset 4, -8
 2753              		.cfi_offset 14, -4
 2754 0002 82B0     		sub	sp, sp, #8
 2755              	.LCFI53:
 2756              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccJEowFS.s 			page 77


1357:rt_thread/src/kservice.c ****     volatile char dummy = 0;
 2757              		.loc 1 1357 0
 2758 0004 0023     		movs	r3, #0
 2759 0006 8DF80730 		strb	r3, [sp, #7]
1358:rt_thread/src/kservice.c **** 
1359:rt_thread/src/kservice.c ****     if (rt_assert_hook == RT_NULL)
 2760              		.loc 1 1359 0
 2761 000a 094B     		ldr	r3, .L283
 2762 000c 1C68     		ldr	r4, [r3]
 2763 000e 5CB9     		cbnz	r4, .L279
1360:rt_thread/src/kservice.c ****     {
1361:rt_thread/src/kservice.c **** #ifdef RT_USING_MODULE
1362:rt_thread/src/kservice.c ****         if (dlmodule_self())
1363:rt_thread/src/kservice.c ****         {
1364:rt_thread/src/kservice.c ****             /* close assertion module */
1365:rt_thread/src/kservice.c ****             dlmodule_exit(-1);
1366:rt_thread/src/kservice.c ****         }
1367:rt_thread/src/kservice.c ****         else
1368:rt_thread/src/kservice.c **** #endif
1369:rt_thread/src/kservice.c ****         {
1370:rt_thread/src/kservice.c ****             rt_kprintf("(%s) assertion failed at function:%s, line number:%d \n", ex_string, func, 
 2764              		.loc 1 1370 0
 2765 0010 1346     		mov	r3, r2
 2766 0012 0A46     		mov	r2, r1
 2767              	.LVL375:
 2768 0014 0146     		mov	r1, r0
 2769              	.LVL376:
 2770 0016 0748     		ldr	r0, .L283+4
 2771              	.LVL377:
 2772 0018 FFF7FEFF 		bl	rt_kprintf
 2773              	.LVL378:
 2774              	.L280:
1371:rt_thread/src/kservice.c ****             while (dummy == 0);
 2775              		.loc 1 1371 0 discriminator 1
 2776 001c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 2777 0020 13F0FF0F 		tst	r3, #255
 2778 0024 FAD0     		beq	.L280
 2779 0026 00E0     		b	.L278
 2780              	.LVL379:
 2781              	.L279:
1372:rt_thread/src/kservice.c ****         }
1373:rt_thread/src/kservice.c ****     }
1374:rt_thread/src/kservice.c ****     else
1375:rt_thread/src/kservice.c ****     {
1376:rt_thread/src/kservice.c ****         rt_assert_hook(ex_string, func, line);
 2782              		.loc 1 1376 0
 2783 0028 A047     		blx	r4
 2784              	.LVL380:
 2785              	.L278:
1377:rt_thread/src/kservice.c ****     }
1378:rt_thread/src/kservice.c **** }
 2786              		.loc 1 1378 0
 2787 002a 02B0     		add	sp, sp, #8
 2788              	.LCFI54:
 2789              		.cfi_def_cfa_offset 8
 2790              		@ sp needed
 2791 002c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccJEowFS.s 			page 78


 2792              	.L284:
 2793 002e 00BF     		.align	2
 2794              	.L283:
 2795 0030 00000000 		.word	rt_assert_hook
 2796 0034 90000000 		.word	.LC6
 2797              		.cfi_endproc
 2798              	.LFE47:
 2800              		.comm	rt_assert_hook,4,4
 2801              		.global	__lowest_bit_bitmap
 2802              		.section	.rodata.small_digits.5471,"a",%progbits
 2803              		.align	2
 2804              		.set	.LANCHOR1,. + 0
 2807              	small_digits.5471:
 2808 0000 30313233 		.ascii	"0123456789abcdef\000"
 2808      34353637 
 2808      38396162 
 2808      63646566 
 2808      00
 2809              		.section	.rodata.large_digits.5472,"a",%progbits
 2810              		.align	2
 2811              		.set	.LANCHOR0,. + 0
 2814              	large_digits.5472:
 2815 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 2815      34353637 
 2815      38394142 
 2815      43444546 
 2815      00
 2816              		.section	.rodata.__lowest_bit_bitmap,"a",%progbits
 2817              		.align	2
 2818              		.set	.LANCHOR5,. + 0
 2821              	__lowest_bit_bitmap:
 2822 0000 00       		.byte	0
 2823 0001 00       		.byte	0
 2824 0002 01       		.byte	1
 2825 0003 00       		.byte	0
 2826 0004 02       		.byte	2
 2827 0005 00       		.byte	0
 2828 0006 01       		.byte	1
 2829 0007 00       		.byte	0
 2830 0008 03       		.byte	3
 2831 0009 00       		.byte	0
 2832 000a 01       		.byte	1
 2833 000b 00       		.byte	0
 2834 000c 02       		.byte	2
 2835 000d 00       		.byte	0
 2836 000e 01       		.byte	1
 2837 000f 00       		.byte	0
 2838 0010 04       		.byte	4
 2839 0011 00       		.byte	0
 2840 0012 01       		.byte	1
 2841 0013 00       		.byte	0
 2842 0014 02       		.byte	2
 2843 0015 00       		.byte	0
 2844 0016 01       		.byte	1
 2845 0017 00       		.byte	0
 2846 0018 03       		.byte	3
 2847 0019 00       		.byte	0
ARM GAS  /tmp/ccJEowFS.s 			page 79


 2848 001a 01       		.byte	1
 2849 001b 00       		.byte	0
 2850 001c 02       		.byte	2
 2851 001d 00       		.byte	0
 2852 001e 01       		.byte	1
 2853 001f 00       		.byte	0
 2854 0020 05       		.byte	5
 2855 0021 00       		.byte	0
 2856 0022 01       		.byte	1
 2857 0023 00       		.byte	0
 2858 0024 02       		.byte	2
 2859 0025 00       		.byte	0
 2860 0026 01       		.byte	1
 2861 0027 00       		.byte	0
 2862 0028 03       		.byte	3
 2863 0029 00       		.byte	0
 2864 002a 01       		.byte	1
 2865 002b 00       		.byte	0
 2866 002c 02       		.byte	2
 2867 002d 00       		.byte	0
 2868 002e 01       		.byte	1
 2869 002f 00       		.byte	0
 2870 0030 04       		.byte	4
 2871 0031 00       		.byte	0
 2872 0032 01       		.byte	1
 2873 0033 00       		.byte	0
 2874 0034 02       		.byte	2
 2875 0035 00       		.byte	0
 2876 0036 01       		.byte	1
 2877 0037 00       		.byte	0
 2878 0038 03       		.byte	3
 2879 0039 00       		.byte	0
 2880 003a 01       		.byte	1
 2881 003b 00       		.byte	0
 2882 003c 02       		.byte	2
 2883 003d 00       		.byte	0
 2884 003e 01       		.byte	1
 2885 003f 00       		.byte	0
 2886 0040 06       		.byte	6
 2887 0041 00       		.byte	0
 2888 0042 01       		.byte	1
 2889 0043 00       		.byte	0
 2890 0044 02       		.byte	2
 2891 0045 00       		.byte	0
 2892 0046 01       		.byte	1
 2893 0047 00       		.byte	0
 2894 0048 03       		.byte	3
 2895 0049 00       		.byte	0
 2896 004a 01       		.byte	1
 2897 004b 00       		.byte	0
 2898 004c 02       		.byte	2
 2899 004d 00       		.byte	0
 2900 004e 01       		.byte	1
 2901 004f 00       		.byte	0
 2902 0050 04       		.byte	4
 2903 0051 00       		.byte	0
 2904 0052 01       		.byte	1
ARM GAS  /tmp/ccJEowFS.s 			page 80


 2905 0053 00       		.byte	0
 2906 0054 02       		.byte	2
 2907 0055 00       		.byte	0
 2908 0056 01       		.byte	1
 2909 0057 00       		.byte	0
 2910 0058 03       		.byte	3
 2911 0059 00       		.byte	0
 2912 005a 01       		.byte	1
 2913 005b 00       		.byte	0
 2914 005c 02       		.byte	2
 2915 005d 00       		.byte	0
 2916 005e 01       		.byte	1
 2917 005f 00       		.byte	0
 2918 0060 05       		.byte	5
 2919 0061 00       		.byte	0
 2920 0062 01       		.byte	1
 2921 0063 00       		.byte	0
 2922 0064 02       		.byte	2
 2923 0065 00       		.byte	0
 2924 0066 01       		.byte	1
 2925 0067 00       		.byte	0
 2926 0068 03       		.byte	3
 2927 0069 00       		.byte	0
 2928 006a 01       		.byte	1
 2929 006b 00       		.byte	0
 2930 006c 02       		.byte	2
 2931 006d 00       		.byte	0
 2932 006e 01       		.byte	1
 2933 006f 00       		.byte	0
 2934 0070 04       		.byte	4
 2935 0071 00       		.byte	0
 2936 0072 01       		.byte	1
 2937 0073 00       		.byte	0
 2938 0074 02       		.byte	2
 2939 0075 00       		.byte	0
 2940 0076 01       		.byte	1
 2941 0077 00       		.byte	0
 2942 0078 03       		.byte	3
 2943 0079 00       		.byte	0
 2944 007a 01       		.byte	1
 2945 007b 00       		.byte	0
 2946 007c 02       		.byte	2
 2947 007d 00       		.byte	0
 2948 007e 01       		.byte	1
 2949 007f 00       		.byte	0
 2950 0080 07       		.byte	7
 2951 0081 00       		.byte	0
 2952 0082 01       		.byte	1
 2953 0083 00       		.byte	0
 2954 0084 02       		.byte	2
 2955 0085 00       		.byte	0
 2956 0086 01       		.byte	1
 2957 0087 00       		.byte	0
 2958 0088 03       		.byte	3
 2959 0089 00       		.byte	0
 2960 008a 01       		.byte	1
 2961 008b 00       		.byte	0
ARM GAS  /tmp/ccJEowFS.s 			page 81


 2962 008c 02       		.byte	2
 2963 008d 00       		.byte	0
 2964 008e 01       		.byte	1
 2965 008f 00       		.byte	0
 2966 0090 04       		.byte	4
 2967 0091 00       		.byte	0
 2968 0092 01       		.byte	1
 2969 0093 00       		.byte	0
 2970 0094 02       		.byte	2
 2971 0095 00       		.byte	0
 2972 0096 01       		.byte	1
 2973 0097 00       		.byte	0
 2974 0098 03       		.byte	3
 2975 0099 00       		.byte	0
 2976 009a 01       		.byte	1
 2977 009b 00       		.byte	0
 2978 009c 02       		.byte	2
 2979 009d 00       		.byte	0
 2980 009e 01       		.byte	1
 2981 009f 00       		.byte	0
 2982 00a0 05       		.byte	5
 2983 00a1 00       		.byte	0
 2984 00a2 01       		.byte	1
 2985 00a3 00       		.byte	0
 2986 00a4 02       		.byte	2
 2987 00a5 00       		.byte	0
 2988 00a6 01       		.byte	1
 2989 00a7 00       		.byte	0
 2990 00a8 03       		.byte	3
 2991 00a9 00       		.byte	0
 2992 00aa 01       		.byte	1
 2993 00ab 00       		.byte	0
 2994 00ac 02       		.byte	2
 2995 00ad 00       		.byte	0
 2996 00ae 01       		.byte	1
 2997 00af 00       		.byte	0
 2998 00b0 04       		.byte	4
 2999 00b1 00       		.byte	0
 3000 00b2 01       		.byte	1
 3001 00b3 00       		.byte	0
 3002 00b4 02       		.byte	2
 3003 00b5 00       		.byte	0
 3004 00b6 01       		.byte	1
 3005 00b7 00       		.byte	0
 3006 00b8 03       		.byte	3
 3007 00b9 00       		.byte	0
 3008 00ba 01       		.byte	1
 3009 00bb 00       		.byte	0
 3010 00bc 02       		.byte	2
 3011 00bd 00       		.byte	0
 3012 00be 01       		.byte	1
 3013 00bf 00       		.byte	0
 3014 00c0 06       		.byte	6
 3015 00c1 00       		.byte	0
 3016 00c2 01       		.byte	1
 3017 00c3 00       		.byte	0
 3018 00c4 02       		.byte	2
ARM GAS  /tmp/ccJEowFS.s 			page 82


 3019 00c5 00       		.byte	0
 3020 00c6 01       		.byte	1
 3021 00c7 00       		.byte	0
 3022 00c8 03       		.byte	3
 3023 00c9 00       		.byte	0
 3024 00ca 01       		.byte	1
 3025 00cb 00       		.byte	0
 3026 00cc 02       		.byte	2
 3027 00cd 00       		.byte	0
 3028 00ce 01       		.byte	1
 3029 00cf 00       		.byte	0
 3030 00d0 04       		.byte	4
 3031 00d1 00       		.byte	0
 3032 00d2 01       		.byte	1
 3033 00d3 00       		.byte	0
 3034 00d4 02       		.byte	2
 3035 00d5 00       		.byte	0
 3036 00d6 01       		.byte	1
 3037 00d7 00       		.byte	0
 3038 00d8 03       		.byte	3
 3039 00d9 00       		.byte	0
 3040 00da 01       		.byte	1
 3041 00db 00       		.byte	0
 3042 00dc 02       		.byte	2
 3043 00dd 00       		.byte	0
 3044 00de 01       		.byte	1
 3045 00df 00       		.byte	0
 3046 00e0 05       		.byte	5
 3047 00e1 00       		.byte	0
 3048 00e2 01       		.byte	1
 3049 00e3 00       		.byte	0
 3050 00e4 02       		.byte	2
 3051 00e5 00       		.byte	0
 3052 00e6 01       		.byte	1
 3053 00e7 00       		.byte	0
 3054 00e8 03       		.byte	3
 3055 00e9 00       		.byte	0
 3056 00ea 01       		.byte	1
 3057 00eb 00       		.byte	0
 3058 00ec 02       		.byte	2
 3059 00ed 00       		.byte	0
 3060 00ee 01       		.byte	1
 3061 00ef 00       		.byte	0
 3062 00f0 04       		.byte	4
 3063 00f1 00       		.byte	0
 3064 00f2 01       		.byte	1
 3065 00f3 00       		.byte	0
 3066 00f4 02       		.byte	2
 3067 00f5 00       		.byte	0
 3068 00f6 01       		.byte	1
 3069 00f7 00       		.byte	0
 3070 00f8 03       		.byte	3
 3071 00f9 00       		.byte	0
 3072 00fa 01       		.byte	1
 3073 00fb 00       		.byte	0
 3074 00fc 02       		.byte	2
 3075 00fd 00       		.byte	0
ARM GAS  /tmp/ccJEowFS.s 			page 83


 3076 00fe 01       		.byte	1
 3077 00ff 00       		.byte	0
 3078              		.section	.bss.rt_log_buf.5582,"aw",%nobits
 3079              		.align	2
 3080              		.set	.LANCHOR4,. + 0
 3083              	rt_log_buf.5582:
 3084 0000 00000000 		.space	128
 3084      00000000 
 3084      00000000 
 3084      00000000 
 3084      00000000 
 3085              		.section	.bss.__rt_errno,"aw",%nobits
 3086              		.align	2
 3087              		.set	.LANCHOR2,. + 0
 3090              	__rt_errno:
 3091 0000 00000000 		.space	4
 3092              		.section	.bss._console_device,"aw",%nobits
 3093              		.align	2
 3094              		.set	.LANCHOR3,. + 0
 3097              	_console_device:
 3098 0000 00000000 		.space	4
 3099              		.section	.rodata.str1.4,"aMS",%progbits,1
 3100              		.align	2
 3101              	.LC0:
 3102 0000 284E554C 		.ascii	"(NULL)\000"
 3102      4C2900
 3103 0007 00       		.space	1
 3104              	.LC1:
 3105 0008 0A205C20 		.ascii	"\012 \\ | /\012\000"
 3105      7C202F0A 
 3105      00
 3106 0011 000000   		.space	3
 3107              	.LC2:
 3108 0014 2D205254 		.ascii	"- RT -     Thread Operating System\012\000"
 3108      202D2020 
 3108      20202054 
 3108      68726561 
 3108      64204F70 
 3109              	.LC3:
 3110 0038 202F207C 		.ascii	" / | \\     %d.%d.%d build %s\012\000"
 3110      205C2020 
 3110      20202025 
 3110      642E2564 
 3110      2E256420 
 3111 0056 0000     		.space	2
 3112              	.LC4:
 3113 0058 46656220 		.ascii	"Feb 13 2020\000"
 3113      31332032 
 3113      30323000 
 3114              	.LC5:
 3115 0064 20323030 		.ascii	" 2006 - 2019 Copyright by rt-thread team\012\000"
 3115      36202D20 
 3115      32303139 
 3115      20436F70 
 3115      79726967 
 3116 008e 0000     		.space	2
 3117              	.LC6:
ARM GAS  /tmp/ccJEowFS.s 			page 84


 3118 0090 28257329 		.ascii	"(%s) assertion failed at function:%s, line number:%"
 3118      20617373 
 3118      65727469 
 3118      6F6E2066 
 3118      61696C65 
 3119 00c3 64200A00 		.ascii	"d \012\000"
 3120              		.text
 3121              	.Letext0:
 3122              		.file 2 "rt_thread/include/rtdef.h"
 3123              		.file 3 "<built-in>"
 3124              		.file 4 "rt_thread/include/rtthread.h"
ARM GAS  /tmp/ccJEowFS.s 			page 85


DEFINED SYMBOLS
                            *ABS*:0000000000000000 kservice.c
     /tmp/ccJEowFS.s:20     .text.print_number:0000000000000000 $t
     /tmp/ccJEowFS.s:24     .text.print_number:0000000000000000 print_number
     /tmp/ccJEowFS.s:340    .text.print_number:0000000000000164 $d
     /tmp/ccJEowFS.s:347    .text.rt_get_errno:0000000000000000 $t
     /tmp/ccJEowFS.s:352    .text.rt_get_errno:0000000000000000 rt_get_errno
     /tmp/ccJEowFS.s:392    .text.rt_get_errno:0000000000000020 $d
     /tmp/ccJEowFS.s:397    .text.rt_set_errno:0000000000000000 $t
     /tmp/ccJEowFS.s:402    .text.rt_set_errno:0000000000000000 rt_set_errno
     /tmp/ccJEowFS.s:445    .text.rt_set_errno:0000000000000020 $d
     /tmp/ccJEowFS.s:450    .text._rt_errno:0000000000000000 $t
     /tmp/ccJEowFS.s:455    .text._rt_errno:0000000000000000 _rt_errno
     /tmp/ccJEowFS.s:494    .text._rt_errno:000000000000001c $d
     /tmp/ccJEowFS.s:499    .text.rt_memset:0000000000000000 $t
     /tmp/ccJEowFS.s:504    .text.rt_memset:0000000000000000 rt_memset
     /tmp/ccJEowFS.s:504    .text.rt_memset:0000000000000000 memset
     /tmp/ccJEowFS.s:610    .text.rt_memcpy:0000000000000000 $t
     /tmp/ccJEowFS.s:615    .text.rt_memcpy:0000000000000000 rt_memcpy
     /tmp/ccJEowFS.s:615    .text.rt_memcpy:0000000000000000 memcpy
     /tmp/ccJEowFS.s:725    .text.rt_memmove:0000000000000000 $t
     /tmp/ccJEowFS.s:730    .text.rt_memmove:0000000000000000 rt_memmove
     /tmp/ccJEowFS.s:730    .text.rt_memmove:0000000000000000 memmove
     /tmp/ccJEowFS.s:812    .text.rt_memcmp:0000000000000000 $t
     /tmp/ccJEowFS.s:817    .text.rt_memcmp:0000000000000000 rt_memcmp
     /tmp/ccJEowFS.s:817    .text.rt_memcmp:0000000000000000 memcmp
     /tmp/ccJEowFS.s:870    .text.rt_strcasecmp:0000000000000000 $t
     /tmp/ccJEowFS.s:875    .text.rt_strcasecmp:0000000000000000 rt_strcasecmp
     /tmp/ccJEowFS.s:875    .text.rt_strcasecmp:0000000000000000 strcasecmp
     /tmp/ccJEowFS.s:944    .text.rt_strncpy:0000000000000000 $t
     /tmp/ccJEowFS.s:949    .text.rt_strncpy:0000000000000000 rt_strncpy
     /tmp/ccJEowFS.s:949    .text.rt_strncpy:0000000000000000 strncpy
     /tmp/ccJEowFS.s:1018   .text.rt_strncmp:0000000000000000 $t
     /tmp/ccJEowFS.s:1023   .text.rt_strncmp:0000000000000000 rt_strncmp
     /tmp/ccJEowFS.s:1023   .text.rt_strncmp:0000000000000000 strncmp
     /tmp/ccJEowFS.s:1084   .text.rt_strcmp:0000000000000000 $t
     /tmp/ccJEowFS.s:1089   .text.rt_strcmp:0000000000000000 rt_strcmp
     /tmp/ccJEowFS.s:1124   .text.rt_strnlen:0000000000000000 $t
     /tmp/ccJEowFS.s:1129   .text.rt_strnlen:0000000000000000 rt_strnlen
     /tmp/ccJEowFS.s:1162   .text.rt_strlen:0000000000000000 $t
     /tmp/ccJEowFS.s:1167   .text.rt_strlen:0000000000000000 rt_strlen
     /tmp/ccJEowFS.s:1167   .text.rt_strlen:0000000000000000 strlen
     /tmp/ccJEowFS.s:1198   .text.rt_strstr:0000000000000000 $t
     /tmp/ccJEowFS.s:1203   .text.rt_strstr:0000000000000000 rt_strstr
     /tmp/ccJEowFS.s:1203   .text.rt_strstr:0000000000000000 strstr
     /tmp/ccJEowFS.s:1279   .text.rt_strdup:0000000000000000 $t
     /tmp/ccJEowFS.s:1284   .text.rt_strdup:0000000000000000 rt_strdup
     /tmp/ccJEowFS.s:1284   .text.rt_strdup:0000000000000000 strdup
     /tmp/ccJEowFS.s:1332   .text.rt_vsnprintf:0000000000000000 $t
     /tmp/ccJEowFS.s:1337   .text.rt_vsnprintf:0000000000000000 rt_vsnprintf
     /tmp/ccJEowFS.s:1627   .text.rt_vsnprintf:0000000000000130 $d
     /tmp/ccJEowFS.s:1711   .text.rt_vsnprintf:0000000000000184 $t
     /tmp/ccJEowFS.s:2065   .text.rt_vsnprintf:0000000000000308 $d
     /tmp/ccJEowFS.s:2070   .text.rt_snprintf:0000000000000000 $t
     /tmp/ccJEowFS.s:2075   .text.rt_snprintf:0000000000000000 rt_snprintf
     /tmp/ccJEowFS.s:2075   .text.rt_snprintf:0000000000000000 snprintf
     /tmp/ccJEowFS.s:2122   .text.rt_vsprintf:0000000000000000 $t
ARM GAS  /tmp/ccJEowFS.s 			page 86


     /tmp/ccJEowFS.s:2127   .text.rt_vsprintf:0000000000000000 rt_vsprintf
     /tmp/ccJEowFS.s:2127   .text.rt_vsprintf:0000000000000000 vsprintf
     /tmp/ccJEowFS.s:2155   .text.rt_sprintf:0000000000000000 $t
     /tmp/ccJEowFS.s:2160   .text.rt_sprintf:0000000000000000 rt_sprintf
     /tmp/ccJEowFS.s:2160   .text.rt_sprintf:0000000000000000 sprintf
     /tmp/ccJEowFS.s:2209   .text.rt_console_get_device:0000000000000000 $t
     /tmp/ccJEowFS.s:2214   .text.rt_console_get_device:0000000000000000 rt_console_get_device
     /tmp/ccJEowFS.s:2228   .text.rt_console_get_device:0000000000000008 $d
     /tmp/ccJEowFS.s:2233   .text.rt_console_set_device:0000000000000000 $t
     /tmp/ccJEowFS.s:2238   .text.rt_console_set_device:0000000000000000 rt_console_set_device
     /tmp/ccJEowFS.s:2288   .text.rt_console_set_device:0000000000000028 $d
     /tmp/ccJEowFS.s:2293   .text.rt_hw_console_output:0000000000000000 $t
     /tmp/ccJEowFS.s:2298   .text.rt_hw_console_output:0000000000000000 rt_hw_console_output
     /tmp/ccJEowFS.s:2311   .text.rt_kputs:0000000000000000 $t
     /tmp/ccJEowFS.s:2316   .text.rt_kputs:0000000000000000 rt_kputs
     /tmp/ccJEowFS.s:2377   .text.rt_kputs:0000000000000034 $d
     /tmp/ccJEowFS.s:2383   .text.rt_kprintf:0000000000000000 $t
     /tmp/ccJEowFS.s:2388   .text.rt_kprintf:0000000000000000 rt_kprintf
     /tmp/ccJEowFS.s:2483   .text.rt_kprintf:0000000000000050 $d
     /tmp/ccJEowFS.s:2489   .text.rt_show_version:0000000000000000 $t
     /tmp/ccJEowFS.s:2494   .text.rt_show_version:0000000000000000 rt_show_version
     /tmp/ccJEowFS.s:2537   .text.rt_show_version:000000000000002c $d
     /tmp/ccJEowFS.s:2546   .text.rt_malloc_align:0000000000000000 $t
     /tmp/ccJEowFS.s:2551   .text.rt_malloc_align:0000000000000000 rt_malloc_align
     /tmp/ccJEowFS.s:2612   .text.rt_free_align:0000000000000000 $t
     /tmp/ccJEowFS.s:2617   .text.rt_free_align:0000000000000000 rt_free_align
     /tmp/ccJEowFS.s:2640   .text.__rt_ffs:0000000000000000 $t
     /tmp/ccJEowFS.s:2645   .text.__rt_ffs:0000000000000000 __rt_ffs
     /tmp/ccJEowFS.s:2707   .text.__rt_ffs:0000000000000044 $d
     /tmp/ccJEowFS.s:2712   .text.rt_assert_set_hook:0000000000000000 $t
     /tmp/ccJEowFS.s:2717   .text.rt_assert_set_hook:0000000000000000 rt_assert_set_hook
     /tmp/ccJEowFS.s:2732   .text.rt_assert_set_hook:0000000000000008 $d
                            *COM*:0000000000000004 rt_assert_hook
     /tmp/ccJEowFS.s:2737   .text.rt_assert_handler:0000000000000000 $t
     /tmp/ccJEowFS.s:2742   .text.rt_assert_handler:0000000000000000 rt_assert_handler
     /tmp/ccJEowFS.s:2795   .text.rt_assert_handler:0000000000000030 $d
     /tmp/ccJEowFS.s:2821   .rodata.__lowest_bit_bitmap:0000000000000000 __lowest_bit_bitmap
     /tmp/ccJEowFS.s:2803   .rodata.small_digits.5471:0000000000000000 $d
     /tmp/ccJEowFS.s:2807   .rodata.small_digits.5471:0000000000000000 small_digits.5471
     /tmp/ccJEowFS.s:2810   .rodata.large_digits.5472:0000000000000000 $d
     /tmp/ccJEowFS.s:2814   .rodata.large_digits.5472:0000000000000000 large_digits.5472
     /tmp/ccJEowFS.s:2817   .rodata.__lowest_bit_bitmap:0000000000000000 $d
     /tmp/ccJEowFS.s:3079   .bss.rt_log_buf.5582:0000000000000000 $d
     /tmp/ccJEowFS.s:3083   .bss.rt_log_buf.5582:0000000000000000 rt_log_buf.5582
     /tmp/ccJEowFS.s:3086   .bss.__rt_errno:0000000000000000 $d
     /tmp/ccJEowFS.s:3090   .bss.__rt_errno:0000000000000000 __rt_errno
     /tmp/ccJEowFS.s:3093   .bss._console_device:0000000000000000 $d
     /tmp/ccJEowFS.s:3097   .bss._console_device:0000000000000000 _console_device
     /tmp/ccJEowFS.s:3100   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_interrupt_get_nest
rt_thread_self
rt_malloc
rt_device_find
rt_device_close
ARM GAS  /tmp/ccJEowFS.s 			page 87


rt_device_open
rt_device_write
rt_free
