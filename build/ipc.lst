ARM GAS  /tmp/ccObKSes.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ipc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.rt_sem_init,"ax",%progbits
  20              		.align	2
  21              		.global	rt_sem_init
  22              		.thumb
  23              		.thumb_func
  25              	rt_sem_init:
  26              	.LFB19:
  27              		.file 1 "rt_thread/src/ipc.c"
   1:rt_thread/src/ipc.c **** /*
   2:rt_thread/src/ipc.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt_thread/src/ipc.c ****  *
   4:rt_thread/src/ipc.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt_thread/src/ipc.c ****  *
   6:rt_thread/src/ipc.c ****  * Change Logs:
   7:rt_thread/src/ipc.c ****  * Date           Author       Notes
   8:rt_thread/src/ipc.c ****  * 2006-03-14     Bernard      the first version
   9:rt_thread/src/ipc.c ****  * 2006-04-25     Bernard      implement semaphore
  10:rt_thread/src/ipc.c ****  * 2006-05-03     Bernard      add RT_IPC_DEBUG
  11:rt_thread/src/ipc.c ****  *                             modify the type of IPC waiting time to rt_int32_t
  12:rt_thread/src/ipc.c ****  * 2006-05-10     Bernard      fix the semaphore take bug and add IPC object
  13:rt_thread/src/ipc.c ****  * 2006-05-12     Bernard      implement mailbox and message queue
  14:rt_thread/src/ipc.c ****  * 2006-05-20     Bernard      implement mutex
  15:rt_thread/src/ipc.c ****  * 2006-05-23     Bernard      implement fast event
  16:rt_thread/src/ipc.c ****  * 2006-05-24     Bernard      implement event
  17:rt_thread/src/ipc.c ****  * 2006-06-03     Bernard      fix the thread timer init bug
  18:rt_thread/src/ipc.c ****  * 2006-06-05     Bernard      fix the mutex release bug
  19:rt_thread/src/ipc.c ****  * 2006-06-07     Bernard      fix the message queue send bug
  20:rt_thread/src/ipc.c ****  * 2006-08-04     Bernard      add hook support
  21:rt_thread/src/ipc.c ****  * 2009-05-21     Yi.qiu       fix the sem release bug
  22:rt_thread/src/ipc.c ****  * 2009-07-18     Bernard      fix the event clear bug
  23:rt_thread/src/ipc.c ****  * 2009-09-09     Bernard      remove fast event and fix ipc release bug
  24:rt_thread/src/ipc.c ****  * 2009-10-10     Bernard      change semaphore and mutex value to unsigned value
  25:rt_thread/src/ipc.c ****  * 2009-10-25     Bernard      change the mb/mq receive timeout to 0 if the
  26:rt_thread/src/ipc.c ****  *                             re-calculated delta tick is a negative number.
  27:rt_thread/src/ipc.c ****  * 2009-12-16     Bernard      fix the rt_ipc_object_suspend issue when IPC flag
  28:rt_thread/src/ipc.c ****  *                             is RT_IPC_FLAG_PRIO
  29:rt_thread/src/ipc.c ****  * 2010-01-20     mbbill       remove rt_ipc_object_decrease function.
  30:rt_thread/src/ipc.c ****  * 2010-04-20     Bernard      move memcpy outside interrupt disable in mq
  31:rt_thread/src/ipc.c ****  * 2010-10-26     yi.qiu       add module support in rt_mp_delete and rt_mq_delete
ARM GAS  /tmp/ccObKSes.s 			page 2


  32:rt_thread/src/ipc.c ****  * 2010-11-10     Bernard      add IPC reset command implementation.
  33:rt_thread/src/ipc.c ****  * 2011-12-18     Bernard      add more parameter checking in message queue
  34:rt_thread/src/ipc.c ****  * 2013-09-14     Grissiom     add an option check in rt_event_recv
  35:rt_thread/src/ipc.c ****  * 2018-10-02     Bernard      add 64bit support for mailbox
  36:rt_thread/src/ipc.c ****  * 2019-09-16     tyx          add send wait support for message queue
  37:rt_thread/src/ipc.c ****  */
  38:rt_thread/src/ipc.c **** 
  39:rt_thread/src/ipc.c **** #include <rtthread.h>
  40:rt_thread/src/ipc.c **** #include <rthw.h>
  41:rt_thread/src/ipc.c **** 
  42:rt_thread/src/ipc.c **** #ifdef RT_USING_HOOK
  43:rt_thread/src/ipc.c **** extern void (*rt_object_trytake_hook)(struct rt_object *object);
  44:rt_thread/src/ipc.c **** extern void (*rt_object_take_hook)(struct rt_object *object);
  45:rt_thread/src/ipc.c **** extern void (*rt_object_put_hook)(struct rt_object *object);
  46:rt_thread/src/ipc.c **** #endif
  47:rt_thread/src/ipc.c **** 
  48:rt_thread/src/ipc.c **** /**
  49:rt_thread/src/ipc.c ****  * @addtogroup IPC
  50:rt_thread/src/ipc.c ****  */
  51:rt_thread/src/ipc.c **** 
  52:rt_thread/src/ipc.c **** /**@{*/
  53:rt_thread/src/ipc.c **** 
  54:rt_thread/src/ipc.c **** /**
  55:rt_thread/src/ipc.c ****  * This function will initialize an IPC object
  56:rt_thread/src/ipc.c ****  *
  57:rt_thread/src/ipc.c ****  * @param ipc the IPC object
  58:rt_thread/src/ipc.c ****  *
  59:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
  60:rt_thread/src/ipc.c ****  */
  61:rt_thread/src/ipc.c **** rt_inline rt_err_t rt_ipc_object_init(struct rt_ipc_object *ipc)
  62:rt_thread/src/ipc.c **** {
  63:rt_thread/src/ipc.c ****     /* initialize ipc object */
  64:rt_thread/src/ipc.c ****     rt_list_init(&(ipc->suspend_thread));
  65:rt_thread/src/ipc.c **** 
  66:rt_thread/src/ipc.c ****     return RT_EOK;
  67:rt_thread/src/ipc.c **** }
  68:rt_thread/src/ipc.c **** 
  69:rt_thread/src/ipc.c **** /**
  70:rt_thread/src/ipc.c ****  * This function will suspend a thread to a specified list. IPC object or some
  71:rt_thread/src/ipc.c ****  * double-queue object (mailbox etc.) contains this kind of list.
  72:rt_thread/src/ipc.c ****  *
  73:rt_thread/src/ipc.c ****  * @param list the IPC suspended thread list
  74:rt_thread/src/ipc.c ****  * @param thread the thread object to be suspended
  75:rt_thread/src/ipc.c ****  * @param flag the IPC object flag,
  76:rt_thread/src/ipc.c ****  *        which shall be RT_IPC_FLAG_FIFO/RT_IPC_FLAG_PRIO.
  77:rt_thread/src/ipc.c ****  *
  78:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
  79:rt_thread/src/ipc.c ****  */
  80:rt_thread/src/ipc.c **** rt_inline rt_err_t rt_ipc_list_suspend(rt_list_t        *list,
  81:rt_thread/src/ipc.c ****                                        struct rt_thread *thread,
  82:rt_thread/src/ipc.c ****                                        rt_uint8_t        flag)
  83:rt_thread/src/ipc.c **** {
  84:rt_thread/src/ipc.c ****     /* suspend thread */
  85:rt_thread/src/ipc.c ****     rt_thread_suspend(thread);
  86:rt_thread/src/ipc.c **** 
  87:rt_thread/src/ipc.c ****     switch (flag)
  88:rt_thread/src/ipc.c ****     {
ARM GAS  /tmp/ccObKSes.s 			page 3


  89:rt_thread/src/ipc.c ****     case RT_IPC_FLAG_FIFO:
  90:rt_thread/src/ipc.c ****         rt_list_insert_before(list, &(thread->tlist));
  91:rt_thread/src/ipc.c ****         break;
  92:rt_thread/src/ipc.c **** 
  93:rt_thread/src/ipc.c ****     case RT_IPC_FLAG_PRIO:
  94:rt_thread/src/ipc.c ****         {
  95:rt_thread/src/ipc.c ****             struct rt_list_node *n;
  96:rt_thread/src/ipc.c ****             struct rt_thread *sthread;
  97:rt_thread/src/ipc.c **** 
  98:rt_thread/src/ipc.c ****             /* find a suitable position */
  99:rt_thread/src/ipc.c ****             for (n = list->next; n != list; n = n->next)
 100:rt_thread/src/ipc.c ****             {
 101:rt_thread/src/ipc.c ****                 sthread = rt_list_entry(n, struct rt_thread, tlist);
 102:rt_thread/src/ipc.c **** 
 103:rt_thread/src/ipc.c ****                 /* find out */
 104:rt_thread/src/ipc.c ****                 if (thread->current_priority < sthread->current_priority)
 105:rt_thread/src/ipc.c ****                 {
 106:rt_thread/src/ipc.c ****                     /* insert this thread before the sthread */
 107:rt_thread/src/ipc.c ****                     rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
 108:rt_thread/src/ipc.c ****                     break;
 109:rt_thread/src/ipc.c ****                 }
 110:rt_thread/src/ipc.c ****             }
 111:rt_thread/src/ipc.c **** 
 112:rt_thread/src/ipc.c ****             /*
 113:rt_thread/src/ipc.c ****              * not found a suitable position,
 114:rt_thread/src/ipc.c ****              * append to the end of suspend_thread list
 115:rt_thread/src/ipc.c ****              */
 116:rt_thread/src/ipc.c ****             if (n == list)
 117:rt_thread/src/ipc.c ****                 rt_list_insert_before(list, &(thread->tlist));
 118:rt_thread/src/ipc.c ****         }
 119:rt_thread/src/ipc.c ****         break;
 120:rt_thread/src/ipc.c ****     }
 121:rt_thread/src/ipc.c **** 
 122:rt_thread/src/ipc.c ****     return RT_EOK;
 123:rt_thread/src/ipc.c **** }
 124:rt_thread/src/ipc.c **** 
 125:rt_thread/src/ipc.c **** /**
 126:rt_thread/src/ipc.c ****  * This function will resume the first thread in the list of a IPC object:
 127:rt_thread/src/ipc.c ****  * - remove the thread from suspend queue of IPC object
 128:rt_thread/src/ipc.c ****  * - put the thread into system ready queue
 129:rt_thread/src/ipc.c ****  *
 130:rt_thread/src/ipc.c ****  * @param list the thread list
 131:rt_thread/src/ipc.c ****  *
 132:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 133:rt_thread/src/ipc.c ****  */
 134:rt_thread/src/ipc.c **** rt_inline rt_err_t rt_ipc_list_resume(rt_list_t *list)
 135:rt_thread/src/ipc.c **** {
 136:rt_thread/src/ipc.c ****     struct rt_thread *thread;
 137:rt_thread/src/ipc.c **** 
 138:rt_thread/src/ipc.c ****     /* get thread entry */
 139:rt_thread/src/ipc.c ****     thread = rt_list_entry(list->next, struct rt_thread, tlist);
 140:rt_thread/src/ipc.c **** 
 141:rt_thread/src/ipc.c ****     RT_DEBUG_LOG(RT_DEBUG_IPC, ("resume thread:%s\n", thread->name));
 142:rt_thread/src/ipc.c **** 
 143:rt_thread/src/ipc.c ****     /* resume it */
 144:rt_thread/src/ipc.c ****     rt_thread_resume(thread);
 145:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 4


 146:rt_thread/src/ipc.c ****     return RT_EOK;
 147:rt_thread/src/ipc.c **** }
 148:rt_thread/src/ipc.c **** 
 149:rt_thread/src/ipc.c **** /**
 150:rt_thread/src/ipc.c ****  * This function will resume all suspended threads in a list, including
 151:rt_thread/src/ipc.c ****  * suspend list of IPC object and private list of mailbox etc.
 152:rt_thread/src/ipc.c ****  *
 153:rt_thread/src/ipc.c ****  * @param list of the threads to resume
 154:rt_thread/src/ipc.c ****  *
 155:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 156:rt_thread/src/ipc.c ****  */
 157:rt_thread/src/ipc.c **** rt_inline rt_err_t rt_ipc_list_resume_all(rt_list_t *list)
 158:rt_thread/src/ipc.c **** {
 159:rt_thread/src/ipc.c ****     struct rt_thread *thread;
 160:rt_thread/src/ipc.c ****     register rt_ubase_t temp;
 161:rt_thread/src/ipc.c **** 
 162:rt_thread/src/ipc.c ****     /* wakeup all suspended threads */
 163:rt_thread/src/ipc.c ****     while (!rt_list_isempty(list))
 164:rt_thread/src/ipc.c ****     {
 165:rt_thread/src/ipc.c ****         /* disable interrupt */
 166:rt_thread/src/ipc.c ****         temp = rt_hw_interrupt_disable();
 167:rt_thread/src/ipc.c **** 
 168:rt_thread/src/ipc.c ****         /* get next suspended thread */
 169:rt_thread/src/ipc.c ****         thread = rt_list_entry(list->next, struct rt_thread, tlist);
 170:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 171:rt_thread/src/ipc.c ****         thread->error = -RT_ERROR;
 172:rt_thread/src/ipc.c **** 
 173:rt_thread/src/ipc.c ****         /*
 174:rt_thread/src/ipc.c ****          * resume thread
 175:rt_thread/src/ipc.c ****          * In rt_thread_resume function, it will remove current thread from
 176:rt_thread/src/ipc.c ****          * suspended list
 177:rt_thread/src/ipc.c ****          */
 178:rt_thread/src/ipc.c ****         rt_thread_resume(thread);
 179:rt_thread/src/ipc.c **** 
 180:rt_thread/src/ipc.c ****         /* enable interrupt */
 181:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 182:rt_thread/src/ipc.c ****     }
 183:rt_thread/src/ipc.c **** 
 184:rt_thread/src/ipc.c ****     return RT_EOK;
 185:rt_thread/src/ipc.c **** }
 186:rt_thread/src/ipc.c **** 
 187:rt_thread/src/ipc.c **** #ifdef RT_USING_SEMAPHORE
 188:rt_thread/src/ipc.c **** /**
 189:rt_thread/src/ipc.c ****  * This function will initialize a semaphore and put it under control of
 190:rt_thread/src/ipc.c ****  * resource management.
 191:rt_thread/src/ipc.c ****  *
 192:rt_thread/src/ipc.c ****  * @param sem the semaphore object
 193:rt_thread/src/ipc.c ****  * @param name the name of semaphore
 194:rt_thread/src/ipc.c ****  * @param value the initial value of semaphore
 195:rt_thread/src/ipc.c ****  * @param flag the flag of semaphore
 196:rt_thread/src/ipc.c ****  *
 197:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 198:rt_thread/src/ipc.c ****  */
 199:rt_thread/src/ipc.c **** rt_err_t rt_sem_init(rt_sem_t    sem,
 200:rt_thread/src/ipc.c ****                      const char *name,
 201:rt_thread/src/ipc.c ****                      rt_uint32_t value,
 202:rt_thread/src/ipc.c ****                      rt_uint8_t  flag)
ARM GAS  /tmp/ccObKSes.s 			page 5


 203:rt_thread/src/ipc.c **** {
  28              		.loc 1 203 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 3, -24
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 0F46     		mov	r7, r1
  43 0004 1546     		mov	r5, r2
  44 0006 1E46     		mov	r6, r3
 204:rt_thread/src/ipc.c ****     RT_ASSERT(sem != RT_NULL);
  45              		.loc 1 204 0
  46 0008 0446     		mov	r4, r0
  47 000a 20B9     		cbnz	r0, .L2
  48              		.loc 1 204 0 is_stmt 0 discriminator 1
  49 000c CC22     		movs	r2, #204
  50              	.LVL1:
  51 000e 0C49     		ldr	r1, .L5
  52              	.LVL2:
  53 0010 0C48     		ldr	r0, .L5+4
  54              	.LVL3:
  55 0012 FFF7FEFF 		bl	rt_assert_handler
  56              	.LVL4:
  57              	.L2:
 205:rt_thread/src/ipc.c ****     RT_ASSERT(value < 0x10000U);
  58              		.loc 1 205 0 is_stmt 1
  59 0016 B5F5803F 		cmp	r5, #65536
  60 001a 04D3     		bcc	.L3
  61              		.loc 1 205 0 is_stmt 0 discriminator 1
  62 001c CD22     		movs	r2, #205
  63 001e 0849     		ldr	r1, .L5
  64 0020 0948     		ldr	r0, .L5+8
  65 0022 FFF7FEFF 		bl	rt_assert_handler
  66              	.LVL5:
  67              	.L3:
 206:rt_thread/src/ipc.c **** 
 207:rt_thread/src/ipc.c ****     /* initialize object */
 208:rt_thread/src/ipc.c ****     rt_object_init(&(sem->parent.parent), RT_Object_Class_Semaphore, name);
  68              		.loc 1 208 0 is_stmt 1
  69 0026 3A46     		mov	r2, r7
  70 0028 0221     		movs	r1, #2
  71 002a 2046     		mov	r0, r4
  72 002c FFF7FEFF 		bl	rt_object_init
  73              	.LVL6:
  74              	.LBB106:
  75              	.LBB107:
  64:rt_thread/src/ipc.c **** 
  76              		.loc 1 64 0
  77 0030 04F11403 		add	r3, r4, #20
ARM GAS  /tmp/ccObKSes.s 			page 6


  78              	.LVL7:
  79              	.LBB108:
  80              	.LBB109:
  81              		.file 2 "rt_thread/include/rtservice.h"
   1:rt_thread/include/rtservice.h **** /*
   2:rt_thread/include/rtservice.h ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt_thread/include/rtservice.h ****  *
   4:rt_thread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:rt_thread/include/rtservice.h ****  *
   6:rt_thread/include/rtservice.h ****  * Change Logs:
   7:rt_thread/include/rtservice.h ****  * Date           Author       Notes
   8:rt_thread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:rt_thread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:rt_thread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:rt_thread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:rt_thread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:rt_thread/include/rtservice.h ****  *                             Make code cleanup.
  14:rt_thread/include/rtservice.h ****  */
  15:rt_thread/include/rtservice.h **** 
  16:rt_thread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:rt_thread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:rt_thread/include/rtservice.h **** 
  19:rt_thread/include/rtservice.h **** #ifdef __cplusplus
  20:rt_thread/include/rtservice.h **** extern "C" {
  21:rt_thread/include/rtservice.h **** #endif
  22:rt_thread/include/rtservice.h **** 
  23:rt_thread/include/rtservice.h **** /**
  24:rt_thread/include/rtservice.h ****  * @addtogroup KernelService
  25:rt_thread/include/rtservice.h ****  */
  26:rt_thread/include/rtservice.h **** 
  27:rt_thread/include/rtservice.h **** /**@{*/
  28:rt_thread/include/rtservice.h **** 
  29:rt_thread/include/rtservice.h **** /**
  30:rt_thread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:rt_thread/include/rtservice.h ****  * struct type.
  32:rt_thread/include/rtservice.h ****  */
  33:rt_thread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:rt_thread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:rt_thread/include/rtservice.h **** 
  36:rt_thread/include/rtservice.h **** 
  37:rt_thread/include/rtservice.h **** /**
  38:rt_thread/include/rtservice.h ****  * @brief initialize a list object
  39:rt_thread/include/rtservice.h ****  */
  40:rt_thread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:rt_thread/include/rtservice.h **** 
  42:rt_thread/include/rtservice.h **** /**
  43:rt_thread/include/rtservice.h ****  * @brief initialize a list
  44:rt_thread/include/rtservice.h ****  *
  45:rt_thread/include/rtservice.h ****  * @param l list to be initialized
  46:rt_thread/include/rtservice.h ****  */
  47:rt_thread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:rt_thread/include/rtservice.h **** {
  49:rt_thread/include/rtservice.h ****     l->next = l->prev = l;
  82              		.loc 2 49 0
  83 0034 A361     		str	r3, [r4, #24]
  84 0036 6361     		str	r3, [r4, #20]
  85              	.LVL8:
ARM GAS  /tmp/ccObKSes.s 			page 7


  86              	.LBE109:
  87              	.LBE108:
  88              	.LBE107:
  89              	.LBE106:
 209:rt_thread/src/ipc.c **** 
 210:rt_thread/src/ipc.c ****     /* initialize ipc object */
 211:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(sem->parent));
 212:rt_thread/src/ipc.c **** 
 213:rt_thread/src/ipc.c ****     /* set initial value */
 214:rt_thread/src/ipc.c ****     sem->value = (rt_uint16_t)value;
  90              		.loc 1 214 0
  91 0038 A583     		strh	r5, [r4, #28]	@ movhi
 215:rt_thread/src/ipc.c **** 
 216:rt_thread/src/ipc.c ****     /* set parent */
 217:rt_thread/src/ipc.c ****     sem->parent.parent.flag = flag;
  92              		.loc 1 217 0
  93 003a 6672     		strb	r6, [r4, #9]
 218:rt_thread/src/ipc.c **** 
 219:rt_thread/src/ipc.c ****     return RT_EOK;
 220:rt_thread/src/ipc.c **** }
  94              		.loc 1 220 0
  95 003c 0020     		movs	r0, #0
  96 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  97              	.LVL9:
  98              	.L6:
  99              		.align	2
 100              	.L5:
 101 0040 00000000 		.word	.LANCHOR0
 102 0044 00000000 		.word	.LC0
 103 0048 10000000 		.word	.LC1
 104              		.cfi_endproc
 105              	.LFE19:
 107              		.section	.text.rt_sem_detach,"ax",%progbits
 108              		.align	2
 109              		.global	rt_sem_detach
 110              		.thumb
 111              		.thumb_func
 113              	rt_sem_detach:
 114              	.LFB20:
 221:rt_thread/src/ipc.c **** RTM_EXPORT(rt_sem_init);
 222:rt_thread/src/ipc.c **** 
 223:rt_thread/src/ipc.c **** /**
 224:rt_thread/src/ipc.c ****  * This function will detach a semaphore from resource management
 225:rt_thread/src/ipc.c ****  *
 226:rt_thread/src/ipc.c ****  * @param sem the semaphore object
 227:rt_thread/src/ipc.c ****  *
 228:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 229:rt_thread/src/ipc.c ****  *
 230:rt_thread/src/ipc.c ****  * @see rt_sem_delete
 231:rt_thread/src/ipc.c ****  */
 232:rt_thread/src/ipc.c **** rt_err_t rt_sem_detach(rt_sem_t sem)
 233:rt_thread/src/ipc.c **** {
 115              		.loc 1 233 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              	.LVL10:
ARM GAS  /tmp/ccObKSes.s 			page 8


 120 0000 70B5     		push	{r4, r5, r6, lr}
 121              	.LCFI1:
 122              		.cfi_def_cfa_offset 16
 123              		.cfi_offset 4, -16
 124              		.cfi_offset 5, -12
 125              		.cfi_offset 6, -8
 126              		.cfi_offset 14, -4
 234:rt_thread/src/ipc.c ****     /* parameter check */
 235:rt_thread/src/ipc.c ****     RT_ASSERT(sem != RT_NULL);
 127              		.loc 1 235 0
 128 0002 0646     		mov	r6, r0
 129 0004 20B9     		cbnz	r0, .L8
 130              		.loc 1 235 0 is_stmt 0 discriminator 1
 131 0006 EB22     		movs	r2, #235
 132 0008 1749     		ldr	r1, .L14
 133 000a 1848     		ldr	r0, .L14+4
 134              	.LVL11:
 135 000c FFF7FEFF 		bl	rt_assert_handler
 136              	.LVL12:
 137              	.L8:
 236:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
 138              		.loc 1 236 0 is_stmt 1
 139 0010 3046     		mov	r0, r6
 140 0012 FFF7FEFF 		bl	rt_object_get_type
 141              	.LVL13:
 142 0016 0228     		cmp	r0, #2
 143 0018 04D0     		beq	.L9
 144              		.loc 1 236 0 is_stmt 0 discriminator 1
 145 001a EC22     		movs	r2, #236
 146 001c 1249     		ldr	r1, .L14
 147 001e 1448     		ldr	r0, .L14+8
 148 0020 FFF7FEFF 		bl	rt_assert_handler
 149              	.LVL14:
 150              	.L9:
 237:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&sem->parent.parent));
 151              		.loc 1 237 0 is_stmt 1
 152 0024 3046     		mov	r0, r6
 153 0026 FFF7FEFF 		bl	rt_object_is_systemobject
 154              	.LVL15:
 155 002a 20B9     		cbnz	r0, .L10
 156              		.loc 1 237 0 is_stmt 0 discriminator 1
 157 002c ED22     		movs	r2, #237
 158 002e 0E49     		ldr	r1, .L14
 159 0030 1048     		ldr	r0, .L14+12
 160 0032 FFF7FEFF 		bl	rt_assert_handler
 161              	.LVL16:
 162              	.L10:
 238:rt_thread/src/ipc.c **** 
 239:rt_thread/src/ipc.c ****     /* wakeup all suspended threads */
 240:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(sem->parent.suspend_thread));
 163              		.loc 1 240 0 is_stmt 1
 164 0036 06F11404 		add	r4, r6, #20
 165              	.LVL17:
 166 003a 0CE0     		b	.L11
 167              	.L12:
 168              	.LBB114:
 169              	.LBB115:
ARM GAS  /tmp/ccObKSes.s 			page 9


 166:rt_thread/src/ipc.c **** 
 170              		.loc 1 166 0
 171 003c FFF7FEFF 		bl	rt_hw_interrupt_disable
 172              	.LVL18:
 173 0040 0546     		mov	r5, r0
 174              	.LVL19:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 175              		.loc 1 169 0
 176 0042 2068     		ldr	r0, [r4]
 177              	.LVL20:
 171:rt_thread/src/ipc.c **** 
 178              		.loc 1 171 0
 179 0044 4FF0FF33 		mov	r3, #-1
 180 0048 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 181              		.loc 1 178 0
 182 004a 1438     		subs	r0, r0, #20
 183              	.LVL21:
 184 004c FFF7FEFF 		bl	rt_thread_resume
 185              	.LVL22:
 181:rt_thread/src/ipc.c ****     }
 186              		.loc 1 181 0
 187 0050 2846     		mov	r0, r5
 188 0052 FFF7FEFF 		bl	rt_hw_interrupt_enable
 189              	.LVL23:
 190              	.L11:
 191              	.LBB116:
 192              	.LBB117:
  50:rt_thread/include/rtservice.h **** }
  51:rt_thread/include/rtservice.h **** 
  52:rt_thread/include/rtservice.h **** /**
  53:rt_thread/include/rtservice.h ****  * @brief insert a node after a list
  54:rt_thread/include/rtservice.h ****  *
  55:rt_thread/include/rtservice.h ****  * @param l list to insert it
  56:rt_thread/include/rtservice.h ****  * @param n new node to be inserted
  57:rt_thread/include/rtservice.h ****  */
  58:rt_thread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  59:rt_thread/include/rtservice.h **** {
  60:rt_thread/include/rtservice.h ****     l->next->prev = n;
  61:rt_thread/include/rtservice.h ****     n->next = l->next;
  62:rt_thread/include/rtservice.h **** 
  63:rt_thread/include/rtservice.h ****     l->next = n;
  64:rt_thread/include/rtservice.h ****     n->prev = l;
  65:rt_thread/include/rtservice.h **** }
  66:rt_thread/include/rtservice.h **** 
  67:rt_thread/include/rtservice.h **** /**
  68:rt_thread/include/rtservice.h ****  * @brief insert a node before a list
  69:rt_thread/include/rtservice.h ****  *
  70:rt_thread/include/rtservice.h ****  * @param n new node to be inserted
  71:rt_thread/include/rtservice.h ****  * @param l list to insert it
  72:rt_thread/include/rtservice.h ****  */
  73:rt_thread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:rt_thread/include/rtservice.h **** {
  75:rt_thread/include/rtservice.h ****     l->prev->next = n;
  76:rt_thread/include/rtservice.h ****     n->prev = l->prev;
  77:rt_thread/include/rtservice.h **** 
  78:rt_thread/include/rtservice.h ****     l->prev = n;
ARM GAS  /tmp/ccObKSes.s 			page 10


  79:rt_thread/include/rtservice.h ****     n->next = l;
  80:rt_thread/include/rtservice.h **** }
  81:rt_thread/include/rtservice.h **** 
  82:rt_thread/include/rtservice.h **** /**
  83:rt_thread/include/rtservice.h ****  * @brief remove node from list.
  84:rt_thread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:rt_thread/include/rtservice.h ****  */
  86:rt_thread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  87:rt_thread/include/rtservice.h **** {
  88:rt_thread/include/rtservice.h ****     n->next->prev = n->prev;
  89:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
  90:rt_thread/include/rtservice.h **** 
  91:rt_thread/include/rtservice.h ****     n->next = n->prev = n;
  92:rt_thread/include/rtservice.h **** }
  93:rt_thread/include/rtservice.h **** 
  94:rt_thread/include/rtservice.h **** /**
  95:rt_thread/include/rtservice.h ****  * @brief tests whether a list is empty
  96:rt_thread/include/rtservice.h ****  * @param l the list to test.
  97:rt_thread/include/rtservice.h ****  */
  98:rt_thread/include/rtservice.h **** rt_inline int rt_list_isempty(const rt_list_t *l)
  99:rt_thread/include/rtservice.h **** {
 100:rt_thread/include/rtservice.h ****     return l->next == l;
 193              		.loc 2 100 0
 194 0056 2368     		ldr	r3, [r4]
 195              	.LVL24:
 196              	.LBE117:
 197              	.LBE116:
 163:rt_thread/src/ipc.c ****     {
 198              		.loc 1 163 0
 199 0058 9C42     		cmp	r4, r3
 200 005a EFD1     		bne	.L12
 201              	.LVL25:
 202              	.LBE115:
 203              	.LBE114:
 241:rt_thread/src/ipc.c **** 
 242:rt_thread/src/ipc.c ****     /* detach semaphore object */
 243:rt_thread/src/ipc.c ****     rt_object_detach(&(sem->parent.parent));
 204              		.loc 1 243 0
 205 005c 3046     		mov	r0, r6
 206 005e FFF7FEFF 		bl	rt_object_detach
 207              	.LVL26:
 244:rt_thread/src/ipc.c **** 
 245:rt_thread/src/ipc.c ****     return RT_EOK;
 246:rt_thread/src/ipc.c **** }
 208              		.loc 1 246 0
 209 0062 0020     		movs	r0, #0
 210 0064 70BD     		pop	{r4, r5, r6, pc}
 211              	.LVL27:
 212              	.L15:
 213 0066 00BF     		.align	2
 214              	.L14:
 215 0068 00000000 		.word	.LANCHOR1
 216 006c 00000000 		.word	.LC0
 217 0070 24000000 		.word	.LC2
 218 0074 6C000000 		.word	.LC3
 219              		.cfi_endproc
 220              	.LFE20:
ARM GAS  /tmp/ccObKSes.s 			page 11


 222              		.section	.text.rt_sem_create,"ax",%progbits
 223              		.align	2
 224              		.global	rt_sem_create
 225              		.thumb
 226              		.thumb_func
 228              	rt_sem_create:
 229              	.LFB21:
 247:rt_thread/src/ipc.c **** RTM_EXPORT(rt_sem_detach);
 248:rt_thread/src/ipc.c **** 
 249:rt_thread/src/ipc.c **** #ifdef RT_USING_HEAP
 250:rt_thread/src/ipc.c **** /**
 251:rt_thread/src/ipc.c ****  * This function will create a semaphore from system resource
 252:rt_thread/src/ipc.c ****  *
 253:rt_thread/src/ipc.c ****  * @param name the name of semaphore
 254:rt_thread/src/ipc.c ****  * @param value the initial value of semaphore
 255:rt_thread/src/ipc.c ****  * @param flag the flag of semaphore
 256:rt_thread/src/ipc.c ****  *
 257:rt_thread/src/ipc.c ****  * @return the created semaphore, RT_NULL on error happen
 258:rt_thread/src/ipc.c ****  *
 259:rt_thread/src/ipc.c ****  * @see rt_sem_init
 260:rt_thread/src/ipc.c ****  */
 261:rt_thread/src/ipc.c **** rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
 262:rt_thread/src/ipc.c **** {
 230              		.loc 1 262 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              	.LVL28:
 235 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 236              	.LCFI2:
 237              		.cfi_def_cfa_offset 24
 238              		.cfi_offset 4, -24
 239              		.cfi_offset 5, -20
 240              		.cfi_offset 6, -16
 241              		.cfi_offset 7, -12
 242              		.cfi_offset 8, -8
 243              		.cfi_offset 14, -4
 244 0004 0546     		mov	r5, r0
 245 0006 0C46     		mov	r4, r1
 246 0008 1746     		mov	r7, r2
 247              	.LBB118:
 263:rt_thread/src/ipc.c ****     rt_sem_t sem;
 264:rt_thread/src/ipc.c **** 
 265:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 248              		.loc 1 265 0
 249 000a FFF7FEFF 		bl	rt_hw_interrupt_disable
 250              	.LVL29:
 251 000e 0646     		mov	r6, r0
 252              	.LVL30:
 253 0010 FFF7FEFF 		bl	rt_interrupt_get_nest
 254              	.LVL31:
 255 0014 58B1     		cbz	r0, .L17
 256              		.loc 1 265 0 is_stmt 0 discriminator 1
 257 0016 DFF85480 		ldr	r8, .L21+8
 258 001a 4146     		mov	r1, r8
 259 001c 1148     		ldr	r0, .L21
 260 001e FFF7FEFF 		bl	rt_kprintf
ARM GAS  /tmp/ccObKSes.s 			page 12


 261              	.LVL32:
 262 0022 40F20912 		movw	r2, #265
 263 0026 4146     		mov	r1, r8
 264 0028 0F48     		ldr	r0, .L21+4
 265 002a FFF7FEFF 		bl	rt_assert_handler
 266              	.LVL33:
 267              	.L17:
 268              		.loc 1 265 0 discriminator 5
 269 002e 3046     		mov	r0, r6
 270 0030 FFF7FEFF 		bl	rt_hw_interrupt_enable
 271              	.LVL34:
 272              	.LBE118:
 266:rt_thread/src/ipc.c ****     RT_ASSERT(value < 0x10000U);
 273              		.loc 1 266 0 is_stmt 1 discriminator 5
 274 0034 B4F5803F 		cmp	r4, #65536
 275 0038 05D3     		bcc	.L18
 276              		.loc 1 266 0 is_stmt 0 discriminator 1
 277 003a 4FF48572 		mov	r2, #266
 278 003e 0B49     		ldr	r1, .L21+8
 279 0040 0B48     		ldr	r0, .L21+12
 280 0042 FFF7FEFF 		bl	rt_assert_handler
 281              	.LVL35:
 282              	.L18:
 267:rt_thread/src/ipc.c **** 
 268:rt_thread/src/ipc.c ****     /* allocate object */
 269:rt_thread/src/ipc.c ****     sem = (rt_sem_t)rt_object_allocate(RT_Object_Class_Semaphore, name);
 283              		.loc 1 269 0 is_stmt 1
 284 0046 2946     		mov	r1, r5
 285 0048 0220     		movs	r0, #2
 286 004a FFF7FEFF 		bl	rt_object_allocate
 287              	.LVL36:
 270:rt_thread/src/ipc.c ****     if (sem == RT_NULL)
 288              		.loc 1 270 0
 289 004e 0346     		mov	r3, r0
 290 0050 28B1     		cbz	r0, .L19
 291              	.LVL37:
 292              	.LBB119:
 293              	.LBB120:
  64:rt_thread/src/ipc.c **** 
 294              		.loc 1 64 0
 295 0052 00F11402 		add	r2, r0, #20
 296              	.LVL38:
 297              	.LBB121:
 298              	.LBB122:
  49:rt_thread/include/rtservice.h **** }
 299              		.loc 2 49 0
 300 0056 8261     		str	r2, [r0, #24]
 301 0058 4261     		str	r2, [r0, #20]
 302              	.LVL39:
 303              	.LBE122:
 304              	.LBE121:
 305              	.LBE120:
 306              	.LBE119:
 271:rt_thread/src/ipc.c ****         return sem;
 272:rt_thread/src/ipc.c **** 
 273:rt_thread/src/ipc.c ****     /* initialize ipc object */
 274:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(sem->parent));
ARM GAS  /tmp/ccObKSes.s 			page 13


 275:rt_thread/src/ipc.c **** 
 276:rt_thread/src/ipc.c ****     /* set initial value */
 277:rt_thread/src/ipc.c ****     sem->value = value;
 307              		.loc 1 277 0
 308 005a 8483     		strh	r4, [r0, #28]	@ movhi
 278:rt_thread/src/ipc.c **** 
 279:rt_thread/src/ipc.c ****     /* set parent */
 280:rt_thread/src/ipc.c ****     sem->parent.parent.flag = flag;
 309              		.loc 1 280 0
 310 005c 4772     		strb	r7, [r0, #9]
 311              	.L19:
 281:rt_thread/src/ipc.c **** 
 282:rt_thread/src/ipc.c ****     return sem;
 283:rt_thread/src/ipc.c **** }
 312              		.loc 1 283 0
 313 005e 1846     		mov	r0, r3
 314              	.LVL40:
 315 0060 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 316              	.LVL41:
 317              	.L22:
 318              		.align	2
 319              	.L21:
 320 0064 9C000000 		.word	.LC4
 321 0068 C4000000 		.word	.LC5
 322 006c 00000000 		.word	.LANCHOR2
 323 0070 10000000 		.word	.LC1
 324              		.cfi_endproc
 325              	.LFE21:
 327              		.section	.text.rt_sem_delete,"ax",%progbits
 328              		.align	2
 329              		.global	rt_sem_delete
 330              		.thumb
 331              		.thumb_func
 333              	rt_sem_delete:
 334              	.LFB22:
 284:rt_thread/src/ipc.c **** RTM_EXPORT(rt_sem_create);
 285:rt_thread/src/ipc.c **** 
 286:rt_thread/src/ipc.c **** /**
 287:rt_thread/src/ipc.c ****  * This function will delete a semaphore object and release the memory
 288:rt_thread/src/ipc.c ****  *
 289:rt_thread/src/ipc.c ****  * @param sem the semaphore object
 290:rt_thread/src/ipc.c ****  *
 291:rt_thread/src/ipc.c ****  * @return the error code
 292:rt_thread/src/ipc.c ****  *
 293:rt_thread/src/ipc.c ****  * @see rt_sem_detach
 294:rt_thread/src/ipc.c ****  */
 295:rt_thread/src/ipc.c **** rt_err_t rt_sem_delete(rt_sem_t sem)
 296:rt_thread/src/ipc.c **** {
 335              		.loc 1 296 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              	.LVL42:
 340 0000 70B5     		push	{r4, r5, r6, lr}
 341              	.LCFI3:
 342              		.cfi_def_cfa_offset 16
 343              		.cfi_offset 4, -16
ARM GAS  /tmp/ccObKSes.s 			page 14


 344              		.cfi_offset 5, -12
 345              		.cfi_offset 6, -8
 346              		.cfi_offset 14, -4
 347 0002 0646     		mov	r6, r0
 348              	.LBB128:
 297:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 349              		.loc 1 297 0
 350 0004 FFF7FEFF 		bl	rt_hw_interrupt_disable
 351              	.LVL43:
 352 0008 0446     		mov	r4, r0
 353              	.LVL44:
 354 000a FFF7FEFF 		bl	rt_interrupt_get_nest
 355              	.LVL45:
 356 000e 50B1     		cbz	r0, .L24
 357              		.loc 1 297 0 is_stmt 0 discriminator 1
 358 0010 204D     		ldr	r5, .L31
 359 0012 2946     		mov	r1, r5
 360 0014 2048     		ldr	r0, .L31+4
 361 0016 FFF7FEFF 		bl	rt_kprintf
 362              	.LVL46:
 363 001a 40F22912 		movw	r2, #297
 364 001e 2946     		mov	r1, r5
 365 0020 1E48     		ldr	r0, .L31+8
 366 0022 FFF7FEFF 		bl	rt_assert_handler
 367              	.LVL47:
 368              	.L24:
 369              		.loc 1 297 0 discriminator 5
 370 0026 2046     		mov	r0, r4
 371 0028 FFF7FEFF 		bl	rt_hw_interrupt_enable
 372              	.LVL48:
 373              	.LBE128:
 298:rt_thread/src/ipc.c **** 
 299:rt_thread/src/ipc.c ****     /* parameter check */
 300:rt_thread/src/ipc.c ****     RT_ASSERT(sem != RT_NULL);
 374              		.loc 1 300 0 is_stmt 1 discriminator 5
 375 002c 2EB9     		cbnz	r6, .L25
 376              		.loc 1 300 0 is_stmt 0 discriminator 1
 377 002e 4FF49672 		mov	r2, #300
 378 0032 1849     		ldr	r1, .L31
 379 0034 1A48     		ldr	r0, .L31+12
 380 0036 FFF7FEFF 		bl	rt_assert_handler
 381              	.LVL49:
 382              	.L25:
 301:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
 383              		.loc 1 301 0 is_stmt 1
 384 003a 3046     		mov	r0, r6
 385 003c FFF7FEFF 		bl	rt_object_get_type
 386              	.LVL50:
 387 0040 0228     		cmp	r0, #2
 388 0042 05D0     		beq	.L26
 389              		.loc 1 301 0 is_stmt 0 discriminator 1
 390 0044 40F22D12 		movw	r2, #301
 391 0048 1249     		ldr	r1, .L31
 392 004a 1648     		ldr	r0, .L31+16
 393 004c FFF7FEFF 		bl	rt_assert_handler
 394              	.LVL51:
 395              	.L26:
ARM GAS  /tmp/ccObKSes.s 			page 15


 302:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&sem->parent.parent) == RT_FALSE);
 396              		.loc 1 302 0 is_stmt 1
 397 0050 3046     		mov	r0, r6
 398 0052 FFF7FEFF 		bl	rt_object_is_systemobject
 399              	.LVL52:
 400 0056 28B1     		cbz	r0, .L27
 401              		.loc 1 302 0 is_stmt 0 discriminator 1
 402 0058 4FF49772 		mov	r2, #302
 403 005c 0D49     		ldr	r1, .L31
 404 005e 1248     		ldr	r0, .L31+20
 405 0060 FFF7FEFF 		bl	rt_assert_handler
 406              	.LVL53:
 407              	.L27:
 303:rt_thread/src/ipc.c **** 
 304:rt_thread/src/ipc.c ****     /* wakeup all suspended threads */
 305:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(sem->parent.suspend_thread));
 408              		.loc 1 305 0 is_stmt 1
 409 0064 06F11404 		add	r4, r6, #20
 410              	.LVL54:
 411 0068 0CE0     		b	.L28
 412              	.L29:
 413              	.LBB129:
 414              	.LBB130:
 166:rt_thread/src/ipc.c **** 
 415              		.loc 1 166 0
 416 006a FFF7FEFF 		bl	rt_hw_interrupt_disable
 417              	.LVL55:
 418 006e 0546     		mov	r5, r0
 419              	.LVL56:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 420              		.loc 1 169 0
 421 0070 2068     		ldr	r0, [r4]
 422              	.LVL57:
 171:rt_thread/src/ipc.c **** 
 423              		.loc 1 171 0
 424 0072 4FF0FF33 		mov	r3, #-1
 425 0076 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 426              		.loc 1 178 0
 427 0078 1438     		subs	r0, r0, #20
 428              	.LVL58:
 429 007a FFF7FEFF 		bl	rt_thread_resume
 430              	.LVL59:
 181:rt_thread/src/ipc.c ****     }
 431              		.loc 1 181 0
 432 007e 2846     		mov	r0, r5
 433 0080 FFF7FEFF 		bl	rt_hw_interrupt_enable
 434              	.LVL60:
 435              	.L28:
 436              	.LBB131:
 437              	.LBB132:
 438              		.loc 2 100 0
 439 0084 2368     		ldr	r3, [r4]
 440              	.LVL61:
 441              	.LBE132:
 442              	.LBE131:
 163:rt_thread/src/ipc.c ****     {
ARM GAS  /tmp/ccObKSes.s 			page 16


 443              		.loc 1 163 0
 444 0086 9C42     		cmp	r4, r3
 445 0088 EFD1     		bne	.L29
 446              	.LVL62:
 447              	.LBE130:
 448              	.LBE129:
 306:rt_thread/src/ipc.c **** 
 307:rt_thread/src/ipc.c ****     /* delete semaphore object */
 308:rt_thread/src/ipc.c ****     rt_object_delete(&(sem->parent.parent));
 449              		.loc 1 308 0
 450 008a 3046     		mov	r0, r6
 451 008c FFF7FEFF 		bl	rt_object_delete
 452              	.LVL63:
 309:rt_thread/src/ipc.c **** 
 310:rt_thread/src/ipc.c ****     return RT_EOK;
 311:rt_thread/src/ipc.c **** }
 453              		.loc 1 311 0
 454 0090 0020     		movs	r0, #0
 455 0092 70BD     		pop	{r4, r5, r6, pc}
 456              	.LVL64:
 457              	.L32:
 458              		.align	2
 459              	.L31:
 460 0094 00000000 		.word	.LANCHOR3
 461 0098 9C000000 		.word	.LC4
 462 009c C4000000 		.word	.LC5
 463 00a0 00000000 		.word	.LC0
 464 00a4 24000000 		.word	.LC2
 465 00a8 C8000000 		.word	.LC6
 466              		.cfi_endproc
 467              	.LFE22:
 469              		.section	.text.rt_sem_take,"ax",%progbits
 470              		.align	2
 471              		.global	rt_sem_take
 472              		.thumb
 473              		.thumb_func
 475              	rt_sem_take:
 476              	.LFB23:
 312:rt_thread/src/ipc.c **** RTM_EXPORT(rt_sem_delete);
 313:rt_thread/src/ipc.c **** #endif
 314:rt_thread/src/ipc.c **** 
 315:rt_thread/src/ipc.c **** /**
 316:rt_thread/src/ipc.c ****  * This function will take a semaphore, if the semaphore is unavailable, the
 317:rt_thread/src/ipc.c ****  * thread shall wait for a specified time.
 318:rt_thread/src/ipc.c ****  *
 319:rt_thread/src/ipc.c ****  * @param sem the semaphore object
 320:rt_thread/src/ipc.c ****  * @param time the waiting time
 321:rt_thread/src/ipc.c ****  *
 322:rt_thread/src/ipc.c ****  * @return the error code
 323:rt_thread/src/ipc.c ****  */
 324:rt_thread/src/ipc.c **** rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
 325:rt_thread/src/ipc.c **** {
 477              		.loc 1 325 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 8
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL65:
ARM GAS  /tmp/ccObKSes.s 			page 17


 482 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 483              	.LCFI4:
 484              		.cfi_def_cfa_offset 24
 485              		.cfi_offset 4, -24
 486              		.cfi_offset 5, -20
 487              		.cfi_offset 6, -16
 488              		.cfi_offset 7, -12
 489              		.cfi_offset 8, -8
 490              		.cfi_offset 14, -4
 491 0004 82B0     		sub	sp, sp, #8
 492              	.LCFI5:
 493              		.cfi_def_cfa_offset 32
 494 0006 0191     		str	r1, [sp, #4]
 326:rt_thread/src/ipc.c ****     register rt_base_t temp;
 327:rt_thread/src/ipc.c ****     struct rt_thread *thread;
 328:rt_thread/src/ipc.c **** 
 329:rt_thread/src/ipc.c ****     /* parameter check */
 330:rt_thread/src/ipc.c ****     RT_ASSERT(sem != RT_NULL);
 495              		.loc 1 330 0
 496 0008 0446     		mov	r4, r0
 497 000a 28B9     		cbnz	r0, .L34
 498              		.loc 1 330 0 is_stmt 0 discriminator 1
 499 000c 4FF4A572 		mov	r2, #330
 500 0010 5249     		ldr	r1, .L53
 501              	.LVL66:
 502 0012 5348     		ldr	r0, .L53+4
 503              	.LVL67:
 504 0014 FFF7FEFF 		bl	rt_assert_handler
 505              	.LVL68:
 506              	.L34:
 331:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
 507              		.loc 1 331 0 is_stmt 1
 508 0018 2046     		mov	r0, r4
 509 001a FFF7FEFF 		bl	rt_object_get_type
 510              	.LVL69:
 511 001e 0228     		cmp	r0, #2
 512 0020 05D0     		beq	.L35
 513              		.loc 1 331 0 is_stmt 0 discriminator 1
 514 0022 40F24B12 		movw	r2, #331
 515 0026 4D49     		ldr	r1, .L53
 516 0028 4E48     		ldr	r0, .L53+8
 517 002a FFF7FEFF 		bl	rt_assert_handler
 518              	.LVL70:
 519              	.L35:
 332:rt_thread/src/ipc.c **** 
 333:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(sem->parent.parent)));
 520              		.loc 1 333 0 is_stmt 1
 521 002e 4E4B     		ldr	r3, .L53+12
 522 0030 1B68     		ldr	r3, [r3]
 523 0032 0BB1     		cbz	r3, .L36
 524              		.loc 1 333 0 is_stmt 0 discriminator 1
 525 0034 2046     		mov	r0, r4
 526 0036 9847     		blx	r3
 527              	.LVL71:
 528              	.L36:
 334:rt_thread/src/ipc.c **** 
 335:rt_thread/src/ipc.c ****     /* disable interrupt */
ARM GAS  /tmp/ccObKSes.s 			page 18


 336:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 529              		.loc 1 336 0 is_stmt 1
 530 0038 FFF7FEFF 		bl	rt_hw_interrupt_disable
 531              	.LVL72:
 532 003c 0746     		mov	r7, r0
 533              	.LVL73:
 337:rt_thread/src/ipc.c **** 
 338:rt_thread/src/ipc.c ****     RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s take sem:%s, which value is: %d\n",
 339:rt_thread/src/ipc.c ****                                 rt_thread_self()->name,
 340:rt_thread/src/ipc.c ****                                 ((struct rt_object *)sem)->name,
 341:rt_thread/src/ipc.c ****                                 sem->value));
 342:rt_thread/src/ipc.c **** 
 343:rt_thread/src/ipc.c ****     if (sem->value > 0)
 534              		.loc 1 343 0
 535 003e A38B     		ldrh	r3, [r4, #28]
 536 0040 23B1     		cbz	r3, .L37
 344:rt_thread/src/ipc.c ****     {
 345:rt_thread/src/ipc.c ****         /* semaphore is available */
 346:rt_thread/src/ipc.c ****         sem->value --;
 537              		.loc 1 346 0
 538 0042 013B     		subs	r3, r3, #1
 539 0044 A383     		strh	r3, [r4, #28]	@ movhi
 347:rt_thread/src/ipc.c **** 
 348:rt_thread/src/ipc.c ****         /* enable interrupt */
 349:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 540              		.loc 1 349 0
 541 0046 FFF7FEFF 		bl	rt_hw_interrupt_enable
 542              	.LVL74:
 543 004a 7CE0     		b	.L38
 544              	.LVL75:
 545              	.L37:
 350:rt_thread/src/ipc.c ****     }
 351:rt_thread/src/ipc.c ****     else
 352:rt_thread/src/ipc.c ****     {
 353:rt_thread/src/ipc.c ****         /* no waiting, return with timeout */
 354:rt_thread/src/ipc.c ****         if (time == 0)
 546              		.loc 1 354 0
 547 004c 019B     		ldr	r3, [sp, #4]
 548 004e 23B9     		cbnz	r3, .L39
 355:rt_thread/src/ipc.c ****         {
 356:rt_thread/src/ipc.c ****             rt_hw_interrupt_enable(temp);
 549              		.loc 1 356 0
 550 0050 FFF7FEFF 		bl	rt_hw_interrupt_enable
 551              	.LVL76:
 357:rt_thread/src/ipc.c **** 
 358:rt_thread/src/ipc.c ****             return -RT_ETIMEOUT;
 552              		.loc 1 358 0
 553 0054 6FF00100 		mvn	r0, #1
 554 0058 7DE0     		b	.L40
 555              	.LVL77:
 556              	.L39:
 557              	.LBB144:
 359:rt_thread/src/ipc.c ****         }
 360:rt_thread/src/ipc.c ****         else
 361:rt_thread/src/ipc.c ****         {
 362:rt_thread/src/ipc.c ****             /* current context checking */
 363:rt_thread/src/ipc.c ****             RT_DEBUG_IN_THREAD_CONTEXT;
ARM GAS  /tmp/ccObKSes.s 			page 19


 558              		.loc 1 363 0
 559 005a FFF7FEFF 		bl	rt_hw_interrupt_disable
 560              	.LVL78:
 561 005e 0546     		mov	r5, r0
 562              	.LVL79:
 563 0060 FFF7FEFF 		bl	rt_thread_self
 564              	.LVL80:
 565 0064 50B9     		cbnz	r0, .L41
 566              		.loc 1 363 0 is_stmt 0 discriminator 1
 567 0066 3D4E     		ldr	r6, .L53
 568 0068 3146     		mov	r1, r6
 569 006a 4048     		ldr	r0, .L53+16
 570 006c FFF7FEFF 		bl	rt_kprintf
 571              	.LVL81:
 572 0070 40F26B12 		movw	r2, #363
 573 0074 3146     		mov	r1, r6
 574 0076 3E48     		ldr	r0, .L53+20
 575 0078 FFF7FEFF 		bl	rt_assert_handler
 576              	.LVL82:
 577              	.L41:
 578              	.LBB145:
 579              		.loc 1 363 0 discriminator 5
 580 007c FFF7FEFF 		bl	rt_hw_interrupt_disable
 581              	.LVL83:
 582 0080 0646     		mov	r6, r0
 583              	.LVL84:
 584 0082 FFF7FEFF 		bl	rt_interrupt_get_nest
 585              	.LVL85:
 586 0086 58B1     		cbz	r0, .L42
 587              		.loc 1 363 0 discriminator 6
 588 0088 DFF8D080 		ldr	r8, .L53
 589 008c 4146     		mov	r1, r8
 590 008e 3948     		ldr	r0, .L53+24
 591 0090 FFF7FEFF 		bl	rt_kprintf
 592              	.LVL86:
 593 0094 40F26B12 		movw	r2, #363
 594 0098 4146     		mov	r1, r8
 595 009a 3548     		ldr	r0, .L53+20
 596 009c FFF7FEFF 		bl	rt_assert_handler
 597              	.LVL87:
 598              	.L42:
 599              		.loc 1 363 0 discriminator 10
 600 00a0 3046     		mov	r0, r6
 601 00a2 FFF7FEFF 		bl	rt_hw_interrupt_enable
 602              	.LVL88:
 603              	.LBE145:
 604 00a6 2846     		mov	r0, r5
 605 00a8 FFF7FEFF 		bl	rt_hw_interrupt_enable
 606              	.LVL89:
 607              	.LBE144:
 364:rt_thread/src/ipc.c **** 
 365:rt_thread/src/ipc.c ****             /* semaphore is unavailable, push to suspend list */
 366:rt_thread/src/ipc.c ****             /* get current thread */
 367:rt_thread/src/ipc.c ****             thread = rt_thread_self();
 608              		.loc 1 367 0 is_stmt 1 discriminator 10
 609 00ac FFF7FEFF 		bl	rt_thread_self
 610              	.LVL90:
ARM GAS  /tmp/ccObKSes.s 			page 20


 611 00b0 0546     		mov	r5, r0
 612              	.LVL91:
 368:rt_thread/src/ipc.c **** 
 369:rt_thread/src/ipc.c ****             /* reset thread error number */
 370:rt_thread/src/ipc.c ****             thread->error = RT_EOK;
 613              		.loc 1 370 0 discriminator 10
 614 00b2 0023     		movs	r3, #0
 615 00b4 0363     		str	r3, [r0, #48]
 371:rt_thread/src/ipc.c **** 
 372:rt_thread/src/ipc.c ****             RT_DEBUG_LOG(RT_DEBUG_IPC, ("sem take: suspend thread - %s\n",
 373:rt_thread/src/ipc.c ****                                         thread->name));
 374:rt_thread/src/ipc.c **** 
 375:rt_thread/src/ipc.c ****             /* suspend thread */
 376:rt_thread/src/ipc.c ****             rt_ipc_list_suspend(&(sem->parent.suspend_thread),
 616              		.loc 1 376 0 discriminator 10
 617 00b6 04F11406 		add	r6, r4, #20
 618              	.LVL92:
 619 00ba 94F80980 		ldrb	r8, [r4, #9]	@ zero_extendqisi2
 620              	.LVL93:
 621              	.LBB146:
 622              	.LBB147:
  85:rt_thread/src/ipc.c **** 
 623              		.loc 1 85 0 discriminator 10
 624 00be FFF7FEFF 		bl	rt_thread_suspend
 625              	.LVL94:
  87:rt_thread/src/ipc.c ****     {
 626              		.loc 1 87 0 discriminator 10
 627 00c2 B8F1000F 		cmp	r8, #0
 628 00c6 03D0     		beq	.L44
 629 00c8 B8F1010F 		cmp	r8, #1
 630 00cc 09D0     		beq	.L45
 631 00ce 26E0     		b	.L43
 632              	.L44:
  90:rt_thread/src/ipc.c ****         break;
 633              		.loc 1 90 0
 634 00d0 05F11403 		add	r3, r5, #20
 635              	.LVL95:
 636              	.LBB148:
 637              	.LBB149:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 638              		.loc 2 75 0
 639 00d4 7268     		ldr	r2, [r6, #4]
 640 00d6 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 641              		.loc 2 76 0
 642 00d8 7268     		ldr	r2, [r6, #4]
 643 00da AA61     		str	r2, [r5, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 644              		.loc 2 78 0
 645 00dc 7360     		str	r3, [r6, #4]
  79:rt_thread/include/rtservice.h **** }
 646              		.loc 2 79 0
 647 00de 6E61     		str	r6, [r5, #20]
 648 00e0 1DE0     		b	.L43
 649              	.LVL96:
 650              	.L45:
 651              	.LBE149:
ARM GAS  /tmp/ccObKSes.s 			page 21


 652              	.LBE148:
 653              	.LBB150:
  99:rt_thread/src/ipc.c ****             {
 654              		.loc 1 99 0
 655 00e2 6369     		ldr	r3, [r4, #20]
 656              	.LVL97:
 657 00e4 0FE0     		b	.L46
 658              	.L49:
 659              	.LVL98:
 104:rt_thread/src/ipc.c ****                 {
 660              		.loc 1 104 0
 661 00e6 95F83510 		ldrb	r1, [r5, #53]	@ zero_extendqisi2
 662 00ea 93F82120 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
 663 00ee 9142     		cmp	r1, r2
 664 00f0 08D2     		bcs	.L47
 107:rt_thread/src/ipc.c ****                     break;
 665              		.loc 1 107 0
 666 00f2 05F11402 		add	r2, r5, #20
 667              	.LVL99:
 668              	.LBB151:
 669              	.LBB152:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 670              		.loc 2 75 0
 671 00f6 5968     		ldr	r1, [r3, #4]
 672 00f8 0A60     		str	r2, [r1]
  76:rt_thread/include/rtservice.h **** 
 673              		.loc 2 76 0
 674 00fa 5968     		ldr	r1, [r3, #4]
 675 00fc A961     		str	r1, [r5, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 676              		.loc 2 78 0
 677 00fe 5A60     		str	r2, [r3, #4]
  79:rt_thread/include/rtservice.h **** }
 678              		.loc 2 79 0
 679 0100 6B61     		str	r3, [r5, #20]
 680 0102 02E0     		b	.L48
 681              	.LVL100:
 682              	.L47:
 683              	.LBE152:
 684              	.LBE151:
  99:rt_thread/src/ipc.c ****             {
 685              		.loc 1 99 0
 686 0104 1B68     		ldr	r3, [r3]
 687              	.LVL101:
 688              	.L46:
 689 0106 9E42     		cmp	r6, r3
 690 0108 EDD1     		bne	.L49
 691              	.L48:
 116:rt_thread/src/ipc.c ****                 rt_list_insert_before(list, &(thread->tlist));
 692              		.loc 1 116 0
 693 010a 9E42     		cmp	r6, r3
 694 010c 07D1     		bne	.L43
 117:rt_thread/src/ipc.c ****         }
 695              		.loc 1 117 0
 696 010e 05F11403 		add	r3, r5, #20
 697              	.LVL102:
 698              	.LBB153:
ARM GAS  /tmp/ccObKSes.s 			page 22


 699              	.LBB154:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 700              		.loc 2 75 0
 701 0112 7268     		ldr	r2, [r6, #4]
 702 0114 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 703              		.loc 2 76 0
 704 0116 7268     		ldr	r2, [r6, #4]
 705 0118 AA61     		str	r2, [r5, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 706              		.loc 2 78 0
 707 011a 7360     		str	r3, [r6, #4]
  79:rt_thread/include/rtservice.h **** }
 708              		.loc 2 79 0
 709 011c 6E61     		str	r6, [r5, #20]
 710              	.LVL103:
 711              	.L43:
 712              	.LBE154:
 713              	.LBE153:
 714              	.LBE150:
 715              	.LBE147:
 716              	.LBE146:
 377:rt_thread/src/ipc.c ****                                 thread,
 378:rt_thread/src/ipc.c ****                                 sem->parent.parent.flag);
 379:rt_thread/src/ipc.c **** 
 380:rt_thread/src/ipc.c ****             /* has waiting time, start thread timer */
 381:rt_thread/src/ipc.c ****             if (time > 0)
 717              		.loc 1 381 0
 718 011e 019B     		ldr	r3, [sp, #4]
 719 0120 002B     		cmp	r3, #0
 720 0122 09DD     		ble	.L50
 382:rt_thread/src/ipc.c ****             {
 383:rt_thread/src/ipc.c ****                 RT_DEBUG_LOG(RT_DEBUG_IPC, ("set thread:%s to timer list\n",
 384:rt_thread/src/ipc.c ****                                             thread->name));
 385:rt_thread/src/ipc.c **** 
 386:rt_thread/src/ipc.c ****                 /* reset the timeout of thread timer and start it */
 387:rt_thread/src/ipc.c ****                 rt_timer_control(&(thread->thread_timer),
 721              		.loc 1 387 0
 722 0124 05F16006 		add	r6, r5, #96
 723 0128 01AA     		add	r2, sp, #4
 724              	.LVL104:
 725 012a 0021     		movs	r1, #0
 726 012c 3046     		mov	r0, r6
 727 012e FFF7FEFF 		bl	rt_timer_control
 728              	.LVL105:
 388:rt_thread/src/ipc.c ****                                  RT_TIMER_CTRL_SET_TIME,
 389:rt_thread/src/ipc.c ****                                  &time);
 390:rt_thread/src/ipc.c ****                 rt_timer_start(&(thread->thread_timer));
 729              		.loc 1 390 0
 730 0132 3046     		mov	r0, r6
 731 0134 FFF7FEFF 		bl	rt_timer_start
 732              	.LVL106:
 733              	.L50:
 391:rt_thread/src/ipc.c ****             }
 392:rt_thread/src/ipc.c **** 
 393:rt_thread/src/ipc.c ****             /* enable interrupt */
 394:rt_thread/src/ipc.c ****             rt_hw_interrupt_enable(temp);
ARM GAS  /tmp/ccObKSes.s 			page 23


 734              		.loc 1 394 0
 735 0138 3846     		mov	r0, r7
 736 013a FFF7FEFF 		bl	rt_hw_interrupt_enable
 737              	.LVL107:
 395:rt_thread/src/ipc.c **** 
 396:rt_thread/src/ipc.c ****             /* do schedule */
 397:rt_thread/src/ipc.c ****             rt_schedule();
 738              		.loc 1 397 0
 739 013e FFF7FEFF 		bl	rt_schedule
 740              	.LVL108:
 398:rt_thread/src/ipc.c **** 
 399:rt_thread/src/ipc.c ****             if (thread->error != RT_EOK)
 741              		.loc 1 399 0
 742 0142 286B     		ldr	r0, [r5, #48]
 743 0144 38B9     		cbnz	r0, .L40
 744              	.LVL109:
 745              	.L38:
 400:rt_thread/src/ipc.c ****             {
 401:rt_thread/src/ipc.c ****                 return thread->error;
 402:rt_thread/src/ipc.c ****             }
 403:rt_thread/src/ipc.c ****         }
 404:rt_thread/src/ipc.c ****     }
 405:rt_thread/src/ipc.c **** 
 406:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));
 746              		.loc 1 406 0
 747 0146 0C4B     		ldr	r3, .L53+28
 748 0148 1B68     		ldr	r3, [r3]
 749 014a 1BB1     		cbz	r3, .L51
 750              		.loc 1 406 0 is_stmt 0 discriminator 1
 751 014c 2046     		mov	r0, r4
 752 014e 9847     		blx	r3
 753              	.LVL110:
 407:rt_thread/src/ipc.c **** 
 408:rt_thread/src/ipc.c ****     return RT_EOK;
 754              		.loc 1 408 0 is_stmt 1 discriminator 1
 755 0150 0020     		movs	r0, #0
 756 0152 00E0     		b	.L40
 757              	.L51:
 758              		.loc 1 408 0 is_stmt 0
 759 0154 0020     		movs	r0, #0
 760              	.L40:
 409:rt_thread/src/ipc.c **** }
 761              		.loc 1 409 0 is_stmt 1
 762 0156 02B0     		add	sp, sp, #8
 763              	.LCFI6:
 764              		.cfi_def_cfa_offset 24
 765              		@ sp needed
 766 0158 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 767              	.LVL111:
 768              	.L54:
 769              		.align	2
 770              	.L53:
 771 015c 00000000 		.word	.LANCHOR4
 772 0160 00000000 		.word	.LC0
 773 0164 24000000 		.word	.LC2
 774 0168 00000000 		.word	rt_object_trytake_hook
 775 016c 04010000 		.word	.LC7
ARM GAS  /tmp/ccObKSes.s 			page 24


 776 0170 C4000000 		.word	.LC5
 777 0174 9C000000 		.word	.LC4
 778 0178 00000000 		.word	rt_object_take_hook
 779              		.cfi_endproc
 780              	.LFE23:
 782              		.section	.text.rt_sem_trytake,"ax",%progbits
 783              		.align	2
 784              		.global	rt_sem_trytake
 785              		.thumb
 786              		.thumb_func
 788              	rt_sem_trytake:
 789              	.LFB24:
 410:rt_thread/src/ipc.c **** RTM_EXPORT(rt_sem_take);
 411:rt_thread/src/ipc.c **** 
 412:rt_thread/src/ipc.c **** /**
 413:rt_thread/src/ipc.c ****  * This function will try to take a semaphore and immediately return
 414:rt_thread/src/ipc.c ****  *
 415:rt_thread/src/ipc.c ****  * @param sem the semaphore object
 416:rt_thread/src/ipc.c ****  *
 417:rt_thread/src/ipc.c ****  * @return the error code
 418:rt_thread/src/ipc.c ****  */
 419:rt_thread/src/ipc.c **** rt_err_t rt_sem_trytake(rt_sem_t sem)
 420:rt_thread/src/ipc.c **** {
 790              		.loc 1 420 0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 0
 793              		@ frame_needed = 0, uses_anonymous_args = 0
 794              	.LVL112:
 795 0000 08B5     		push	{r3, lr}
 796              	.LCFI7:
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 3, -8
 799              		.cfi_offset 14, -4
 421:rt_thread/src/ipc.c ****     return rt_sem_take(sem, 0);
 800              		.loc 1 421 0
 801 0002 0021     		movs	r1, #0
 802 0004 FFF7FEFF 		bl	rt_sem_take
 803              	.LVL113:
 422:rt_thread/src/ipc.c **** }
 804              		.loc 1 422 0
 805 0008 08BD     		pop	{r3, pc}
 806              		.cfi_endproc
 807              	.LFE24:
 809 000a 00BF     		.section	.text.rt_sem_release,"ax",%progbits
 810              		.align	2
 811              		.global	rt_sem_release
 812              		.thumb
 813              		.thumb_func
 815              	rt_sem_release:
 816              	.LFB25:
 423:rt_thread/src/ipc.c **** RTM_EXPORT(rt_sem_trytake);
 424:rt_thread/src/ipc.c **** 
 425:rt_thread/src/ipc.c **** /**
 426:rt_thread/src/ipc.c ****  * This function will release a semaphore, if there are threads suspended on
 427:rt_thread/src/ipc.c ****  * semaphore, it will be waked up.
 428:rt_thread/src/ipc.c ****  *
 429:rt_thread/src/ipc.c ****  * @param sem the semaphore object
ARM GAS  /tmp/ccObKSes.s 			page 25


 430:rt_thread/src/ipc.c ****  *
 431:rt_thread/src/ipc.c ****  * @return the error code
 432:rt_thread/src/ipc.c ****  */
 433:rt_thread/src/ipc.c **** rt_err_t rt_sem_release(rt_sem_t sem)
 434:rt_thread/src/ipc.c **** {
 817              		.loc 1 434 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 821              	.LVL114:
 822 0000 38B5     		push	{r3, r4, r5, lr}
 823              	.LCFI8:
 824              		.cfi_def_cfa_offset 16
 825              		.cfi_offset 3, -16
 826              		.cfi_offset 4, -12
 827              		.cfi_offset 5, -8
 828              		.cfi_offset 14, -4
 435:rt_thread/src/ipc.c ****     register rt_base_t temp;
 436:rt_thread/src/ipc.c ****     register rt_bool_t need_schedule;
 437:rt_thread/src/ipc.c **** 
 438:rt_thread/src/ipc.c ****     /* parameter check */
 439:rt_thread/src/ipc.c ****     RT_ASSERT(sem != RT_NULL);
 829              		.loc 1 439 0
 830 0002 0446     		mov	r4, r0
 831 0004 28B9     		cbnz	r0, .L58
 832              		.loc 1 439 0 is_stmt 0 discriminator 1
 833 0006 40F2B712 		movw	r2, #439
 834 000a 1649     		ldr	r1, .L65
 835 000c 1648     		ldr	r0, .L65+4
 836              	.LVL115:
 837 000e FFF7FEFF 		bl	rt_assert_handler
 838              	.LVL116:
 839              	.L58:
 440:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
 840              		.loc 1 440 0 is_stmt 1
 841 0012 2046     		mov	r0, r4
 842 0014 FFF7FEFF 		bl	rt_object_get_type
 843              	.LVL117:
 844 0018 0228     		cmp	r0, #2
 845 001a 05D0     		beq	.L59
 846              		.loc 1 440 0 is_stmt 0 discriminator 1
 847 001c 4FF4DC72 		mov	r2, #440
 848 0020 1049     		ldr	r1, .L65
 849 0022 1248     		ldr	r0, .L65+8
 850 0024 FFF7FEFF 		bl	rt_assert_handler
 851              	.LVL118:
 852              	.L59:
 441:rt_thread/src/ipc.c **** 
 442:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(sem->parent.parent)));
 853              		.loc 1 442 0 is_stmt 1
 854 0028 114B     		ldr	r3, .L65+12
 855 002a 1B68     		ldr	r3, [r3]
 856 002c 0BB1     		cbz	r3, .L60
 857              		.loc 1 442 0 is_stmt 0 discriminator 1
 858 002e 2046     		mov	r0, r4
 859 0030 9847     		blx	r3
 860              	.LVL119:
ARM GAS  /tmp/ccObKSes.s 			page 26


 861              	.L60:
 443:rt_thread/src/ipc.c **** 
 444:rt_thread/src/ipc.c ****     need_schedule = RT_FALSE;
 445:rt_thread/src/ipc.c **** 
 446:rt_thread/src/ipc.c ****     /* disable interrupt */
 447:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 862              		.loc 1 447 0 is_stmt 1
 863 0032 FFF7FEFF 		bl	rt_hw_interrupt_disable
 864              	.LVL120:
 865 0036 0546     		mov	r5, r0
 866              	.LVL121:
 448:rt_thread/src/ipc.c **** 
 449:rt_thread/src/ipc.c ****     RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s releases sem:%s, which value is: %d\n",
 450:rt_thread/src/ipc.c ****                                 rt_thread_self()->name,
 451:rt_thread/src/ipc.c ****                                 ((struct rt_object *)sem)->name,
 452:rt_thread/src/ipc.c ****                                 sem->value));
 453:rt_thread/src/ipc.c **** 
 454:rt_thread/src/ipc.c ****     if (!rt_list_isempty(&sem->parent.suspend_thread))
 867              		.loc 1 454 0
 868 0038 04F11403 		add	r3, r4, #20
 869              	.LBB155:
 870              	.LBB156:
 871              		.loc 2 100 0
 872 003c 6069     		ldr	r0, [r4, #20]
 873              	.LVL122:
 874              	.LBE156:
 875              	.LBE155:
 876              		.loc 1 454 0
 877 003e 8342     		cmp	r3, r0
 878 0040 04D0     		beq	.L61
 879              	.LVL123:
 880              	.LBB157:
 881              	.LBB158:
 144:rt_thread/src/ipc.c **** 
 882              		.loc 1 144 0
 883 0042 1438     		subs	r0, r0, #20
 884              	.LVL124:
 885 0044 FFF7FEFF 		bl	rt_thread_resume
 886              	.LVL125:
 887              	.LBE158:
 888              	.LBE157:
 455:rt_thread/src/ipc.c ****     {
 456:rt_thread/src/ipc.c ****         /* resume the suspended thread */
 457:rt_thread/src/ipc.c ****         rt_ipc_list_resume(&(sem->parent.suspend_thread));
 458:rt_thread/src/ipc.c ****         need_schedule = RT_TRUE;
 889              		.loc 1 458 0
 890 0048 0124     		movs	r4, #1
 891              	.LVL126:
 892 004a 03E0     		b	.L62
 893              	.LVL127:
 894              	.L61:
 459:rt_thread/src/ipc.c ****     }
 460:rt_thread/src/ipc.c ****     else
 461:rt_thread/src/ipc.c ****         sem->value ++; /* increase value */
 895              		.loc 1 461 0
 896 004c A38B     		ldrh	r3, [r4, #28]
 897 004e 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccObKSes.s 			page 27


 898 0050 A383     		strh	r3, [r4, #28]	@ movhi
 444:rt_thread/src/ipc.c **** 
 899              		.loc 1 444 0
 900 0052 0024     		movs	r4, #0
 901              	.LVL128:
 902              	.L62:
 462:rt_thread/src/ipc.c **** 
 463:rt_thread/src/ipc.c ****     /* enable interrupt */
 464:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 903              		.loc 1 464 0
 904 0054 2846     		mov	r0, r5
 905 0056 FFF7FEFF 		bl	rt_hw_interrupt_enable
 906              	.LVL129:
 465:rt_thread/src/ipc.c **** 
 466:rt_thread/src/ipc.c ****     /* resume a thread, re-schedule */
 467:rt_thread/src/ipc.c ****     if (need_schedule == RT_TRUE)
 907              		.loc 1 467 0
 908 005a 0CB1     		cbz	r4, .L63
 468:rt_thread/src/ipc.c ****         rt_schedule();
 909              		.loc 1 468 0
 910 005c FFF7FEFF 		bl	rt_schedule
 911              	.LVL130:
 912              	.L63:
 469:rt_thread/src/ipc.c **** 
 470:rt_thread/src/ipc.c ****     return RT_EOK;
 471:rt_thread/src/ipc.c **** }
 913              		.loc 1 471 0
 914 0060 0020     		movs	r0, #0
 915 0062 38BD     		pop	{r3, r4, r5, pc}
 916              	.LVL131:
 917              	.L66:
 918              		.align	2
 919              	.L65:
 920 0064 00000000 		.word	.LANCHOR5
 921 0068 00000000 		.word	.LC0
 922 006c 24000000 		.word	.LC2
 923 0070 00000000 		.word	rt_object_put_hook
 924              		.cfi_endproc
 925              	.LFE25:
 927              		.section	.text.rt_sem_control,"ax",%progbits
 928              		.align	2
 929              		.global	rt_sem_control
 930              		.thumb
 931              		.thumb_func
 933              	rt_sem_control:
 934              	.LFB26:
 472:rt_thread/src/ipc.c **** RTM_EXPORT(rt_sem_release);
 473:rt_thread/src/ipc.c **** 
 474:rt_thread/src/ipc.c **** /**
 475:rt_thread/src/ipc.c ****  * This function can get or set some extra attributions of a semaphore object.
 476:rt_thread/src/ipc.c ****  *
 477:rt_thread/src/ipc.c ****  * @param sem the semaphore object
 478:rt_thread/src/ipc.c ****  * @param cmd the execution command
 479:rt_thread/src/ipc.c ****  * @param arg the execution argument
 480:rt_thread/src/ipc.c ****  *
 481:rt_thread/src/ipc.c ****  * @return the error code
 482:rt_thread/src/ipc.c ****  */
ARM GAS  /tmp/ccObKSes.s 			page 28


 483:rt_thread/src/ipc.c **** rt_err_t rt_sem_control(rt_sem_t sem, int cmd, void *arg)
 484:rt_thread/src/ipc.c **** {
 935              		.loc 1 484 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 0
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              	.LVL132:
 940 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 941              	.LCFI9:
 942              		.cfi_def_cfa_offset 24
 943              		.cfi_offset 4, -24
 944              		.cfi_offset 5, -20
 945              		.cfi_offset 6, -16
 946              		.cfi_offset 7, -12
 947              		.cfi_offset 8, -8
 948              		.cfi_offset 14, -4
 949 0004 0C46     		mov	r4, r1
 950 0006 1746     		mov	r7, r2
 485:rt_thread/src/ipc.c ****     rt_ubase_t level;
 486:rt_thread/src/ipc.c **** 
 487:rt_thread/src/ipc.c ****     /* parameter check */
 488:rt_thread/src/ipc.c ****     RT_ASSERT(sem != RT_NULL);
 951              		.loc 1 488 0
 952 0008 0646     		mov	r6, r0
 953 000a 28B9     		cbnz	r0, .L68
 954              		.loc 1 488 0 is_stmt 0 discriminator 1
 955 000c 4FF4F472 		mov	r2, #488
 956              	.LVL133:
 957 0010 1949     		ldr	r1, .L75
 958              	.LVL134:
 959 0012 1A48     		ldr	r0, .L75+4
 960              	.LVL135:
 961 0014 FFF7FEFF 		bl	rt_assert_handler
 962              	.LVL136:
 963              	.L68:
 489:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
 964              		.loc 1 489 0 is_stmt 1
 965 0018 3046     		mov	r0, r6
 966 001a FFF7FEFF 		bl	rt_object_get_type
 967              	.LVL137:
 968 001e 0228     		cmp	r0, #2
 969 0020 05D0     		beq	.L69
 970              		.loc 1 489 0 is_stmt 0 discriminator 1
 971 0022 40F2E912 		movw	r2, #489
 972 0026 1449     		ldr	r1, .L75
 973 0028 1548     		ldr	r0, .L75+8
 974 002a FFF7FEFF 		bl	rt_assert_handler
 975              	.LVL138:
 976              	.L69:
 490:rt_thread/src/ipc.c **** 
 491:rt_thread/src/ipc.c ****     if (cmd == RT_IPC_CMD_RESET)
 977              		.loc 1 491 0 is_stmt 1
 978 002e 012C     		cmp	r4, #1
 979 0030 1ED1     		bne	.L73
 980              	.LVL139:
 981              	.LBB164:
 492:rt_thread/src/ipc.c ****     {
ARM GAS  /tmp/ccObKSes.s 			page 29


 493:rt_thread/src/ipc.c ****         rt_ubase_t value;
 494:rt_thread/src/ipc.c **** 
 495:rt_thread/src/ipc.c ****         /* get value */
 496:rt_thread/src/ipc.c ****         value = (rt_ubase_t)arg;
 497:rt_thread/src/ipc.c ****         /* disable interrupt */
 498:rt_thread/src/ipc.c ****         level = rt_hw_interrupt_disable();
 982              		.loc 1 498 0
 983 0032 FFF7FEFF 		bl	rt_hw_interrupt_disable
 984              	.LVL140:
 985 0036 8046     		mov	r8, r0
 986              	.LVL141:
 499:rt_thread/src/ipc.c **** 
 500:rt_thread/src/ipc.c ****         /* resume all waiting thread */
 501:rt_thread/src/ipc.c ****         rt_ipc_list_resume_all(&sem->parent.suspend_thread);
 987              		.loc 1 501 0
 988 0038 06F11404 		add	r4, r6, #20
 989              	.LVL142:
 990 003c 0CE0     		b	.L71
 991              	.LVL143:
 992              	.L72:
 993              	.LBB165:
 994              	.LBB166:
 166:rt_thread/src/ipc.c **** 
 995              		.loc 1 166 0
 996 003e FFF7FEFF 		bl	rt_hw_interrupt_disable
 997              	.LVL144:
 998 0042 0546     		mov	r5, r0
 999              	.LVL145:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 1000              		.loc 1 169 0
 1001 0044 2068     		ldr	r0, [r4]
 1002              	.LVL146:
 171:rt_thread/src/ipc.c **** 
 1003              		.loc 1 171 0
 1004 0046 4FF0FF33 		mov	r3, #-1
 1005 004a C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 1006              		.loc 1 178 0
 1007 004c 1438     		subs	r0, r0, #20
 1008              	.LVL147:
 1009 004e FFF7FEFF 		bl	rt_thread_resume
 1010              	.LVL148:
 181:rt_thread/src/ipc.c ****     }
 1011              		.loc 1 181 0
 1012 0052 2846     		mov	r0, r5
 1013 0054 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1014              	.LVL149:
 1015              	.L71:
 1016              	.LBB167:
 1017              	.LBB168:
 1018              		.loc 2 100 0
 1019 0058 2368     		ldr	r3, [r4]
 1020              	.LVL150:
 1021              	.LBE168:
 1022              	.LBE167:
 163:rt_thread/src/ipc.c ****     {
 1023              		.loc 1 163 0
ARM GAS  /tmp/ccObKSes.s 			page 30


 1024 005a 9C42     		cmp	r4, r3
 1025 005c EFD1     		bne	.L72
 1026              	.LVL151:
 1027              	.LBE166:
 1028              	.LBE165:
 502:rt_thread/src/ipc.c **** 
 503:rt_thread/src/ipc.c ****         /* set new value */
 504:rt_thread/src/ipc.c ****         sem->value = (rt_uint16_t)value;
 1029              		.loc 1 504 0
 1030 005e B783     		strh	r7, [r6, #28]	@ movhi
 505:rt_thread/src/ipc.c **** 
 506:rt_thread/src/ipc.c ****         /* enable interrupt */
 507:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(level);
 1031              		.loc 1 507 0
 1032 0060 4046     		mov	r0, r8
 1033 0062 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1034              	.LVL152:
 508:rt_thread/src/ipc.c **** 
 509:rt_thread/src/ipc.c ****         rt_schedule();
 1035              		.loc 1 509 0
 1036 0066 FFF7FEFF 		bl	rt_schedule
 1037              	.LVL153:
 510:rt_thread/src/ipc.c **** 
 511:rt_thread/src/ipc.c ****         return RT_EOK;
 1038              		.loc 1 511 0
 1039 006a 0020     		movs	r0, #0
 1040 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1041              	.LVL154:
 1042              	.L73:
 1043              	.LBE164:
 512:rt_thread/src/ipc.c ****     }
 513:rt_thread/src/ipc.c **** 
 514:rt_thread/src/ipc.c ****     return -RT_ERROR;
 1044              		.loc 1 514 0
 1045 0070 4FF0FF30 		mov	r0, #-1
 515:rt_thread/src/ipc.c **** }
 1046              		.loc 1 515 0
 1047 0074 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1048              	.LVL155:
 1049              	.L76:
 1050              		.align	2
 1051              	.L75:
 1052 0078 00000000 		.word	.LANCHOR6
 1053 007c 00000000 		.word	.LC0
 1054 0080 24000000 		.word	.LC2
 1055              		.cfi_endproc
 1056              	.LFE26:
 1058              		.section	.text.rt_mutex_init,"ax",%progbits
 1059              		.align	2
 1060              		.global	rt_mutex_init
 1061              		.thumb
 1062              		.thumb_func
 1064              	rt_mutex_init:
 1065              	.LFB27:
 516:rt_thread/src/ipc.c **** RTM_EXPORT(rt_sem_control);
 517:rt_thread/src/ipc.c **** #endif /* end of RT_USING_SEMAPHORE */
 518:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 31


 519:rt_thread/src/ipc.c **** #ifdef RT_USING_MUTEX
 520:rt_thread/src/ipc.c **** /**
 521:rt_thread/src/ipc.c ****  * This function will initialize a mutex and put it under control of resource
 522:rt_thread/src/ipc.c ****  * management.
 523:rt_thread/src/ipc.c ****  *
 524:rt_thread/src/ipc.c ****  * @param mutex the mutex object
 525:rt_thread/src/ipc.c ****  * @param name the name of mutex
 526:rt_thread/src/ipc.c ****  * @param flag the flag of mutex
 527:rt_thread/src/ipc.c ****  *
 528:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 529:rt_thread/src/ipc.c ****  */
 530:rt_thread/src/ipc.c **** rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
 531:rt_thread/src/ipc.c **** {
 1066              		.loc 1 531 0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 0
 1069              		@ frame_needed = 0, uses_anonymous_args = 0
 1070              	.LVL156:
 1071 0000 70B5     		push	{r4, r5, r6, lr}
 1072              	.LCFI10:
 1073              		.cfi_def_cfa_offset 16
 1074              		.cfi_offset 4, -16
 1075              		.cfi_offset 5, -12
 1076              		.cfi_offset 6, -8
 1077              		.cfi_offset 14, -4
 1078 0002 0E46     		mov	r6, r1
 1079 0004 1546     		mov	r5, r2
 532:rt_thread/src/ipc.c ****     /* parameter check */
 533:rt_thread/src/ipc.c ****     RT_ASSERT(mutex != RT_NULL);
 1080              		.loc 1 533 0
 1081 0006 0446     		mov	r4, r0
 1082 0008 28B9     		cbnz	r0, .L78
 1083              		.loc 1 533 0 is_stmt 0 discriminator 1
 1084 000a 40F21522 		movw	r2, #533
 1085              	.LVL157:
 1086 000e 0B49     		ldr	r1, .L80
 1087              	.LVL158:
 1088 0010 0B48     		ldr	r0, .L80+4
 1089              	.LVL159:
 1090 0012 FFF7FEFF 		bl	rt_assert_handler
 1091              	.LVL160:
 1092              	.L78:
 534:rt_thread/src/ipc.c **** 
 535:rt_thread/src/ipc.c ****     /* initialize object */
 536:rt_thread/src/ipc.c ****     rt_object_init(&(mutex->parent.parent), RT_Object_Class_Mutex, name);
 1093              		.loc 1 536 0 is_stmt 1
 1094 0016 3246     		mov	r2, r6
 1095 0018 0321     		movs	r1, #3
 1096 001a 2046     		mov	r0, r4
 1097 001c FFF7FEFF 		bl	rt_object_init
 1098              	.LVL161:
 1099              	.LBB169:
 1100              	.LBB170:
  64:rt_thread/src/ipc.c **** 
 1101              		.loc 1 64 0
 1102 0020 04F11403 		add	r3, r4, #20
 1103              	.LVL162:
ARM GAS  /tmp/ccObKSes.s 			page 32


 1104              	.LBB171:
 1105              	.LBB172:
  49:rt_thread/include/rtservice.h **** }
 1106              		.loc 2 49 0
 1107 0024 A361     		str	r3, [r4, #24]
 1108 0026 6361     		str	r3, [r4, #20]
 1109              	.LVL163:
 1110              	.LBE172:
 1111              	.LBE171:
 1112              	.LBE170:
 1113              	.LBE169:
 537:rt_thread/src/ipc.c **** 
 538:rt_thread/src/ipc.c ****     /* initialize ipc object */
 539:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(mutex->parent));
 540:rt_thread/src/ipc.c **** 
 541:rt_thread/src/ipc.c ****     mutex->value = 1;
 1114              		.loc 1 541 0
 1115 0028 0123     		movs	r3, #1
 1116 002a A383     		strh	r3, [r4, #28]	@ movhi
 542:rt_thread/src/ipc.c ****     mutex->owner = RT_NULL;
 1117              		.loc 1 542 0
 1118 002c 0020     		movs	r0, #0
 1119 002e 2062     		str	r0, [r4, #32]
 543:rt_thread/src/ipc.c ****     mutex->original_priority = 0xFF;
 1120              		.loc 1 543 0
 1121 0030 FF23     		movs	r3, #255
 1122 0032 A377     		strb	r3, [r4, #30]
 544:rt_thread/src/ipc.c ****     mutex->hold  = 0;
 1123              		.loc 1 544 0
 1124 0034 E077     		strb	r0, [r4, #31]
 545:rt_thread/src/ipc.c **** 
 546:rt_thread/src/ipc.c ****     /* set flag */
 547:rt_thread/src/ipc.c ****     mutex->parent.parent.flag = flag;
 1125              		.loc 1 547 0
 1126 0036 6572     		strb	r5, [r4, #9]
 548:rt_thread/src/ipc.c **** 
 549:rt_thread/src/ipc.c ****     return RT_EOK;
 550:rt_thread/src/ipc.c **** }
 1127              		.loc 1 550 0
 1128 0038 70BD     		pop	{r4, r5, r6, pc}
 1129              	.LVL164:
 1130              	.L81:
 1131 003a 00BF     		.align	2
 1132              	.L80:
 1133 003c 00000000 		.word	.LANCHOR7
 1134 0040 3C010000 		.word	.LC8
 1135              		.cfi_endproc
 1136              	.LFE27:
 1138              		.section	.text.rt_mutex_detach,"ax",%progbits
 1139              		.align	2
 1140              		.global	rt_mutex_detach
 1141              		.thumb
 1142              		.thumb_func
 1144              	rt_mutex_detach:
 1145              	.LFB28:
 551:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mutex_init);
 552:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 33


 553:rt_thread/src/ipc.c **** /**
 554:rt_thread/src/ipc.c ****  * This function will detach a mutex from resource management
 555:rt_thread/src/ipc.c ****  *
 556:rt_thread/src/ipc.c ****  * @param mutex the mutex object
 557:rt_thread/src/ipc.c ****  *
 558:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 559:rt_thread/src/ipc.c ****  *
 560:rt_thread/src/ipc.c ****  * @see rt_mutex_delete
 561:rt_thread/src/ipc.c ****  */
 562:rt_thread/src/ipc.c **** rt_err_t rt_mutex_detach(rt_mutex_t mutex)
 563:rt_thread/src/ipc.c **** {
 1146              		.loc 1 563 0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 0
 1149              		@ frame_needed = 0, uses_anonymous_args = 0
 1150              	.LVL165:
 1151 0000 70B5     		push	{r4, r5, r6, lr}
 1152              	.LCFI11:
 1153              		.cfi_def_cfa_offset 16
 1154              		.cfi_offset 4, -16
 1155              		.cfi_offset 5, -12
 1156              		.cfi_offset 6, -8
 1157              		.cfi_offset 14, -4
 564:rt_thread/src/ipc.c ****     /* parameter check */
 565:rt_thread/src/ipc.c ****     RT_ASSERT(mutex != RT_NULL);
 1158              		.loc 1 565 0
 1159 0002 0646     		mov	r6, r0
 1160 0004 28B9     		cbnz	r0, .L83
 1161              		.loc 1 565 0 is_stmt 0 discriminator 1
 1162 0006 40F23522 		movw	r2, #565
 1163 000a 1849     		ldr	r1, .L89
 1164 000c 1848     		ldr	r0, .L89+4
 1165              	.LVL166:
 1166 000e FFF7FEFF 		bl	rt_assert_handler
 1167              	.LVL167:
 1168              	.L83:
 566:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
 1169              		.loc 1 566 0 is_stmt 1
 1170 0012 3046     		mov	r0, r6
 1171 0014 FFF7FEFF 		bl	rt_object_get_type
 1172              	.LVL168:
 1173 0018 0328     		cmp	r0, #3
 1174 001a 05D0     		beq	.L84
 1175              		.loc 1 566 0 is_stmt 0 discriminator 1
 1176 001c 40F23622 		movw	r2, #566
 1177 0020 1249     		ldr	r1, .L89
 1178 0022 1448     		ldr	r0, .L89+8
 1179 0024 FFF7FEFF 		bl	rt_assert_handler
 1180              	.LVL169:
 1181              	.L84:
 567:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&mutex->parent.parent));
 1182              		.loc 1 567 0 is_stmt 1
 1183 0028 3046     		mov	r0, r6
 1184 002a FFF7FEFF 		bl	rt_object_is_systemobject
 1185              	.LVL170:
 1186 002e 28B9     		cbnz	r0, .L85
 1187              		.loc 1 567 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccObKSes.s 			page 34


 1188 0030 40F23722 		movw	r2, #567
 1189 0034 0D49     		ldr	r1, .L89
 1190 0036 1048     		ldr	r0, .L89+12
 1191 0038 FFF7FEFF 		bl	rt_assert_handler
 1192              	.LVL171:
 1193              	.L85:
 568:rt_thread/src/ipc.c **** 
 569:rt_thread/src/ipc.c ****     /* wakeup all suspended threads */
 570:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(mutex->parent.suspend_thread));
 1194              		.loc 1 570 0 is_stmt 1
 1195 003c 06F11404 		add	r4, r6, #20
 1196              	.LVL172:
 1197 0040 0CE0     		b	.L86
 1198              	.L87:
 1199              	.LBB177:
 1200              	.LBB178:
 166:rt_thread/src/ipc.c **** 
 1201              		.loc 1 166 0
 1202 0042 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1203              	.LVL173:
 1204 0046 0546     		mov	r5, r0
 1205              	.LVL174:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 1206              		.loc 1 169 0
 1207 0048 2068     		ldr	r0, [r4]
 1208              	.LVL175:
 171:rt_thread/src/ipc.c **** 
 1209              		.loc 1 171 0
 1210 004a 4FF0FF33 		mov	r3, #-1
 1211 004e C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 1212              		.loc 1 178 0
 1213 0050 1438     		subs	r0, r0, #20
 1214              	.LVL176:
 1215 0052 FFF7FEFF 		bl	rt_thread_resume
 1216              	.LVL177:
 181:rt_thread/src/ipc.c ****     }
 1217              		.loc 1 181 0
 1218 0056 2846     		mov	r0, r5
 1219 0058 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1220              	.LVL178:
 1221              	.L86:
 1222              	.LBB179:
 1223              	.LBB180:
 1224              		.loc 2 100 0
 1225 005c 2368     		ldr	r3, [r4]
 1226              	.LVL179:
 1227              	.LBE180:
 1228              	.LBE179:
 163:rt_thread/src/ipc.c ****     {
 1229              		.loc 1 163 0
 1230 005e 9C42     		cmp	r4, r3
 1231 0060 EFD1     		bne	.L87
 1232              	.LVL180:
 1233              	.LBE178:
 1234              	.LBE177:
 571:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 35


 572:rt_thread/src/ipc.c ****     /* detach semaphore object */
 573:rt_thread/src/ipc.c ****     rt_object_detach(&(mutex->parent.parent));
 1235              		.loc 1 573 0
 1236 0062 3046     		mov	r0, r6
 1237 0064 FFF7FEFF 		bl	rt_object_detach
 1238              	.LVL181:
 574:rt_thread/src/ipc.c **** 
 575:rt_thread/src/ipc.c ****     return RT_EOK;
 576:rt_thread/src/ipc.c **** }
 1239              		.loc 1 576 0
 1240 0068 0020     		movs	r0, #0
 1241 006a 70BD     		pop	{r4, r5, r6, pc}
 1242              	.LVL182:
 1243              	.L90:
 1244              		.align	2
 1245              	.L89:
 1246 006c 00000000 		.word	.LANCHOR8
 1247 0070 3C010000 		.word	.LC8
 1248 0074 50010000 		.word	.LC9
 1249 0078 94010000 		.word	.LC10
 1250              		.cfi_endproc
 1251              	.LFE28:
 1253              		.section	.text.rt_mutex_create,"ax",%progbits
 1254              		.align	2
 1255              		.global	rt_mutex_create
 1256              		.thumb
 1257              		.thumb_func
 1259              	rt_mutex_create:
 1260              	.LFB29:
 577:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mutex_detach);
 578:rt_thread/src/ipc.c **** 
 579:rt_thread/src/ipc.c **** #ifdef RT_USING_HEAP
 580:rt_thread/src/ipc.c **** /**
 581:rt_thread/src/ipc.c ****  * This function will create a mutex from system resource
 582:rt_thread/src/ipc.c ****  *
 583:rt_thread/src/ipc.c ****  * @param name the name of mutex
 584:rt_thread/src/ipc.c ****  * @param flag the flag of mutex
 585:rt_thread/src/ipc.c ****  *
 586:rt_thread/src/ipc.c ****  * @return the created mutex, RT_NULL on error happen
 587:rt_thread/src/ipc.c ****  *
 588:rt_thread/src/ipc.c ****  * @see rt_mutex_init
 589:rt_thread/src/ipc.c ****  */
 590:rt_thread/src/ipc.c **** rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
 591:rt_thread/src/ipc.c **** {
 1261              		.loc 1 591 0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 0
 1264              		@ frame_needed = 0, uses_anonymous_args = 0
 1265              	.LVL183:
 1266 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1267              	.LCFI12:
 1268              		.cfi_def_cfa_offset 24
 1269              		.cfi_offset 3, -24
 1270              		.cfi_offset 4, -20
 1271              		.cfi_offset 5, -16
 1272              		.cfi_offset 6, -12
 1273              		.cfi_offset 7, -8
ARM GAS  /tmp/ccObKSes.s 			page 36


 1274              		.cfi_offset 14, -4
 1275 0002 0446     		mov	r4, r0
 1276 0004 0E46     		mov	r6, r1
 1277              	.LBB181:
 592:rt_thread/src/ipc.c ****     struct rt_mutex *mutex;
 593:rt_thread/src/ipc.c **** 
 594:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 1278              		.loc 1 594 0
 1279 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1280              	.LVL184:
 1281 000a 0546     		mov	r5, r0
 1282              	.LVL185:
 1283 000c FFF7FEFF 		bl	rt_interrupt_get_nest
 1284              	.LVL186:
 1285 0010 50B1     		cbz	r0, .L92
 1286              		.loc 1 594 0 is_stmt 0 discriminator 1
 1287 0012 114F     		ldr	r7, .L95
 1288 0014 3946     		mov	r1, r7
 1289 0016 1148     		ldr	r0, .L95+4
 1290 0018 FFF7FEFF 		bl	rt_kprintf
 1291              	.LVL187:
 1292 001c 40F25222 		movw	r2, #594
 1293 0020 3946     		mov	r1, r7
 1294 0022 0F48     		ldr	r0, .L95+8
 1295 0024 FFF7FEFF 		bl	rt_assert_handler
 1296              	.LVL188:
 1297              	.L92:
 1298              		.loc 1 594 0 discriminator 5
 1299 0028 2846     		mov	r0, r5
 1300 002a FFF7FEFF 		bl	rt_hw_interrupt_enable
 1301              	.LVL189:
 1302              	.LBE181:
 595:rt_thread/src/ipc.c **** 
 596:rt_thread/src/ipc.c ****     /* allocate object */
 597:rt_thread/src/ipc.c ****     mutex = (rt_mutex_t)rt_object_allocate(RT_Object_Class_Mutex, name);
 1303              		.loc 1 597 0 is_stmt 1 discriminator 5
 1304 002e 2146     		mov	r1, r4
 1305 0030 0320     		movs	r0, #3
 1306 0032 FFF7FEFF 		bl	rt_object_allocate
 1307              	.LVL190:
 598:rt_thread/src/ipc.c ****     if (mutex == RT_NULL)
 1308              		.loc 1 598 0 discriminator 5
 1309 0036 0346     		mov	r3, r0
 1310 0038 58B1     		cbz	r0, .L93
 1311              	.LVL191:
 1312              	.LBB182:
 1313              	.LBB183:
  64:rt_thread/src/ipc.c **** 
 1314              		.loc 1 64 0
 1315 003a 00F11402 		add	r2, r0, #20
 1316              	.LVL192:
 1317              	.LBB184:
 1318              	.LBB185:
  49:rt_thread/include/rtservice.h **** }
 1319              		.loc 2 49 0
 1320 003e 8261     		str	r2, [r0, #24]
 1321 0040 4261     		str	r2, [r0, #20]
ARM GAS  /tmp/ccObKSes.s 			page 37


 1322              	.LVL193:
 1323              	.LBE185:
 1324              	.LBE184:
 1325              	.LBE183:
 1326              	.LBE182:
 599:rt_thread/src/ipc.c ****         return mutex;
 600:rt_thread/src/ipc.c **** 
 601:rt_thread/src/ipc.c ****     /* initialize ipc object */
 602:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(mutex->parent));
 603:rt_thread/src/ipc.c **** 
 604:rt_thread/src/ipc.c ****     mutex->value              = 1;
 1327              		.loc 1 604 0
 1328 0042 0122     		movs	r2, #1
 1329 0044 8283     		strh	r2, [r0, #28]	@ movhi
 605:rt_thread/src/ipc.c ****     mutex->owner              = RT_NULL;
 1330              		.loc 1 605 0
 1331 0046 0022     		movs	r2, #0
 1332 0048 0262     		str	r2, [r0, #32]
 606:rt_thread/src/ipc.c ****     mutex->original_priority  = 0xFF;
 1333              		.loc 1 606 0
 1334 004a FF21     		movs	r1, #255
 1335 004c 8177     		strb	r1, [r0, #30]
 607:rt_thread/src/ipc.c ****     mutex->hold               = 0;
 1336              		.loc 1 607 0
 1337 004e C277     		strb	r2, [r0, #31]
 608:rt_thread/src/ipc.c **** 
 609:rt_thread/src/ipc.c ****     /* set flag */
 610:rt_thread/src/ipc.c ****     mutex->parent.parent.flag = flag;
 1338              		.loc 1 610 0
 1339 0050 4672     		strb	r6, [r0, #9]
 1340              	.L93:
 611:rt_thread/src/ipc.c **** 
 612:rt_thread/src/ipc.c ****     return mutex;
 613:rt_thread/src/ipc.c **** }
 1341              		.loc 1 613 0
 1342 0052 1846     		mov	r0, r3
 1343              	.LVL194:
 1344 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1345              	.LVL195:
 1346              	.L96:
 1347 0056 00BF     		.align	2
 1348              	.L95:
 1349 0058 00000000 		.word	.LANCHOR9
 1350 005c 9C000000 		.word	.LC4
 1351 0060 C4000000 		.word	.LC5
 1352              		.cfi_endproc
 1353              	.LFE29:
 1355              		.section	.text.rt_mutex_delete,"ax",%progbits
 1356              		.align	2
 1357              		.global	rt_mutex_delete
 1358              		.thumb
 1359              		.thumb_func
 1361              	rt_mutex_delete:
 1362              	.LFB30:
 614:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mutex_create);
 615:rt_thread/src/ipc.c **** 
 616:rt_thread/src/ipc.c **** /**
ARM GAS  /tmp/ccObKSes.s 			page 38


 617:rt_thread/src/ipc.c ****  * This function will delete a mutex object and release the memory
 618:rt_thread/src/ipc.c ****  *
 619:rt_thread/src/ipc.c ****  * @param mutex the mutex object
 620:rt_thread/src/ipc.c ****  *
 621:rt_thread/src/ipc.c ****  * @return the error code
 622:rt_thread/src/ipc.c ****  *
 623:rt_thread/src/ipc.c ****  * @see rt_mutex_detach
 624:rt_thread/src/ipc.c ****  */
 625:rt_thread/src/ipc.c **** rt_err_t rt_mutex_delete(rt_mutex_t mutex)
 626:rt_thread/src/ipc.c **** {
 1363              		.loc 1 626 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              	.LVL196:
 1368 0000 70B5     		push	{r4, r5, r6, lr}
 1369              	.LCFI13:
 1370              		.cfi_def_cfa_offset 16
 1371              		.cfi_offset 4, -16
 1372              		.cfi_offset 5, -12
 1373              		.cfi_offset 6, -8
 1374              		.cfi_offset 14, -4
 1375 0002 0646     		mov	r6, r0
 1376              	.LBB191:
 627:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 1377              		.loc 1 627 0
 1378 0004 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1379              	.LVL197:
 1380 0008 0446     		mov	r4, r0
 1381              	.LVL198:
 1382 000a FFF7FEFF 		bl	rt_interrupt_get_nest
 1383              	.LVL199:
 1384 000e 50B1     		cbz	r0, .L98
 1385              		.loc 1 627 0 is_stmt 0 discriminator 1
 1386 0010 204D     		ldr	r5, .L105
 1387 0012 2946     		mov	r1, r5
 1388 0014 2048     		ldr	r0, .L105+4
 1389 0016 FFF7FEFF 		bl	rt_kprintf
 1390              	.LVL200:
 1391 001a 40F27322 		movw	r2, #627
 1392 001e 2946     		mov	r1, r5
 1393 0020 1E48     		ldr	r0, .L105+8
 1394 0022 FFF7FEFF 		bl	rt_assert_handler
 1395              	.LVL201:
 1396              	.L98:
 1397              		.loc 1 627 0 discriminator 5
 1398 0026 2046     		mov	r0, r4
 1399 0028 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1400              	.LVL202:
 1401              	.LBE191:
 628:rt_thread/src/ipc.c **** 
 629:rt_thread/src/ipc.c ****     /* parameter check */
 630:rt_thread/src/ipc.c ****     RT_ASSERT(mutex != RT_NULL);
 1402              		.loc 1 630 0 is_stmt 1 discriminator 5
 1403 002c 2EB9     		cbnz	r6, .L99
 1404              		.loc 1 630 0 is_stmt 0 discriminator 1
 1405 002e 40F27622 		movw	r2, #630
ARM GAS  /tmp/ccObKSes.s 			page 39


 1406 0032 1849     		ldr	r1, .L105
 1407 0034 1A48     		ldr	r0, .L105+12
 1408 0036 FFF7FEFF 		bl	rt_assert_handler
 1409              	.LVL203:
 1410              	.L99:
 631:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
 1411              		.loc 1 631 0 is_stmt 1
 1412 003a 3046     		mov	r0, r6
 1413 003c FFF7FEFF 		bl	rt_object_get_type
 1414              	.LVL204:
 1415 0040 0328     		cmp	r0, #3
 1416 0042 05D0     		beq	.L100
 1417              		.loc 1 631 0 is_stmt 0 discriminator 1
 1418 0044 40F27722 		movw	r2, #631
 1419 0048 1249     		ldr	r1, .L105
 1420 004a 1648     		ldr	r0, .L105+16
 1421 004c FFF7FEFF 		bl	rt_assert_handler
 1422              	.LVL205:
 1423              	.L100:
 632:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&mutex->parent.parent) == RT_FALSE);
 1424              		.loc 1 632 0 is_stmt 1
 1425 0050 3046     		mov	r0, r6
 1426 0052 FFF7FEFF 		bl	rt_object_is_systemobject
 1427              	.LVL206:
 1428 0056 28B1     		cbz	r0, .L101
 1429              		.loc 1 632 0 is_stmt 0 discriminator 1
 1430 0058 4FF41E72 		mov	r2, #632
 1431 005c 0D49     		ldr	r1, .L105
 1432 005e 1248     		ldr	r0, .L105+20
 1433 0060 FFF7FEFF 		bl	rt_assert_handler
 1434              	.LVL207:
 1435              	.L101:
 633:rt_thread/src/ipc.c **** 
 634:rt_thread/src/ipc.c ****     /* wakeup all suspended threads */
 635:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(mutex->parent.suspend_thread));
 1436              		.loc 1 635 0 is_stmt 1
 1437 0064 06F11404 		add	r4, r6, #20
 1438              	.LVL208:
 1439 0068 0CE0     		b	.L102
 1440              	.L103:
 1441              	.LBB192:
 1442              	.LBB193:
 166:rt_thread/src/ipc.c **** 
 1443              		.loc 1 166 0
 1444 006a FFF7FEFF 		bl	rt_hw_interrupt_disable
 1445              	.LVL209:
 1446 006e 0546     		mov	r5, r0
 1447              	.LVL210:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 1448              		.loc 1 169 0
 1449 0070 2068     		ldr	r0, [r4]
 1450              	.LVL211:
 171:rt_thread/src/ipc.c **** 
 1451              		.loc 1 171 0
 1452 0072 4FF0FF33 		mov	r3, #-1
 1453 0076 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 40


 1454              		.loc 1 178 0
 1455 0078 1438     		subs	r0, r0, #20
 1456              	.LVL212:
 1457 007a FFF7FEFF 		bl	rt_thread_resume
 1458              	.LVL213:
 181:rt_thread/src/ipc.c ****     }
 1459              		.loc 1 181 0
 1460 007e 2846     		mov	r0, r5
 1461 0080 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1462              	.LVL214:
 1463              	.L102:
 1464              	.LBB194:
 1465              	.LBB195:
 1466              		.loc 2 100 0
 1467 0084 2368     		ldr	r3, [r4]
 1468              	.LVL215:
 1469              	.LBE195:
 1470              	.LBE194:
 163:rt_thread/src/ipc.c ****     {
 1471              		.loc 1 163 0
 1472 0086 9C42     		cmp	r4, r3
 1473 0088 EFD1     		bne	.L103
 1474              	.LVL216:
 1475              	.LBE193:
 1476              	.LBE192:
 636:rt_thread/src/ipc.c **** 
 637:rt_thread/src/ipc.c ****     /* delete mutex object */
 638:rt_thread/src/ipc.c ****     rt_object_delete(&(mutex->parent.parent));
 1477              		.loc 1 638 0
 1478 008a 3046     		mov	r0, r6
 1479 008c FFF7FEFF 		bl	rt_object_delete
 1480              	.LVL217:
 639:rt_thread/src/ipc.c **** 
 640:rt_thread/src/ipc.c ****     return RT_EOK;
 641:rt_thread/src/ipc.c **** }
 1481              		.loc 1 641 0
 1482 0090 0020     		movs	r0, #0
 1483 0092 70BD     		pop	{r4, r5, r6, pc}
 1484              	.LVL218:
 1485              	.L106:
 1486              		.align	2
 1487              	.L105:
 1488 0094 00000000 		.word	.LANCHOR10
 1489 0098 9C000000 		.word	.LC4
 1490 009c C4000000 		.word	.LC5
 1491 00a0 3C010000 		.word	.LC8
 1492 00a4 50010000 		.word	.LC9
 1493 00a8 C8010000 		.word	.LC11
 1494              		.cfi_endproc
 1495              	.LFE30:
 1497              		.section	.text.rt_mutex_take,"ax",%progbits
 1498              		.align	2
 1499              		.global	rt_mutex_take
 1500              		.thumb
 1501              		.thumb_func
 1503              	rt_mutex_take:
 1504              	.LFB31:
ARM GAS  /tmp/ccObKSes.s 			page 41


 642:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mutex_delete);
 643:rt_thread/src/ipc.c **** #endif
 644:rt_thread/src/ipc.c **** 
 645:rt_thread/src/ipc.c **** /**
 646:rt_thread/src/ipc.c ****  * This function will take a mutex, if the mutex is unavailable, the
 647:rt_thread/src/ipc.c ****  * thread shall wait for a specified time.
 648:rt_thread/src/ipc.c ****  *
 649:rt_thread/src/ipc.c ****  * @param mutex the mutex object
 650:rt_thread/src/ipc.c ****  * @param time the waiting time
 651:rt_thread/src/ipc.c ****  *
 652:rt_thread/src/ipc.c ****  * @return the error code
 653:rt_thread/src/ipc.c ****  */
 654:rt_thread/src/ipc.c **** rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
 655:rt_thread/src/ipc.c **** {
 1505              		.loc 1 655 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 8
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 1509              	.LVL219:
 1510 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1511              	.LCFI14:
 1512              		.cfi_def_cfa_offset 24
 1513              		.cfi_offset 4, -24
 1514              		.cfi_offset 5, -20
 1515              		.cfi_offset 6, -16
 1516              		.cfi_offset 7, -12
 1517              		.cfi_offset 8, -8
 1518              		.cfi_offset 14, -4
 1519 0004 82B0     		sub	sp, sp, #8
 1520              	.LCFI15:
 1521              		.cfi_def_cfa_offset 32
 1522 0006 0646     		mov	r6, r0
 1523 0008 0191     		str	r1, [sp, #4]
 1524              	.LBB207:
 656:rt_thread/src/ipc.c ****     register rt_base_t temp;
 657:rt_thread/src/ipc.c ****     struct rt_thread *thread;
 658:rt_thread/src/ipc.c **** 
 659:rt_thread/src/ipc.c ****     /* this function must not be used in interrupt even if time = 0 */
 660:rt_thread/src/ipc.c ****     RT_DEBUG_IN_THREAD_CONTEXT;
 1525              		.loc 1 660 0
 1526 000a FFF7FEFF 		bl	rt_hw_interrupt_disable
 1527              	.LVL220:
 1528 000e 0446     		mov	r4, r0
 1529              	.LVL221:
 1530 0010 FFF7FEFF 		bl	rt_thread_self
 1531              	.LVL222:
 1532 0014 50B9     		cbnz	r0, .L108
 1533              		.loc 1 660 0 is_stmt 0 discriminator 1
 1534 0016 624D     		ldr	r5, .L130
 1535 0018 2946     		mov	r1, r5
 1536 001a 6248     		ldr	r0, .L130+4
 1537 001c FFF7FEFF 		bl	rt_kprintf
 1538              	.LVL223:
 1539 0020 4FF42572 		mov	r2, #660
 1540 0024 2946     		mov	r1, r5
 1541 0026 6048     		ldr	r0, .L130+8
 1542 0028 FFF7FEFF 		bl	rt_assert_handler
ARM GAS  /tmp/ccObKSes.s 			page 42


 1543              	.LVL224:
 1544              	.L108:
 1545              	.LBB208:
 1546              		.loc 1 660 0 discriminator 5
 1547 002c FFF7FEFF 		bl	rt_hw_interrupt_disable
 1548              	.LVL225:
 1549 0030 0546     		mov	r5, r0
 1550              	.LVL226:
 1551 0032 FFF7FEFF 		bl	rt_interrupt_get_nest
 1552              	.LVL227:
 1553 0036 50B1     		cbz	r0, .L109
 1554              		.loc 1 660 0 discriminator 6
 1555 0038 594F     		ldr	r7, .L130
 1556 003a 3946     		mov	r1, r7
 1557 003c 5B48     		ldr	r0, .L130+12
 1558 003e FFF7FEFF 		bl	rt_kprintf
 1559              	.LVL228:
 1560 0042 4FF42572 		mov	r2, #660
 1561 0046 3946     		mov	r1, r7
 1562 0048 5748     		ldr	r0, .L130+8
 1563 004a FFF7FEFF 		bl	rt_assert_handler
 1564              	.LVL229:
 1565              	.L109:
 1566              		.loc 1 660 0 discriminator 10
 1567 004e 2846     		mov	r0, r5
 1568 0050 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1569              	.LVL230:
 1570              	.LBE208:
 1571 0054 2046     		mov	r0, r4
 1572 0056 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1573              	.LVL231:
 1574              	.LBE207:
 661:rt_thread/src/ipc.c **** 
 662:rt_thread/src/ipc.c ****     /* parameter check */
 663:rt_thread/src/ipc.c ****     RT_ASSERT(mutex != RT_NULL);
 1575              		.loc 1 663 0 is_stmt 1 discriminator 10
 1576 005a 2EB9     		cbnz	r6, .L110
 1577              		.loc 1 663 0 is_stmt 0 discriminator 1
 1578 005c 40F29722 		movw	r2, #663
 1579 0060 4F49     		ldr	r1, .L130
 1580 0062 5348     		ldr	r0, .L130+16
 1581 0064 FFF7FEFF 		bl	rt_assert_handler
 1582              	.LVL232:
 1583              	.L110:
 664:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
 1584              		.loc 1 664 0 is_stmt 1
 1585 0068 3046     		mov	r0, r6
 1586 006a FFF7FEFF 		bl	rt_object_get_type
 1587              	.LVL233:
 1588 006e 0328     		cmp	r0, #3
 1589 0070 05D0     		beq	.L111
 1590              		.loc 1 664 0 is_stmt 0 discriminator 1
 1591 0072 4FF42672 		mov	r2, #664
 1592 0076 4A49     		ldr	r1, .L130
 1593 0078 4E48     		ldr	r0, .L130+20
 1594 007a FFF7FEFF 		bl	rt_assert_handler
 1595              	.LVL234:
ARM GAS  /tmp/ccObKSes.s 			page 43


 1596              	.L111:
 665:rt_thread/src/ipc.c **** 
 666:rt_thread/src/ipc.c ****     /* get current thread */
 667:rt_thread/src/ipc.c ****     thread = rt_thread_self();
 1597              		.loc 1 667 0 is_stmt 1
 1598 007e FFF7FEFF 		bl	rt_thread_self
 1599              	.LVL235:
 1600 0082 0446     		mov	r4, r0
 1601              	.LVL236:
 668:rt_thread/src/ipc.c **** 
 669:rt_thread/src/ipc.c ****     /* disable interrupt */
 670:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 1602              		.loc 1 670 0
 1603 0084 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1604              	.LVL237:
 1605 0088 8046     		mov	r8, r0
 1606              	.LVL238:
 671:rt_thread/src/ipc.c **** 
 672:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mutex->parent.parent)));
 1607              		.loc 1 672 0
 1608 008a 4B4B     		ldr	r3, .L130+24
 1609 008c 1B68     		ldr	r3, [r3]
 1610 008e 0BB1     		cbz	r3, .L112
 1611              		.loc 1 672 0 is_stmt 0 discriminator 1
 1612 0090 3046     		mov	r0, r6
 1613              	.LVL239:
 1614 0092 9847     		blx	r3
 1615              	.LVL240:
 1616              	.L112:
 673:rt_thread/src/ipc.c **** 
 674:rt_thread/src/ipc.c ****     RT_DEBUG_LOG(RT_DEBUG_IPC,
 675:rt_thread/src/ipc.c ****                  ("mutex_take: current thread %s, mutex value: %d, hold: %d\n",
 676:rt_thread/src/ipc.c ****                   thread->name, mutex->value, mutex->hold));
 677:rt_thread/src/ipc.c **** 
 678:rt_thread/src/ipc.c ****     /* reset thread error */
 679:rt_thread/src/ipc.c ****     thread->error = RT_EOK;
 1617              		.loc 1 679 0 is_stmt 1
 1618 0094 0023     		movs	r3, #0
 1619 0096 2363     		str	r3, [r4, #48]
 680:rt_thread/src/ipc.c **** 
 681:rt_thread/src/ipc.c ****     if (mutex->owner == thread)
 1620              		.loc 1 681 0
 1621 0098 336A     		ldr	r3, [r6, #32]
 1622 009a 9C42     		cmp	r4, r3
 1623 009c 03D1     		bne	.L113
 682:rt_thread/src/ipc.c ****     {
 683:rt_thread/src/ipc.c ****         /* it's the same thread */
 684:rt_thread/src/ipc.c ****         mutex->hold ++;
 1624              		.loc 1 684 0
 1625 009e F37F     		ldrb	r3, [r6, #31]	@ zero_extendqisi2
 1626 00a0 0133     		adds	r3, r3, #1
 1627 00a2 F377     		strb	r3, [r6, #31]
 1628 00a4 6DE0     		b	.L114
 1629              	.LVL241:
 1630              	.L113:
 685:rt_thread/src/ipc.c ****     }
 686:rt_thread/src/ipc.c ****     else
ARM GAS  /tmp/ccObKSes.s 			page 44


 687:rt_thread/src/ipc.c ****     {
 688:rt_thread/src/ipc.c **** __again:
 689:rt_thread/src/ipc.c ****         /* The value of mutex is 1 in initial status. Therefore, if the
 690:rt_thread/src/ipc.c ****          * value is great than 0, it indicates the mutex is avaible.
 691:rt_thread/src/ipc.c ****          */
 692:rt_thread/src/ipc.c ****         if (mutex->value > 0)
 1631              		.loc 1 692 0
 1632 00a6 B38B     		ldrh	r3, [r6, #28]
 1633 00a8 4BB1     		cbz	r3, .L115
 693:rt_thread/src/ipc.c ****         {
 694:rt_thread/src/ipc.c ****             /* mutex is available */
 695:rt_thread/src/ipc.c ****             mutex->value --;
 1634              		.loc 1 695 0
 1635 00aa 013B     		subs	r3, r3, #1
 1636 00ac B383     		strh	r3, [r6, #28]	@ movhi
 696:rt_thread/src/ipc.c **** 
 697:rt_thread/src/ipc.c ****             /* set mutex owner and original priority */
 698:rt_thread/src/ipc.c ****             mutex->owner             = thread;
 1637              		.loc 1 698 0
 1638 00ae 3462     		str	r4, [r6, #32]
 699:rt_thread/src/ipc.c ****             mutex->original_priority = thread->current_priority;
 1639              		.loc 1 699 0
 1640 00b0 94F83530 		ldrb	r3, [r4, #53]	@ zero_extendqisi2
 1641 00b4 B377     		strb	r3, [r6, #30]
 700:rt_thread/src/ipc.c ****             mutex->hold ++;
 1642              		.loc 1 700 0
 1643 00b6 F37F     		ldrb	r3, [r6, #31]	@ zero_extendqisi2
 1644 00b8 0133     		adds	r3, r3, #1
 1645 00ba F377     		strb	r3, [r6, #31]
 1646 00bc 61E0     		b	.L114
 1647              	.L115:
 701:rt_thread/src/ipc.c ****         }
 702:rt_thread/src/ipc.c ****         else
 703:rt_thread/src/ipc.c ****         {
 704:rt_thread/src/ipc.c ****             /* no waiting, return with timeout */
 705:rt_thread/src/ipc.c ****             if (time == 0)
 1648              		.loc 1 705 0
 1649 00be 019B     		ldr	r3, [sp, #4]
 1650 00c0 3BB9     		cbnz	r3, .L116
 706:rt_thread/src/ipc.c ****             {
 707:rt_thread/src/ipc.c ****                 /* set error as timeout */
 708:rt_thread/src/ipc.c ****                 thread->error = -RT_ETIMEOUT;
 1651              		.loc 1 708 0
 1652 00c2 6FF00105 		mvn	r5, #1
 1653 00c6 2563     		str	r5, [r4, #48]
 709:rt_thread/src/ipc.c **** 
 710:rt_thread/src/ipc.c ****                 /* enable interrupt */
 711:rt_thread/src/ipc.c ****                 rt_hw_interrupt_enable(temp);
 1654              		.loc 1 711 0
 1655 00c8 4046     		mov	r0, r8
 1656 00ca FFF7FEFF 		bl	rt_hw_interrupt_enable
 1657              	.LVL242:
 712:rt_thread/src/ipc.c **** 
 713:rt_thread/src/ipc.c ****                 return -RT_ETIMEOUT;
 1658              		.loc 1 713 0
 1659 00ce 2846     		mov	r0, r5
 1660 00d0 62E0     		b	.L117
ARM GAS  /tmp/ccObKSes.s 			page 45


 1661              	.L116:
 714:rt_thread/src/ipc.c ****             }
 715:rt_thread/src/ipc.c ****             else
 716:rt_thread/src/ipc.c ****             {
 717:rt_thread/src/ipc.c ****                 /* mutex is unavailable, push to suspend list */
 718:rt_thread/src/ipc.c ****                 RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_take: suspend thread: %s\n",
 719:rt_thread/src/ipc.c ****                                             thread->name));
 720:rt_thread/src/ipc.c **** 
 721:rt_thread/src/ipc.c ****                 /* change the owner thread priority of mutex */
 722:rt_thread/src/ipc.c ****                 if (thread->current_priority < mutex->owner->current_priority)
 1662              		.loc 1 722 0
 1663 00d2 94F83520 		ldrb	r2, [r4, #53]	@ zero_extendqisi2
 1664 00d6 306A     		ldr	r0, [r6, #32]
 1665 00d8 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1666 00dc 9A42     		cmp	r2, r3
 1667 00de 04D2     		bcs	.L118
 723:rt_thread/src/ipc.c ****                 {
 724:rt_thread/src/ipc.c ****                     /* change the owner thread priority */
 725:rt_thread/src/ipc.c ****                     rt_thread_control(mutex->owner,
 1668              		.loc 1 725 0
 1669 00e0 04F13502 		add	r2, r4, #53
 1670 00e4 0221     		movs	r1, #2
 1671 00e6 FFF7FEFF 		bl	rt_thread_control
 1672              	.LVL243:
 1673              	.L118:
 726:rt_thread/src/ipc.c ****                                       RT_THREAD_CTRL_CHANGE_PRIORITY,
 727:rt_thread/src/ipc.c ****                                       &thread->current_priority);
 728:rt_thread/src/ipc.c ****                 }
 729:rt_thread/src/ipc.c **** 
 730:rt_thread/src/ipc.c ****                 /* suspend current thread */
 731:rt_thread/src/ipc.c ****                 rt_ipc_list_suspend(&(mutex->parent.suspend_thread),
 1674              		.loc 1 731 0
 1675 00ea 06F11405 		add	r5, r6, #20
 1676 00ee 777A     		ldrb	r7, [r6, #9]	@ zero_extendqisi2
 1677              	.LVL244:
 1678              	.LBB209:
 1679              	.LBB210:
  85:rt_thread/src/ipc.c **** 
 1680              		.loc 1 85 0
 1681 00f0 2046     		mov	r0, r4
 1682 00f2 FFF7FEFF 		bl	rt_thread_suspend
 1683              	.LVL245:
  87:rt_thread/src/ipc.c ****     {
 1684              		.loc 1 87 0
 1685 00f6 17B1     		cbz	r7, .L120
 1686 00f8 012F     		cmp	r7, #1
 1687 00fa 09D0     		beq	.L121
 1688 00fc 26E0     		b	.L119
 1689              	.L120:
  90:rt_thread/src/ipc.c ****         break;
 1690              		.loc 1 90 0
 1691 00fe 04F11403 		add	r3, r4, #20
 1692              	.LVL246:
 1693              	.LBB211:
 1694              	.LBB212:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 1695              		.loc 2 75 0
ARM GAS  /tmp/ccObKSes.s 			page 46


 1696 0102 6A68     		ldr	r2, [r5, #4]
 1697 0104 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 1698              		.loc 2 76 0
 1699 0106 6A68     		ldr	r2, [r5, #4]
 1700 0108 A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 1701              		.loc 2 78 0
 1702 010a 6B60     		str	r3, [r5, #4]
  79:rt_thread/include/rtservice.h **** }
 1703              		.loc 2 79 0
 1704 010c 6561     		str	r5, [r4, #20]
 1705 010e 1DE0     		b	.L119
 1706              	.LVL247:
 1707              	.L121:
 1708              	.LBE212:
 1709              	.LBE211:
 1710              	.LBB213:
  99:rt_thread/src/ipc.c ****             {
 1711              		.loc 1 99 0
 1712 0110 7369     		ldr	r3, [r6, #20]
 1713              	.LVL248:
 1714 0112 0FE0     		b	.L122
 1715              	.L125:
 1716              	.LVL249:
 104:rt_thread/src/ipc.c ****                 {
 1717              		.loc 1 104 0
 1718 0114 94F83510 		ldrb	r1, [r4, #53]	@ zero_extendqisi2
 1719 0118 93F82120 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
 1720 011c 9142     		cmp	r1, r2
 1721 011e 08D2     		bcs	.L123
 107:rt_thread/src/ipc.c ****                     break;
 1722              		.loc 1 107 0
 1723 0120 04F11402 		add	r2, r4, #20
 1724              	.LVL250:
 1725              	.LBB214:
 1726              	.LBB215:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 1727              		.loc 2 75 0
 1728 0124 5968     		ldr	r1, [r3, #4]
 1729 0126 0A60     		str	r2, [r1]
  76:rt_thread/include/rtservice.h **** 
 1730              		.loc 2 76 0
 1731 0128 5968     		ldr	r1, [r3, #4]
 1732 012a A161     		str	r1, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 1733              		.loc 2 78 0
 1734 012c 5A60     		str	r2, [r3, #4]
  79:rt_thread/include/rtservice.h **** }
 1735              		.loc 2 79 0
 1736 012e 6361     		str	r3, [r4, #20]
 1737 0130 02E0     		b	.L124
 1738              	.LVL251:
 1739              	.L123:
 1740              	.LBE215:
 1741              	.LBE214:
  99:rt_thread/src/ipc.c ****             {
ARM GAS  /tmp/ccObKSes.s 			page 47


 1742              		.loc 1 99 0
 1743 0132 1B68     		ldr	r3, [r3]
 1744              	.LVL252:
 1745              	.L122:
 1746 0134 9D42     		cmp	r5, r3
 1747 0136 EDD1     		bne	.L125
 1748              	.L124:
 116:rt_thread/src/ipc.c ****                 rt_list_insert_before(list, &(thread->tlist));
 1749              		.loc 1 116 0
 1750 0138 9D42     		cmp	r5, r3
 1751 013a 07D1     		bne	.L119
 117:rt_thread/src/ipc.c ****         }
 1752              		.loc 1 117 0
 1753 013c 04F11403 		add	r3, r4, #20
 1754              	.LVL253:
 1755              	.LBB216:
 1756              	.LBB217:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 1757              		.loc 2 75 0
 1758 0140 6A68     		ldr	r2, [r5, #4]
 1759 0142 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 1760              		.loc 2 76 0
 1761 0144 6A68     		ldr	r2, [r5, #4]
 1762 0146 A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 1763              		.loc 2 78 0
 1764 0148 6B60     		str	r3, [r5, #4]
  79:rt_thread/include/rtservice.h **** }
 1765              		.loc 2 79 0
 1766 014a 6561     		str	r5, [r4, #20]
 1767              	.LVL254:
 1768              	.L119:
 1769              	.LBE217:
 1770              	.LBE216:
 1771              	.LBE213:
 1772              	.LBE210:
 1773              	.LBE209:
 732:rt_thread/src/ipc.c ****                                     thread,
 733:rt_thread/src/ipc.c ****                                     mutex->parent.parent.flag);
 734:rt_thread/src/ipc.c **** 
 735:rt_thread/src/ipc.c ****                 /* has waiting time, start thread timer */
 736:rt_thread/src/ipc.c ****                 if (time > 0)
 1774              		.loc 1 736 0
 1775 014c 019B     		ldr	r3, [sp, #4]
 1776 014e 002B     		cmp	r3, #0
 1777 0150 09DD     		ble	.L126
 737:rt_thread/src/ipc.c ****                 {
 738:rt_thread/src/ipc.c ****                     RT_DEBUG_LOG(RT_DEBUG_IPC,
 739:rt_thread/src/ipc.c ****                                  ("mutex_take: start the timer of thread:%s\n",
 740:rt_thread/src/ipc.c ****                                   thread->name));
 741:rt_thread/src/ipc.c **** 
 742:rt_thread/src/ipc.c ****                     /* reset the timeout of thread timer and start it */
 743:rt_thread/src/ipc.c ****                     rt_timer_control(&(thread->thread_timer),
 1778              		.loc 1 743 0
 1779 0152 04F16005 		add	r5, r4, #96
 1780 0156 01AA     		add	r2, sp, #4
ARM GAS  /tmp/ccObKSes.s 			page 48


 1781              	.LVL255:
 1782 0158 0021     		movs	r1, #0
 1783 015a 2846     		mov	r0, r5
 1784 015c FFF7FEFF 		bl	rt_timer_control
 1785              	.LVL256:
 744:rt_thread/src/ipc.c ****                                      RT_TIMER_CTRL_SET_TIME,
 745:rt_thread/src/ipc.c ****                                      &time);
 746:rt_thread/src/ipc.c ****                     rt_timer_start(&(thread->thread_timer));
 1786              		.loc 1 746 0
 1787 0160 2846     		mov	r0, r5
 1788 0162 FFF7FEFF 		bl	rt_timer_start
 1789              	.LVL257:
 1790              	.L126:
 747:rt_thread/src/ipc.c ****                 }
 748:rt_thread/src/ipc.c **** 
 749:rt_thread/src/ipc.c ****                 /* enable interrupt */
 750:rt_thread/src/ipc.c ****                 rt_hw_interrupt_enable(temp);
 1791              		.loc 1 750 0
 1792 0166 4046     		mov	r0, r8
 1793 0168 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1794              	.LVL258:
 751:rt_thread/src/ipc.c **** 
 752:rt_thread/src/ipc.c ****                 /* do schedule */
 753:rt_thread/src/ipc.c ****                 rt_schedule();
 1795              		.loc 1 753 0
 1796 016c FFF7FEFF 		bl	rt_schedule
 1797              	.LVL259:
 754:rt_thread/src/ipc.c **** 
 755:rt_thread/src/ipc.c ****                 if (thread->error != RT_EOK)
 1798              		.loc 1 755 0
 1799 0170 206B     		ldr	r0, [r4, #48]
 1800 0172 18B1     		cbz	r0, .L127
 756:rt_thread/src/ipc.c ****                 {
 757:rt_thread/src/ipc.c ****                     /* interrupt by signal, try it again */
 758:rt_thread/src/ipc.c ****                     if (thread->error == -RT_EINTR) goto __again;
 1801              		.loc 1 758 0
 1802 0174 10F1090F 		cmn	r0, #9
 1803 0178 95D0     		beq	.L113
 1804 017a 0DE0     		b	.L117
 1805              	.L127:
 759:rt_thread/src/ipc.c **** 
 760:rt_thread/src/ipc.c ****                     /* return error */
 761:rt_thread/src/ipc.c ****                     return thread->error;
 762:rt_thread/src/ipc.c ****                 }
 763:rt_thread/src/ipc.c ****                 else
 764:rt_thread/src/ipc.c ****                 {
 765:rt_thread/src/ipc.c ****                     /* the mutex is taken successfully. */
 766:rt_thread/src/ipc.c ****                     /* disable interrupt */
 767:rt_thread/src/ipc.c ****                     temp = rt_hw_interrupt_disable();
 1806              		.loc 1 767 0
 1807 017c FFF7FEFF 		bl	rt_hw_interrupt_disable
 1808              	.LVL260:
 1809 0180 8046     		mov	r8, r0
 1810              	.LVL261:
 1811              	.L114:
 768:rt_thread/src/ipc.c ****                 }
 769:rt_thread/src/ipc.c ****             }
ARM GAS  /tmp/ccObKSes.s 			page 49


 770:rt_thread/src/ipc.c ****         }
 771:rt_thread/src/ipc.c ****     }
 772:rt_thread/src/ipc.c **** 
 773:rt_thread/src/ipc.c ****     /* enable interrupt */
 774:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 1812              		.loc 1 774 0
 1813 0182 4046     		mov	r0, r8
 1814 0184 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1815              	.LVL262:
 775:rt_thread/src/ipc.c **** 
 776:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mutex->parent.parent)));
 1816              		.loc 1 776 0
 1817 0188 0C4B     		ldr	r3, .L130+28
 1818 018a 1B68     		ldr	r3, [r3]
 1819 018c 1BB1     		cbz	r3, .L128
 1820              		.loc 1 776 0 is_stmt 0 discriminator 1
 1821 018e 3046     		mov	r0, r6
 1822 0190 9847     		blx	r3
 1823              	.LVL263:
 777:rt_thread/src/ipc.c **** 
 778:rt_thread/src/ipc.c ****     return RT_EOK;
 1824              		.loc 1 778 0 is_stmt 1 discriminator 1
 1825 0192 0020     		movs	r0, #0
 1826 0194 00E0     		b	.L117
 1827              	.L128:
 1828              		.loc 1 778 0 is_stmt 0
 1829 0196 0020     		movs	r0, #0
 1830              	.L117:
 779:rt_thread/src/ipc.c **** }
 1831              		.loc 1 779 0 is_stmt 1
 1832 0198 02B0     		add	sp, sp, #8
 1833              	.LCFI16:
 1834              		.cfi_def_cfa_offset 24
 1835              		@ sp needed
 1836 019a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1837              	.LVL264:
 1838              	.L131:
 1839 019e 00BF     		.align	2
 1840              	.L130:
 1841 01a0 00000000 		.word	.LANCHOR11
 1842 01a4 04010000 		.word	.LC7
 1843 01a8 C4000000 		.word	.LC5
 1844 01ac 9C000000 		.word	.LC4
 1845 01b0 3C010000 		.word	.LC8
 1846 01b4 50010000 		.word	.LC9
 1847 01b8 00000000 		.word	rt_object_trytake_hook
 1848 01bc 00000000 		.word	rt_object_take_hook
 1849              		.cfi_endproc
 1850              	.LFE31:
 1852              		.section	.text.rt_mutex_release,"ax",%progbits
 1853              		.align	2
 1854              		.global	rt_mutex_release
 1855              		.thumb
 1856              		.thumb_func
 1858              	rt_mutex_release:
 1859              	.LFB32:
 780:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mutex_take);
ARM GAS  /tmp/ccObKSes.s 			page 50


 781:rt_thread/src/ipc.c **** 
 782:rt_thread/src/ipc.c **** /**
 783:rt_thread/src/ipc.c ****  * This function will release a mutex, if there are threads suspended on mutex,
 784:rt_thread/src/ipc.c ****  * it will be waked up.
 785:rt_thread/src/ipc.c ****  *
 786:rt_thread/src/ipc.c ****  * @param mutex the mutex object
 787:rt_thread/src/ipc.c ****  *
 788:rt_thread/src/ipc.c ****  * @return the error code
 789:rt_thread/src/ipc.c ****  */
 790:rt_thread/src/ipc.c **** rt_err_t rt_mutex_release(rt_mutex_t mutex)
 791:rt_thread/src/ipc.c **** {
 1860              		.loc 1 791 0
 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 0
 1863              		@ frame_needed = 0, uses_anonymous_args = 0
 1864              	.LVL265:
 1865 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1866              	.LCFI17:
 1867              		.cfi_def_cfa_offset 24
 1868              		.cfi_offset 3, -24
 1869              		.cfi_offset 4, -20
 1870              		.cfi_offset 5, -16
 1871              		.cfi_offset 6, -12
 1872              		.cfi_offset 7, -8
 1873              		.cfi_offset 14, -4
 792:rt_thread/src/ipc.c ****     register rt_base_t temp;
 793:rt_thread/src/ipc.c ****     struct rt_thread *thread;
 794:rt_thread/src/ipc.c ****     rt_bool_t need_schedule;
 795:rt_thread/src/ipc.c **** 
 796:rt_thread/src/ipc.c ****     /* parameter check */
 797:rt_thread/src/ipc.c ****     RT_ASSERT(mutex != RT_NULL);
 1874              		.loc 1 797 0
 1875 0002 0446     		mov	r4, r0
 1876 0004 28B9     		cbnz	r0, .L133
 1877              		.loc 1 797 0 is_stmt 0 discriminator 1
 1878 0006 40F21D32 		movw	r2, #797
 1879 000a 4149     		ldr	r1, .L146
 1880 000c 4148     		ldr	r0, .L146+4
 1881              	.LVL266:
 1882 000e FFF7FEFF 		bl	rt_assert_handler
 1883              	.LVL267:
 1884              	.L133:
 798:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
 1885              		.loc 1 798 0 is_stmt 1
 1886 0012 2046     		mov	r0, r4
 1887 0014 FFF7FEFF 		bl	rt_object_get_type
 1888              	.LVL268:
 1889 0018 0328     		cmp	r0, #3
 1890 001a 05D0     		beq	.L134
 1891              		.loc 1 798 0 is_stmt 0 discriminator 1
 1892 001c 40F21E32 		movw	r2, #798
 1893 0020 3B49     		ldr	r1, .L146
 1894 0022 3D48     		ldr	r0, .L146+8
 1895 0024 FFF7FEFF 		bl	rt_assert_handler
 1896              	.LVL269:
 1897              	.L134:
 1898              	.LBB218:
ARM GAS  /tmp/ccObKSes.s 			page 51


 799:rt_thread/src/ipc.c **** 
 800:rt_thread/src/ipc.c ****     need_schedule = RT_FALSE;
 801:rt_thread/src/ipc.c **** 
 802:rt_thread/src/ipc.c ****     /* only thread could release mutex because we need test the ownership */
 803:rt_thread/src/ipc.c ****     RT_DEBUG_IN_THREAD_CONTEXT;
 1899              		.loc 1 803 0 is_stmt 1
 1900 0028 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1901              	.LVL270:
 1902 002c 0546     		mov	r5, r0
 1903              	.LVL271:
 1904 002e FFF7FEFF 		bl	rt_thread_self
 1905              	.LVL272:
 1906 0032 50B9     		cbnz	r0, .L135
 1907              		.loc 1 803 0 is_stmt 0 discriminator 1
 1908 0034 364E     		ldr	r6, .L146
 1909 0036 3146     		mov	r1, r6
 1910 0038 3848     		ldr	r0, .L146+12
 1911 003a FFF7FEFF 		bl	rt_kprintf
 1912              	.LVL273:
 1913 003e 40F22332 		movw	r2, #803
 1914 0042 3146     		mov	r1, r6
 1915 0044 3648     		ldr	r0, .L146+16
 1916 0046 FFF7FEFF 		bl	rt_assert_handler
 1917              	.LVL274:
 1918              	.L135:
 1919              	.LBB219:
 1920              		.loc 1 803 0 discriminator 5
 1921 004a FFF7FEFF 		bl	rt_hw_interrupt_disable
 1922              	.LVL275:
 1923 004e 0646     		mov	r6, r0
 1924              	.LVL276:
 1925 0050 FFF7FEFF 		bl	rt_interrupt_get_nest
 1926              	.LVL277:
 1927 0054 50B1     		cbz	r0, .L136
 1928              		.loc 1 803 0 discriminator 6
 1929 0056 2E4F     		ldr	r7, .L146
 1930 0058 3946     		mov	r1, r7
 1931 005a 3248     		ldr	r0, .L146+20
 1932 005c FFF7FEFF 		bl	rt_kprintf
 1933              	.LVL278:
 1934 0060 40F22332 		movw	r2, #803
 1935 0064 3946     		mov	r1, r7
 1936 0066 2E48     		ldr	r0, .L146+16
 1937 0068 FFF7FEFF 		bl	rt_assert_handler
 1938              	.LVL279:
 1939              	.L136:
 1940              		.loc 1 803 0 discriminator 10
 1941 006c 3046     		mov	r0, r6
 1942 006e FFF7FEFF 		bl	rt_hw_interrupt_enable
 1943              	.LVL280:
 1944              	.LBE219:
 1945 0072 2846     		mov	r0, r5
 1946 0074 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1947              	.LVL281:
 1948              	.LBE218:
 804:rt_thread/src/ipc.c **** 
 805:rt_thread/src/ipc.c ****     /* get current thread */
ARM GAS  /tmp/ccObKSes.s 			page 52


 806:rt_thread/src/ipc.c ****     thread = rt_thread_self();
 1949              		.loc 1 806 0 is_stmt 1 discriminator 10
 1950 0078 FFF7FEFF 		bl	rt_thread_self
 1951              	.LVL282:
 1952 007c 0646     		mov	r6, r0
 1953              	.LVL283:
 807:rt_thread/src/ipc.c **** 
 808:rt_thread/src/ipc.c ****     /* disable interrupt */
 809:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 1954              		.loc 1 809 0 discriminator 10
 1955 007e FFF7FEFF 		bl	rt_hw_interrupt_disable
 1956              	.LVL284:
 1957 0082 0546     		mov	r5, r0
 1958              	.LVL285:
 810:rt_thread/src/ipc.c **** 
 811:rt_thread/src/ipc.c ****     RT_DEBUG_LOG(RT_DEBUG_IPC,
 812:rt_thread/src/ipc.c ****                  ("mutex_release:current thread %s, mutex value: %d, hold: %d\n",
 813:rt_thread/src/ipc.c ****                   thread->name, mutex->value, mutex->hold));
 814:rt_thread/src/ipc.c **** 
 815:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mutex->parent.parent)));
 1959              		.loc 1 815 0 discriminator 10
 1960 0084 284B     		ldr	r3, .L146+24
 1961 0086 1B68     		ldr	r3, [r3]
 1962 0088 0BB1     		cbz	r3, .L137
 1963              		.loc 1 815 0 is_stmt 0 discriminator 1
 1964 008a 2046     		mov	r0, r4
 1965              	.LVL286:
 1966 008c 9847     		blx	r3
 1967              	.LVL287:
 1968              	.L137:
 816:rt_thread/src/ipc.c **** 
 817:rt_thread/src/ipc.c ****     /* mutex only can be released by owner */
 818:rt_thread/src/ipc.c ****     if (thread != mutex->owner)
 1969              		.loc 1 818 0 is_stmt 1
 1970 008e 206A     		ldr	r0, [r4, #32]
 1971 0090 8642     		cmp	r6, r0
 1972 0092 07D0     		beq	.L138
 819:rt_thread/src/ipc.c ****     {
 820:rt_thread/src/ipc.c ****         thread->error = -RT_ERROR;
 1973              		.loc 1 820 0
 1974 0094 4FF0FF34 		mov	r4, #-1
 1975              	.LVL288:
 1976 0098 3463     		str	r4, [r6, #48]
 821:rt_thread/src/ipc.c **** 
 822:rt_thread/src/ipc.c ****         /* enable interrupt */
 823:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 1977              		.loc 1 823 0
 1978 009a 2846     		mov	r0, r5
 1979 009c FFF7FEFF 		bl	rt_hw_interrupt_enable
 1980              	.LVL289:
 824:rt_thread/src/ipc.c **** 
 825:rt_thread/src/ipc.c ****         return -RT_ERROR;
 1981              		.loc 1 825 0
 1982 00a0 2046     		mov	r0, r4
 1983 00a2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1984              	.LVL290:
 1985              	.L138:
ARM GAS  /tmp/ccObKSes.s 			page 53


 826:rt_thread/src/ipc.c ****     }
 827:rt_thread/src/ipc.c **** 
 828:rt_thread/src/ipc.c ****     /* decrease hold */
 829:rt_thread/src/ipc.c ****     mutex->hold --;
 1986              		.loc 1 829 0
 1987 00a4 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 1988 00a6 013B     		subs	r3, r3, #1
 1989 00a8 DBB2     		uxtb	r3, r3
 1990 00aa E377     		strb	r3, [r4, #31]
 830:rt_thread/src/ipc.c ****     /* if no hold */
 831:rt_thread/src/ipc.c ****     if (mutex->hold == 0)
 1991              		.loc 1 831 0
 1992 00ac 23BB     		cbnz	r3, .L143
 832:rt_thread/src/ipc.c ****     {
 833:rt_thread/src/ipc.c ****         /* change the owner thread to original priority */
 834:rt_thread/src/ipc.c ****         if (mutex->original_priority != mutex->owner->current_priority)
 1993              		.loc 1 834 0
 1994 00ae A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 1995 00b0 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1996 00b4 9A42     		cmp	r2, r3
 1997 00b6 04D0     		beq	.L141
 835:rt_thread/src/ipc.c ****         {
 836:rt_thread/src/ipc.c ****             rt_thread_control(mutex->owner,
 1998              		.loc 1 836 0
 1999 00b8 04F11E02 		add	r2, r4, #30
 2000 00bc 0221     		movs	r1, #2
 2001 00be FFF7FEFF 		bl	rt_thread_control
 2002              	.LVL291:
 2003              	.L141:
 837:rt_thread/src/ipc.c ****                               RT_THREAD_CTRL_CHANGE_PRIORITY,
 838:rt_thread/src/ipc.c ****                               &(mutex->original_priority));
 839:rt_thread/src/ipc.c ****         }
 840:rt_thread/src/ipc.c **** 
 841:rt_thread/src/ipc.c ****         /* wakeup suspended thread */
 842:rt_thread/src/ipc.c ****         if (!rt_list_isempty(&mutex->parent.suspend_thread))
 2004              		.loc 1 842 0
 2005 00c2 04F11403 		add	r3, r4, #20
 2006              	.LBB220:
 2007              	.LBB221:
 2008              		.loc 2 100 0
 2009 00c6 6269     		ldr	r2, [r4, #20]
 2010              	.LBE221:
 2011              	.LBE220:
 2012              		.loc 1 842 0
 2013 00c8 9342     		cmp	r3, r2
 2014 00ca 0CD0     		beq	.L142
 843:rt_thread/src/ipc.c ****         {
 844:rt_thread/src/ipc.c ****             /* get suspended thread */
 845:rt_thread/src/ipc.c ****             thread = rt_list_entry(mutex->parent.suspend_thread.next,
 2015              		.loc 1 845 0
 2016 00cc A2F11400 		sub	r0, r2, #20
 2017              	.LVL292:
 846:rt_thread/src/ipc.c ****                                    struct rt_thread,
 847:rt_thread/src/ipc.c ****                                    tlist);
 848:rt_thread/src/ipc.c **** 
 849:rt_thread/src/ipc.c ****             RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_release: resume thread: %s\n",
 850:rt_thread/src/ipc.c ****                                         thread->name));
ARM GAS  /tmp/ccObKSes.s 			page 54


 851:rt_thread/src/ipc.c **** 
 852:rt_thread/src/ipc.c ****             /* set new owner and priority */
 853:rt_thread/src/ipc.c ****             mutex->owner             = thread;
 2018              		.loc 1 853 0
 2019 00d0 2062     		str	r0, [r4, #32]
 854:rt_thread/src/ipc.c ****             mutex->original_priority = thread->current_priority;
 2020              		.loc 1 854 0
 2021 00d2 92F82130 		ldrb	r3, [r2, #33]	@ zero_extendqisi2
 2022 00d6 A377     		strb	r3, [r4, #30]
 855:rt_thread/src/ipc.c ****             mutex->hold ++;
 2023              		.loc 1 855 0
 2024 00d8 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 2025 00da 0133     		adds	r3, r3, #1
 2026 00dc E377     		strb	r3, [r4, #31]
 2027              	.LVL293:
 2028              	.LBB222:
 2029              	.LBB223:
 144:rt_thread/src/ipc.c **** 
 2030              		.loc 1 144 0
 2031 00de FFF7FEFF 		bl	rt_thread_resume
 2032              	.LVL294:
 2033              	.LBE223:
 2034              	.LBE222:
 856:rt_thread/src/ipc.c **** 
 857:rt_thread/src/ipc.c ****             /* resume thread */
 858:rt_thread/src/ipc.c ****             rt_ipc_list_resume(&(mutex->parent.suspend_thread));
 859:rt_thread/src/ipc.c **** 
 860:rt_thread/src/ipc.c ****             need_schedule = RT_TRUE;
 2035              		.loc 1 860 0
 2036 00e2 0124     		movs	r4, #1
 2037              	.LVL295:
 2038 00e4 09E0     		b	.L140
 2039              	.LVL296:
 2040              	.L142:
 861:rt_thread/src/ipc.c ****         }
 862:rt_thread/src/ipc.c ****         else
 863:rt_thread/src/ipc.c ****         {
 864:rt_thread/src/ipc.c ****             /* increase value */
 865:rt_thread/src/ipc.c ****             mutex->value ++;
 2041              		.loc 1 865 0
 2042 00e6 A38B     		ldrh	r3, [r4, #28]
 2043 00e8 0133     		adds	r3, r3, #1
 2044 00ea A383     		strh	r3, [r4, #28]	@ movhi
 866:rt_thread/src/ipc.c **** 
 867:rt_thread/src/ipc.c ****             /* clear owner */
 868:rt_thread/src/ipc.c ****             mutex->owner             = RT_NULL;
 2045              		.loc 1 868 0
 2046 00ec 0023     		movs	r3, #0
 2047 00ee 2362     		str	r3, [r4, #32]
 869:rt_thread/src/ipc.c ****             mutex->original_priority = 0xff;
 2048              		.loc 1 869 0
 2049 00f0 FF22     		movs	r2, #255
 2050 00f2 A277     		strb	r2, [r4, #30]
 800:rt_thread/src/ipc.c **** 
 2051              		.loc 1 800 0
 2052 00f4 1C46     		mov	r4, r3
 2053              	.LVL297:
ARM GAS  /tmp/ccObKSes.s 			page 55


 2054 00f6 00E0     		b	.L140
 2055              	.LVL298:
 2056              	.L143:
 2057 00f8 0024     		movs	r4, #0
 2058              	.LVL299:
 2059              	.L140:
 870:rt_thread/src/ipc.c ****         }
 871:rt_thread/src/ipc.c ****     }
 872:rt_thread/src/ipc.c **** 
 873:rt_thread/src/ipc.c ****     /* enable interrupt */
 874:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 2060              		.loc 1 874 0
 2061 00fa 2846     		mov	r0, r5
 2062 00fc FFF7FEFF 		bl	rt_hw_interrupt_enable
 2063              	.LVL300:
 875:rt_thread/src/ipc.c **** 
 876:rt_thread/src/ipc.c ****     /* perform a schedule */
 877:rt_thread/src/ipc.c ****     if (need_schedule == RT_TRUE)
 2064              		.loc 1 877 0
 2065 0100 1CB1     		cbz	r4, .L144
 878:rt_thread/src/ipc.c ****         rt_schedule();
 2066              		.loc 1 878 0
 2067 0102 FFF7FEFF 		bl	rt_schedule
 2068              	.LVL301:
 879:rt_thread/src/ipc.c **** 
 880:rt_thread/src/ipc.c ****     return RT_EOK;
 2069              		.loc 1 880 0
 2070 0106 0020     		movs	r0, #0
 2071 0108 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2072              	.LVL302:
 2073              	.L144:
 2074 010a 0020     		movs	r0, #0
 881:rt_thread/src/ipc.c **** }
 2075              		.loc 1 881 0
 2076 010c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2077              	.LVL303:
 2078              	.L147:
 2079 010e 00BF     		.align	2
 2080              	.L146:
 2081 0110 00000000 		.word	.LANCHOR12
 2082 0114 3C010000 		.word	.LC8
 2083 0118 50010000 		.word	.LC9
 2084 011c 04010000 		.word	.LC7
 2085 0120 C4000000 		.word	.LC5
 2086 0124 9C000000 		.word	.LC4
 2087 0128 00000000 		.word	rt_object_put_hook
 2088              		.cfi_endproc
 2089              	.LFE32:
 2091              		.section	.text.rt_mutex_control,"ax",%progbits
 2092              		.align	2
 2093              		.global	rt_mutex_control
 2094              		.thumb
 2095              		.thumb_func
 2097              	rt_mutex_control:
 2098              	.LFB33:
 882:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mutex_release);
 883:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 56


 884:rt_thread/src/ipc.c **** /**
 885:rt_thread/src/ipc.c ****  * This function can get or set some extra attributions of a mutex object.
 886:rt_thread/src/ipc.c ****  *
 887:rt_thread/src/ipc.c ****  * @param mutex the mutex object
 888:rt_thread/src/ipc.c ****  * @param cmd the execution command
 889:rt_thread/src/ipc.c ****  * @param arg the execution argument
 890:rt_thread/src/ipc.c ****  *
 891:rt_thread/src/ipc.c ****  * @return the error code
 892:rt_thread/src/ipc.c ****  */
 893:rt_thread/src/ipc.c **** rt_err_t rt_mutex_control(rt_mutex_t mutex, int cmd, void *arg)
 894:rt_thread/src/ipc.c **** {
 2099              		.loc 1 894 0
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 0
 2102              		@ frame_needed = 0, uses_anonymous_args = 0
 2103              	.LVL304:
 2104 0000 10B5     		push	{r4, lr}
 2105              	.LCFI18:
 2106              		.cfi_def_cfa_offset 8
 2107              		.cfi_offset 4, -8
 2108              		.cfi_offset 14, -4
 895:rt_thread/src/ipc.c ****     /* parameter check */
 896:rt_thread/src/ipc.c ****     RT_ASSERT(mutex != RT_NULL);
 2109              		.loc 1 896 0
 2110 0002 0446     		mov	r4, r0
 2111 0004 28B9     		cbnz	r0, .L149
 2112              		.loc 1 896 0 is_stmt 0 discriminator 1
 2113 0006 4FF46072 		mov	r2, #896
 2114              	.LVL305:
 2115 000a 0949     		ldr	r1, .L152
 2116              	.LVL306:
 2117 000c 0948     		ldr	r0, .L152+4
 2118              	.LVL307:
 2119 000e FFF7FEFF 		bl	rt_assert_handler
 2120              	.LVL308:
 2121              	.L149:
 897:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
 2122              		.loc 1 897 0 is_stmt 1
 2123 0012 2046     		mov	r0, r4
 2124 0014 FFF7FEFF 		bl	rt_object_get_type
 2125              	.LVL309:
 2126 0018 0328     		cmp	r0, #3
 2127 001a 05D0     		beq	.L150
 2128              		.loc 1 897 0 is_stmt 0 discriminator 1
 2129 001c 40F28132 		movw	r2, #897
 2130 0020 0349     		ldr	r1, .L152
 2131 0022 0548     		ldr	r0, .L152+8
 2132 0024 FFF7FEFF 		bl	rt_assert_handler
 2133              	.LVL310:
 2134              	.L150:
 898:rt_thread/src/ipc.c **** 
 899:rt_thread/src/ipc.c ****     return -RT_ERROR;
 900:rt_thread/src/ipc.c **** }
 2135              		.loc 1 900 0 is_stmt 1
 2136 0028 4FF0FF30 		mov	r0, #-1
 2137 002c 10BD     		pop	{r4, pc}
 2138              	.LVL311:
ARM GAS  /tmp/ccObKSes.s 			page 57


 2139              	.L153:
 2140 002e 00BF     		.align	2
 2141              	.L152:
 2142 0030 00000000 		.word	.LANCHOR13
 2143 0034 3C010000 		.word	.LC8
 2144 0038 50010000 		.word	.LC9
 2145              		.cfi_endproc
 2146              	.LFE33:
 2148              		.section	.text.rt_event_init,"ax",%progbits
 2149              		.align	2
 2150              		.global	rt_event_init
 2151              		.thumb
 2152              		.thumb_func
 2154              	rt_event_init:
 2155              	.LFB34:
 901:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mutex_control);
 902:rt_thread/src/ipc.c **** #endif /* end of RT_USING_MUTEX */
 903:rt_thread/src/ipc.c **** 
 904:rt_thread/src/ipc.c **** #ifdef RT_USING_EVENT
 905:rt_thread/src/ipc.c **** /**
 906:rt_thread/src/ipc.c ****  * This function will initialize an event and put it under control of resource
 907:rt_thread/src/ipc.c ****  * management.
 908:rt_thread/src/ipc.c ****  *
 909:rt_thread/src/ipc.c ****  * @param event the event object
 910:rt_thread/src/ipc.c ****  * @param name the name of event
 911:rt_thread/src/ipc.c ****  * @param flag the flag of event
 912:rt_thread/src/ipc.c ****  *
 913:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 914:rt_thread/src/ipc.c ****  */
 915:rt_thread/src/ipc.c **** rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
 916:rt_thread/src/ipc.c **** {
 2156              		.loc 1 916 0
 2157              		.cfi_startproc
 2158              		@ args = 0, pretend = 0, frame = 0
 2159              		@ frame_needed = 0, uses_anonymous_args = 0
 2160              	.LVL312:
 2161 0000 70B5     		push	{r4, r5, r6, lr}
 2162              	.LCFI19:
 2163              		.cfi_def_cfa_offset 16
 2164              		.cfi_offset 4, -16
 2165              		.cfi_offset 5, -12
 2166              		.cfi_offset 6, -8
 2167              		.cfi_offset 14, -4
 2168 0002 0E46     		mov	r6, r1
 2169 0004 1546     		mov	r5, r2
 917:rt_thread/src/ipc.c ****     /* parameter check */
 918:rt_thread/src/ipc.c ****     RT_ASSERT(event != RT_NULL);
 2170              		.loc 1 918 0
 2171 0006 0446     		mov	r4, r0
 2172 0008 28B9     		cbnz	r0, .L155
 2173              		.loc 1 918 0 is_stmt 0 discriminator 1
 2174 000a 40F29632 		movw	r2, #918
 2175              	.LVL313:
 2176 000e 0849     		ldr	r1, .L157
 2177              	.LVL314:
 2178 0010 0848     		ldr	r0, .L157+4
 2179              	.LVL315:
ARM GAS  /tmp/ccObKSes.s 			page 58


 2180 0012 FFF7FEFF 		bl	rt_assert_handler
 2181              	.LVL316:
 2182              	.L155:
 919:rt_thread/src/ipc.c **** 
 920:rt_thread/src/ipc.c ****     /* initialize object */
 921:rt_thread/src/ipc.c ****     rt_object_init(&(event->parent.parent), RT_Object_Class_Event, name);
 2183              		.loc 1 921 0 is_stmt 1
 2184 0016 3246     		mov	r2, r6
 2185 0018 0421     		movs	r1, #4
 2186 001a 2046     		mov	r0, r4
 2187 001c FFF7FEFF 		bl	rt_object_init
 2188              	.LVL317:
 922:rt_thread/src/ipc.c **** 
 923:rt_thread/src/ipc.c ****     /* set parent flag */
 924:rt_thread/src/ipc.c ****     event->parent.parent.flag = flag;
 2189              		.loc 1 924 0
 2190 0020 6572     		strb	r5, [r4, #9]
 2191              	.LVL318:
 2192              	.LBB224:
 2193              	.LBB225:
  64:rt_thread/src/ipc.c **** 
 2194              		.loc 1 64 0
 2195 0022 04F11403 		add	r3, r4, #20
 2196              	.LVL319:
 2197              	.LBB226:
 2198              	.LBB227:
  49:rt_thread/include/rtservice.h **** }
 2199              		.loc 2 49 0
 2200 0026 A361     		str	r3, [r4, #24]
 2201 0028 6361     		str	r3, [r4, #20]
 2202              	.LVL320:
 2203              	.LBE227:
 2204              	.LBE226:
 2205              	.LBE225:
 2206              	.LBE224:
 925:rt_thread/src/ipc.c **** 
 926:rt_thread/src/ipc.c ****     /* initialize ipc object */
 927:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(event->parent));
 928:rt_thread/src/ipc.c **** 
 929:rt_thread/src/ipc.c ****     /* initialize event */
 930:rt_thread/src/ipc.c ****     event->set = 0;
 2207              		.loc 1 930 0
 2208 002a 0020     		movs	r0, #0
 2209 002c E061     		str	r0, [r4, #28]
 931:rt_thread/src/ipc.c **** 
 932:rt_thread/src/ipc.c ****     return RT_EOK;
 933:rt_thread/src/ipc.c **** }
 2210              		.loc 1 933 0
 2211 002e 70BD     		pop	{r4, r5, r6, pc}
 2212              	.LVL321:
 2213              	.L158:
 2214              		.align	2
 2215              	.L157:
 2216 0030 00000000 		.word	.LANCHOR14
 2217 0034 08020000 		.word	.LC12
 2218              		.cfi_endproc
 2219              	.LFE34:
ARM GAS  /tmp/ccObKSes.s 			page 59


 2221              		.section	.text.rt_event_detach,"ax",%progbits
 2222              		.align	2
 2223              		.global	rt_event_detach
 2224              		.thumb
 2225              		.thumb_func
 2227              	rt_event_detach:
 2228              	.LFB35:
 934:rt_thread/src/ipc.c **** RTM_EXPORT(rt_event_init);
 935:rt_thread/src/ipc.c **** 
 936:rt_thread/src/ipc.c **** /**
 937:rt_thread/src/ipc.c ****  * This function will detach an event object from resource management
 938:rt_thread/src/ipc.c ****  *
 939:rt_thread/src/ipc.c ****  * @param event the event object
 940:rt_thread/src/ipc.c ****  *
 941:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
 942:rt_thread/src/ipc.c ****  */
 943:rt_thread/src/ipc.c **** rt_err_t rt_event_detach(rt_event_t event)
 944:rt_thread/src/ipc.c **** {
 2229              		.loc 1 944 0
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 0
 2232              		@ frame_needed = 0, uses_anonymous_args = 0
 2233              	.LVL322:
 2234 0000 70B5     		push	{r4, r5, r6, lr}
 2235              	.LCFI20:
 2236              		.cfi_def_cfa_offset 16
 2237              		.cfi_offset 4, -16
 2238              		.cfi_offset 5, -12
 2239              		.cfi_offset 6, -8
 2240              		.cfi_offset 14, -4
 945:rt_thread/src/ipc.c ****     /* parameter check */
 946:rt_thread/src/ipc.c ****     RT_ASSERT(event != RT_NULL);
 2241              		.loc 1 946 0
 2242 0002 0646     		mov	r6, r0
 2243 0004 28B9     		cbnz	r0, .L160
 2244              		.loc 1 946 0 is_stmt 0 discriminator 1
 2245 0006 40F2B232 		movw	r2, #946
 2246 000a 1849     		ldr	r1, .L166
 2247 000c 1848     		ldr	r0, .L166+4
 2248              	.LVL323:
 2249 000e FFF7FEFF 		bl	rt_assert_handler
 2250              	.LVL324:
 2251              	.L160:
 947:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
 2252              		.loc 1 947 0 is_stmt 1
 2253 0012 3046     		mov	r0, r6
 2254 0014 FFF7FEFF 		bl	rt_object_get_type
 2255              	.LVL325:
 2256 0018 0428     		cmp	r0, #4
 2257 001a 05D0     		beq	.L161
 2258              		.loc 1 947 0 is_stmt 0 discriminator 1
 2259 001c 40F2B332 		movw	r2, #947
 2260 0020 1249     		ldr	r1, .L166
 2261 0022 1448     		ldr	r0, .L166+8
 2262 0024 FFF7FEFF 		bl	rt_assert_handler
 2263              	.LVL326:
 2264              	.L161:
ARM GAS  /tmp/ccObKSes.s 			page 60


 948:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&event->parent.parent));
 2265              		.loc 1 948 0 is_stmt 1
 2266 0028 3046     		mov	r0, r6
 2267 002a FFF7FEFF 		bl	rt_object_is_systemobject
 2268              	.LVL327:
 2269 002e 28B9     		cbnz	r0, .L162
 2270              		.loc 1 948 0 is_stmt 0 discriminator 1
 2271 0030 4FF46D72 		mov	r2, #948
 2272 0034 0D49     		ldr	r1, .L166
 2273 0036 1048     		ldr	r0, .L166+12
 2274 0038 FFF7FEFF 		bl	rt_assert_handler
 2275              	.LVL328:
 2276              	.L162:
 949:rt_thread/src/ipc.c **** 
 950:rt_thread/src/ipc.c ****     /* resume all suspended thread */
 951:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(event->parent.suspend_thread));
 2277              		.loc 1 951 0 is_stmt 1
 2278 003c 06F11404 		add	r4, r6, #20
 2279              	.LVL329:
 2280 0040 0CE0     		b	.L163
 2281              	.L164:
 2282              	.LBB232:
 2283              	.LBB233:
 166:rt_thread/src/ipc.c **** 
 2284              		.loc 1 166 0
 2285 0042 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2286              	.LVL330:
 2287 0046 0546     		mov	r5, r0
 2288              	.LVL331:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 2289              		.loc 1 169 0
 2290 0048 2068     		ldr	r0, [r4]
 2291              	.LVL332:
 171:rt_thread/src/ipc.c **** 
 2292              		.loc 1 171 0
 2293 004a 4FF0FF33 		mov	r3, #-1
 2294 004e C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 2295              		.loc 1 178 0
 2296 0050 1438     		subs	r0, r0, #20
 2297              	.LVL333:
 2298 0052 FFF7FEFF 		bl	rt_thread_resume
 2299              	.LVL334:
 181:rt_thread/src/ipc.c ****     }
 2300              		.loc 1 181 0
 2301 0056 2846     		mov	r0, r5
 2302 0058 FFF7FEFF 		bl	rt_hw_interrupt_enable
 2303              	.LVL335:
 2304              	.L163:
 2305              	.LBB234:
 2306              	.LBB235:
 2307              		.loc 2 100 0
 2308 005c 2368     		ldr	r3, [r4]
 2309              	.LVL336:
 2310              	.LBE235:
 2311              	.LBE234:
 163:rt_thread/src/ipc.c ****     {
ARM GAS  /tmp/ccObKSes.s 			page 61


 2312              		.loc 1 163 0
 2313 005e 9C42     		cmp	r4, r3
 2314 0060 EFD1     		bne	.L164
 2315              	.LVL337:
 2316              	.LBE233:
 2317              	.LBE232:
 952:rt_thread/src/ipc.c **** 
 953:rt_thread/src/ipc.c ****     /* detach event object */
 954:rt_thread/src/ipc.c ****     rt_object_detach(&(event->parent.parent));
 2318              		.loc 1 954 0
 2319 0062 3046     		mov	r0, r6
 2320 0064 FFF7FEFF 		bl	rt_object_detach
 2321              	.LVL338:
 955:rt_thread/src/ipc.c **** 
 956:rt_thread/src/ipc.c ****     return RT_EOK;
 957:rt_thread/src/ipc.c **** }
 2322              		.loc 1 957 0
 2323 0068 0020     		movs	r0, #0
 2324 006a 70BD     		pop	{r4, r5, r6, pc}
 2325              	.LVL339:
 2326              	.L167:
 2327              		.align	2
 2328              	.L166:
 2329 006c 00000000 		.word	.LANCHOR15
 2330 0070 08020000 		.word	.LC12
 2331 0074 1C020000 		.word	.LC13
 2332 0078 60020000 		.word	.LC14
 2333              		.cfi_endproc
 2334              	.LFE35:
 2336              		.section	.text.rt_event_create,"ax",%progbits
 2337              		.align	2
 2338              		.global	rt_event_create
 2339              		.thumb
 2340              		.thumb_func
 2342              	rt_event_create:
 2343              	.LFB36:
 958:rt_thread/src/ipc.c **** RTM_EXPORT(rt_event_detach);
 959:rt_thread/src/ipc.c **** 
 960:rt_thread/src/ipc.c **** #ifdef RT_USING_HEAP
 961:rt_thread/src/ipc.c **** /**
 962:rt_thread/src/ipc.c ****  * This function will create an event object from system resource
 963:rt_thread/src/ipc.c ****  *
 964:rt_thread/src/ipc.c ****  * @param name the name of event
 965:rt_thread/src/ipc.c ****  * @param flag the flag of event
 966:rt_thread/src/ipc.c ****  *
 967:rt_thread/src/ipc.c ****  * @return the created event, RT_NULL on error happen
 968:rt_thread/src/ipc.c ****  */
 969:rt_thread/src/ipc.c **** rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
 970:rt_thread/src/ipc.c **** {
 2344              		.loc 1 970 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              	.LVL340:
 2349 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2350              	.LCFI21:
 2351              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccObKSes.s 			page 62


 2352              		.cfi_offset 3, -24
 2353              		.cfi_offset 4, -20
 2354              		.cfi_offset 5, -16
 2355              		.cfi_offset 6, -12
 2356              		.cfi_offset 7, -8
 2357              		.cfi_offset 14, -4
 2358 0002 0446     		mov	r4, r0
 2359 0004 0E46     		mov	r6, r1
 2360              	.LBB236:
 971:rt_thread/src/ipc.c ****     rt_event_t event;
 972:rt_thread/src/ipc.c **** 
 973:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 2361              		.loc 1 973 0
 2362 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2363              	.LVL341:
 2364 000a 0546     		mov	r5, r0
 2365              	.LVL342:
 2366 000c FFF7FEFF 		bl	rt_interrupt_get_nest
 2367              	.LVL343:
 2368 0010 50B1     		cbz	r0, .L169
 2369              		.loc 1 973 0 is_stmt 0 discriminator 1
 2370 0012 0E4F     		ldr	r7, .L172
 2371 0014 3946     		mov	r1, r7
 2372 0016 0E48     		ldr	r0, .L172+4
 2373 0018 FFF7FEFF 		bl	rt_kprintf
 2374              	.LVL344:
 2375 001c 40F2CD32 		movw	r2, #973
 2376 0020 3946     		mov	r1, r7
 2377 0022 0C48     		ldr	r0, .L172+8
 2378 0024 FFF7FEFF 		bl	rt_assert_handler
 2379              	.LVL345:
 2380              	.L169:
 2381              		.loc 1 973 0 discriminator 5
 2382 0028 2846     		mov	r0, r5
 2383 002a FFF7FEFF 		bl	rt_hw_interrupt_enable
 2384              	.LVL346:
 2385              	.LBE236:
 974:rt_thread/src/ipc.c **** 
 975:rt_thread/src/ipc.c ****     /* allocate object */
 976:rt_thread/src/ipc.c ****     event = (rt_event_t)rt_object_allocate(RT_Object_Class_Event, name);
 2386              		.loc 1 976 0 is_stmt 1 discriminator 5
 2387 002e 2146     		mov	r1, r4
 2388 0030 0420     		movs	r0, #4
 2389 0032 FFF7FEFF 		bl	rt_object_allocate
 2390              	.LVL347:
 977:rt_thread/src/ipc.c ****     if (event == RT_NULL)
 2391              		.loc 1 977 0 discriminator 5
 2392 0036 0346     		mov	r3, r0
 2393 0038 30B1     		cbz	r0, .L170
 978:rt_thread/src/ipc.c ****         return event;
 979:rt_thread/src/ipc.c **** 
 980:rt_thread/src/ipc.c ****     /* set parent */
 981:rt_thread/src/ipc.c ****     event->parent.parent.flag = flag;
 2394              		.loc 1 981 0
 2395 003a 4672     		strb	r6, [r0, #9]
 2396              	.LVL348:
 2397              	.LBB237:
ARM GAS  /tmp/ccObKSes.s 			page 63


 2398              	.LBB238:
  64:rt_thread/src/ipc.c **** 
 2399              		.loc 1 64 0
 2400 003c 00F11402 		add	r2, r0, #20
 2401              	.LVL349:
 2402              	.LBB239:
 2403              	.LBB240:
  49:rt_thread/include/rtservice.h **** }
 2404              		.loc 2 49 0
 2405 0040 8261     		str	r2, [r0, #24]
 2406 0042 4261     		str	r2, [r0, #20]
 2407              	.LVL350:
 2408              	.LBE240:
 2409              	.LBE239:
 2410              	.LBE238:
 2411              	.LBE237:
 982:rt_thread/src/ipc.c **** 
 983:rt_thread/src/ipc.c ****     /* initialize ipc object */
 984:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(event->parent));
 985:rt_thread/src/ipc.c **** 
 986:rt_thread/src/ipc.c ****     /* initialize event */
 987:rt_thread/src/ipc.c ****     event->set = 0;
 2412              		.loc 1 987 0
 2413 0044 0022     		movs	r2, #0
 2414 0046 C261     		str	r2, [r0, #28]
 2415              	.L170:
 988:rt_thread/src/ipc.c **** 
 989:rt_thread/src/ipc.c ****     return event;
 990:rt_thread/src/ipc.c **** }
 2416              		.loc 1 990 0
 2417 0048 1846     		mov	r0, r3
 2418              	.LVL351:
 2419 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2420              	.LVL352:
 2421              	.L173:
 2422              		.align	2
 2423              	.L172:
 2424 004c 00000000 		.word	.LANCHOR16
 2425 0050 9C000000 		.word	.LC4
 2426 0054 C4000000 		.word	.LC5
 2427              		.cfi_endproc
 2428              	.LFE36:
 2430              		.section	.text.rt_event_delete,"ax",%progbits
 2431              		.align	2
 2432              		.global	rt_event_delete
 2433              		.thumb
 2434              		.thumb_func
 2436              	rt_event_delete:
 2437              	.LFB37:
 991:rt_thread/src/ipc.c **** RTM_EXPORT(rt_event_create);
 992:rt_thread/src/ipc.c **** 
 993:rt_thread/src/ipc.c **** /**
 994:rt_thread/src/ipc.c ****  * This function will delete an event object and release the memory
 995:rt_thread/src/ipc.c ****  *
 996:rt_thread/src/ipc.c ****  * @param event the event object
 997:rt_thread/src/ipc.c ****  *
 998:rt_thread/src/ipc.c ****  * @return the error code
ARM GAS  /tmp/ccObKSes.s 			page 64


 999:rt_thread/src/ipc.c ****  */
1000:rt_thread/src/ipc.c **** rt_err_t rt_event_delete(rt_event_t event)
1001:rt_thread/src/ipc.c **** {
 2438              		.loc 1 1001 0
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 0
 2441              		@ frame_needed = 0, uses_anonymous_args = 0
 2442              	.LVL353:
 2443 0000 70B5     		push	{r4, r5, r6, lr}
 2444              	.LCFI22:
 2445              		.cfi_def_cfa_offset 16
 2446              		.cfi_offset 4, -16
 2447              		.cfi_offset 5, -12
 2448              		.cfi_offset 6, -8
 2449              		.cfi_offset 14, -4
1002:rt_thread/src/ipc.c ****     /* parameter check */
1003:rt_thread/src/ipc.c ****     RT_ASSERT(event != RT_NULL);
 2450              		.loc 1 1003 0
 2451 0002 0646     		mov	r6, r0
 2452 0004 28B9     		cbnz	r0, .L175
 2453              		.loc 1 1003 0 is_stmt 0 discriminator 1
 2454 0006 40F2EB32 		movw	r2, #1003
 2455 000a 2249     		ldr	r1, .L182
 2456 000c 2248     		ldr	r0, .L182+4
 2457              	.LVL354:
 2458 000e FFF7FEFF 		bl	rt_assert_handler
 2459              	.LVL355:
 2460              	.L175:
1004:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
 2461              		.loc 1 1004 0 is_stmt 1
 2462 0012 3046     		mov	r0, r6
 2463 0014 FFF7FEFF 		bl	rt_object_get_type
 2464              	.LVL356:
 2465 0018 0428     		cmp	r0, #4
 2466 001a 05D0     		beq	.L176
 2467              		.loc 1 1004 0 is_stmt 0 discriminator 1
 2468 001c 4FF47B72 		mov	r2, #1004
 2469 0020 1C49     		ldr	r1, .L182
 2470 0022 1E48     		ldr	r0, .L182+8
 2471 0024 FFF7FEFF 		bl	rt_assert_handler
 2472              	.LVL357:
 2473              	.L176:
1005:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&event->parent.parent) == RT_FALSE);
 2474              		.loc 1 1005 0 is_stmt 1
 2475 0028 3046     		mov	r0, r6
 2476 002a FFF7FEFF 		bl	rt_object_is_systemobject
 2477              	.LVL358:
 2478 002e 28B1     		cbz	r0, .L177
 2479              		.loc 1 1005 0 is_stmt 0 discriminator 1
 2480 0030 40F2ED32 		movw	r2, #1005
 2481 0034 1749     		ldr	r1, .L182
 2482 0036 1A48     		ldr	r0, .L182+12
 2483 0038 FFF7FEFF 		bl	rt_assert_handler
 2484              	.LVL359:
 2485              	.L177:
 2486              	.LBB246:
1006:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 65


1007:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 2487              		.loc 1 1007 0 is_stmt 1
 2488 003c FFF7FEFF 		bl	rt_hw_interrupt_disable
 2489              	.LVL360:
 2490 0040 0446     		mov	r4, r0
 2491              	.LVL361:
 2492 0042 FFF7FEFF 		bl	rt_interrupt_get_nest
 2493              	.LVL362:
 2494 0046 50B1     		cbz	r0, .L178
 2495              		.loc 1 1007 0 is_stmt 0 discriminator 1
 2496 0048 124D     		ldr	r5, .L182
 2497 004a 2946     		mov	r1, r5
 2498 004c 1548     		ldr	r0, .L182+16
 2499 004e FFF7FEFF 		bl	rt_kprintf
 2500              	.LVL363:
 2501 0052 40F2EF32 		movw	r2, #1007
 2502 0056 2946     		mov	r1, r5
 2503 0058 1348     		ldr	r0, .L182+20
 2504 005a FFF7FEFF 		bl	rt_assert_handler
 2505              	.LVL364:
 2506              	.L178:
 2507              		.loc 1 1007 0 discriminator 5
 2508 005e 2046     		mov	r0, r4
 2509 0060 FFF7FEFF 		bl	rt_hw_interrupt_enable
 2510              	.LVL365:
 2511              	.LBE246:
1008:rt_thread/src/ipc.c **** 
1009:rt_thread/src/ipc.c ****     /* resume all suspended thread */
1010:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(event->parent.suspend_thread));
 2512              		.loc 1 1010 0 is_stmt 1 discriminator 5
 2513 0064 06F11404 		add	r4, r6, #20
 2514              	.LVL366:
 2515 0068 0CE0     		b	.L179
 2516              	.L180:
 2517              	.LBB247:
 2518              	.LBB248:
 166:rt_thread/src/ipc.c **** 
 2519              		.loc 1 166 0
 2520 006a FFF7FEFF 		bl	rt_hw_interrupt_disable
 2521              	.LVL367:
 2522 006e 0546     		mov	r5, r0
 2523              	.LVL368:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 2524              		.loc 1 169 0
 2525 0070 2068     		ldr	r0, [r4]
 2526              	.LVL369:
 171:rt_thread/src/ipc.c **** 
 2527              		.loc 1 171 0
 2528 0072 4FF0FF33 		mov	r3, #-1
 2529 0076 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 2530              		.loc 1 178 0
 2531 0078 1438     		subs	r0, r0, #20
 2532              	.LVL370:
 2533 007a FFF7FEFF 		bl	rt_thread_resume
 2534              	.LVL371:
 181:rt_thread/src/ipc.c ****     }
ARM GAS  /tmp/ccObKSes.s 			page 66


 2535              		.loc 1 181 0
 2536 007e 2846     		mov	r0, r5
 2537 0080 FFF7FEFF 		bl	rt_hw_interrupt_enable
 2538              	.LVL372:
 2539              	.L179:
 2540              	.LBB249:
 2541              	.LBB250:
 2542              		.loc 2 100 0
 2543 0084 2368     		ldr	r3, [r4]
 2544              	.LVL373:
 2545              	.LBE250:
 2546              	.LBE249:
 163:rt_thread/src/ipc.c ****     {
 2547              		.loc 1 163 0
 2548 0086 9C42     		cmp	r4, r3
 2549 0088 EFD1     		bne	.L180
 2550              	.LVL374:
 2551              	.LBE248:
 2552              	.LBE247:
1011:rt_thread/src/ipc.c **** 
1012:rt_thread/src/ipc.c ****     /* delete event object */
1013:rt_thread/src/ipc.c ****     rt_object_delete(&(event->parent.parent));
 2553              		.loc 1 1013 0
 2554 008a 3046     		mov	r0, r6
 2555 008c FFF7FEFF 		bl	rt_object_delete
 2556              	.LVL375:
1014:rt_thread/src/ipc.c **** 
1015:rt_thread/src/ipc.c ****     return RT_EOK;
1016:rt_thread/src/ipc.c **** }
 2557              		.loc 1 1016 0
 2558 0090 0020     		movs	r0, #0
 2559 0092 70BD     		pop	{r4, r5, r6, pc}
 2560              	.LVL376:
 2561              	.L183:
 2562              		.align	2
 2563              	.L182:
 2564 0094 00000000 		.word	.LANCHOR17
 2565 0098 08020000 		.word	.LC12
 2566 009c 1C020000 		.word	.LC13
 2567 00a0 94020000 		.word	.LC15
 2568 00a4 9C000000 		.word	.LC4
 2569 00a8 C4000000 		.word	.LC5
 2570              		.cfi_endproc
 2571              	.LFE37:
 2573              		.section	.text.rt_event_send,"ax",%progbits
 2574              		.align	2
 2575              		.global	rt_event_send
 2576              		.thumb
 2577              		.thumb_func
 2579              	rt_event_send:
 2580              	.LFB38:
1017:rt_thread/src/ipc.c **** RTM_EXPORT(rt_event_delete);
1018:rt_thread/src/ipc.c **** #endif
1019:rt_thread/src/ipc.c **** 
1020:rt_thread/src/ipc.c **** /**
1021:rt_thread/src/ipc.c ****  * This function will send an event to the event object, if there are threads
1022:rt_thread/src/ipc.c ****  * suspended on event object, it will be waked up.
ARM GAS  /tmp/ccObKSes.s 			page 67


1023:rt_thread/src/ipc.c ****  *
1024:rt_thread/src/ipc.c ****  * @param event the event object
1025:rt_thread/src/ipc.c ****  * @param set the event set
1026:rt_thread/src/ipc.c ****  *
1027:rt_thread/src/ipc.c ****  * @return the error code
1028:rt_thread/src/ipc.c ****  */
1029:rt_thread/src/ipc.c **** rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
1030:rt_thread/src/ipc.c **** {
 2581              		.loc 1 1030 0
 2582              		.cfi_startproc
 2583              		@ args = 0, pretend = 0, frame = 0
 2584              		@ frame_needed = 0, uses_anonymous_args = 0
 2585              	.LVL377:
 2586 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2587              	.LCFI23:
 2588              		.cfi_def_cfa_offset 24
 2589              		.cfi_offset 4, -24
 2590              		.cfi_offset 5, -20
 2591              		.cfi_offset 6, -16
 2592              		.cfi_offset 7, -12
 2593              		.cfi_offset 8, -8
 2594              		.cfi_offset 14, -4
 2595 0004 0D46     		mov	r5, r1
1031:rt_thread/src/ipc.c ****     struct rt_list_node *n;
1032:rt_thread/src/ipc.c ****     struct rt_thread *thread;
1033:rt_thread/src/ipc.c ****     register rt_ubase_t level;
1034:rt_thread/src/ipc.c ****     register rt_base_t status;
1035:rt_thread/src/ipc.c ****     rt_bool_t need_schedule;
1036:rt_thread/src/ipc.c **** 
1037:rt_thread/src/ipc.c ****     /* parameter check */
1038:rt_thread/src/ipc.c ****     RT_ASSERT(event != RT_NULL);
 2596              		.loc 1 1038 0
 2597 0006 0446     		mov	r4, r0
 2598 0008 28B9     		cbnz	r0, .L185
 2599              		.loc 1 1038 0 is_stmt 0 discriminator 1
 2600 000a 40F20E42 		movw	r2, #1038
 2601 000e 3249     		ldr	r1, .L203
 2602              	.LVL378:
 2603 0010 3248     		ldr	r0, .L203+4
 2604              	.LVL379:
 2605 0012 FFF7FEFF 		bl	rt_assert_handler
 2606              	.LVL380:
 2607              	.L185:
1039:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
 2608              		.loc 1 1039 0 is_stmt 1
 2609 0016 2046     		mov	r0, r4
 2610 0018 FFF7FEFF 		bl	rt_object_get_type
 2611              	.LVL381:
 2612 001c 0428     		cmp	r0, #4
 2613 001e 05D0     		beq	.L186
 2614              		.loc 1 1039 0 is_stmt 0 discriminator 1
 2615 0020 40F20F42 		movw	r2, #1039
 2616 0024 2C49     		ldr	r1, .L203
 2617 0026 2E48     		ldr	r0, .L203+8
 2618 0028 FFF7FEFF 		bl	rt_assert_handler
 2619              	.LVL382:
 2620              	.L186:
ARM GAS  /tmp/ccObKSes.s 			page 68


1040:rt_thread/src/ipc.c **** 
1041:rt_thread/src/ipc.c ****     if (set == 0)
 2621              		.loc 1 1041 0 is_stmt 1
 2622 002c 002D     		cmp	r5, #0
 2623 002e 4BD0     		beq	.L196
 2624              	.LVL383:
1042:rt_thread/src/ipc.c ****         return -RT_ERROR;
1043:rt_thread/src/ipc.c **** 
1044:rt_thread/src/ipc.c ****     need_schedule = RT_FALSE;
1045:rt_thread/src/ipc.c **** 
1046:rt_thread/src/ipc.c ****     /* disable interrupt */
1047:rt_thread/src/ipc.c ****     level = rt_hw_interrupt_disable();
 2625              		.loc 1 1047 0
 2626 0030 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2627              	.LVL384:
 2628 0034 8046     		mov	r8, r0
 2629              	.LVL385:
1048:rt_thread/src/ipc.c **** 
1049:rt_thread/src/ipc.c ****     /* set event */
1050:rt_thread/src/ipc.c ****     event->set |= set;
 2630              		.loc 1 1050 0
 2631 0036 E369     		ldr	r3, [r4, #28]
 2632 0038 1D43     		orrs	r5, r5, r3
 2633              	.LVL386:
 2634 003a E561     		str	r5, [r4, #28]
1051:rt_thread/src/ipc.c **** 
1052:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(event->parent.parent)));
 2635              		.loc 1 1052 0
 2636 003c 294B     		ldr	r3, .L203+12
 2637 003e 1B68     		ldr	r3, [r3]
 2638 0040 0BB1     		cbz	r3, .L188
 2639              		.loc 1 1052 0 is_stmt 0 discriminator 1
 2640 0042 2046     		mov	r0, r4
 2641              	.LVL387:
 2642 0044 9847     		blx	r3
 2643              	.LVL388:
 2644              	.L188:
1053:rt_thread/src/ipc.c **** 
1054:rt_thread/src/ipc.c ****     if (!rt_list_isempty(&event->parent.suspend_thread))
 2645              		.loc 1 1054 0 is_stmt 1
 2646 0046 04F11406 		add	r6, r4, #20
 2647              	.LVL389:
 2648              	.LBB251:
 2649              	.LBB252:
 2650              		.loc 2 100 0
 2651 004a 6369     		ldr	r3, [r4, #20]
 2652              	.LVL390:
 2653              	.LBE252:
 2654              	.LBE251:
 2655              		.loc 1 1054 0
 2656 004c 9E42     		cmp	r6, r3
 2657 004e 2FD1     		bne	.L197
1044:rt_thread/src/ipc.c **** 
 2658              		.loc 1 1044 0
 2659 0050 0027     		movs	r7, #0
 2660 0052 30E0     		b	.L190
 2661              	.LVL391:
ARM GAS  /tmp/ccObKSes.s 			page 69


 2662              	.L195:
1055:rt_thread/src/ipc.c ****     {
1056:rt_thread/src/ipc.c ****         /* search thread list to resume thread */
1057:rt_thread/src/ipc.c ****         n = event->parent.suspend_thread.next;
1058:rt_thread/src/ipc.c ****         while (n != &(event->parent.suspend_thread))
1059:rt_thread/src/ipc.c ****         {
1060:rt_thread/src/ipc.c ****             /* get thread */
1061:rt_thread/src/ipc.c ****             thread = rt_list_entry(n, struct rt_thread, tlist);
 2663              		.loc 1 1061 0
 2664 0054 A3F11400 		sub	r0, r3, #20
 2665              	.LVL392:
1062:rt_thread/src/ipc.c **** 
1063:rt_thread/src/ipc.c ****             status = -RT_ERROR;
1064:rt_thread/src/ipc.c ****             if (thread->event_info & RT_EVENT_FLAG_AND)
 2666              		.loc 1 1064 0
 2667 0058 93F82C20 		ldrb	r2, [r3, #44]	@ zero_extendqisi2
 2668 005c 12F0010F 		tst	r2, #1
 2669 0060 06D0     		beq	.L191
1065:rt_thread/src/ipc.c ****             {
1066:rt_thread/src/ipc.c ****                 if ((thread->event_set & event->set) == thread->event_set)
 2670              		.loc 1 1066 0
 2671 0062 996A     		ldr	r1, [r3, #40]
 2672 0064 E569     		ldr	r5, [r4, #28]
 2673 0066 A943     		bics	r1, r1, r5
 2674 0068 0CD0     		beq	.L198
1063:rt_thread/src/ipc.c ****             if (thread->event_info & RT_EVENT_FLAG_AND)
 2675              		.loc 1 1063 0
 2676 006a 4FF0FF31 		mov	r1, #-1
 2677 006e 10E0     		b	.L192
 2678              	.L191:
1067:rt_thread/src/ipc.c ****                 {
1068:rt_thread/src/ipc.c ****                     /* received an AND event */
1069:rt_thread/src/ipc.c ****                     status = RT_EOK;
1070:rt_thread/src/ipc.c ****                 }
1071:rt_thread/src/ipc.c ****             }
1072:rt_thread/src/ipc.c ****             else if (thread->event_info & RT_EVENT_FLAG_OR)
 2679              		.loc 1 1072 0
 2680 0070 12F0020F 		tst	r2, #2
 2681 0074 08D0     		beq	.L199
1073:rt_thread/src/ipc.c ****             {
1074:rt_thread/src/ipc.c ****                 if (thread->event_set & event->set)
 2682              		.loc 1 1074 0
 2683 0076 996A     		ldr	r1, [r3, #40]
 2684 0078 E569     		ldr	r5, [r4, #28]
 2685 007a 2940     		ands	r1, r1, r5
 2686 007c 07D0     		beq	.L200
1075:rt_thread/src/ipc.c ****                 {
1076:rt_thread/src/ipc.c ****                     /* save the received event set */
1077:rt_thread/src/ipc.c ****                     thread->event_set = thread->event_set & event->set;
 2687              		.loc 1 1077 0
 2688 007e 9962     		str	r1, [r3, #40]
 2689              	.LVL393:
1078:rt_thread/src/ipc.c **** 
1079:rt_thread/src/ipc.c ****                     /* received an OR event */
1080:rt_thread/src/ipc.c ****                     status = RT_EOK;
 2690              		.loc 1 1080 0
 2691 0080 0021     		movs	r1, #0
ARM GAS  /tmp/ccObKSes.s 			page 70


 2692 0082 06E0     		b	.L192
 2693              	.LVL394:
 2694              	.L198:
1069:rt_thread/src/ipc.c ****                 }
 2695              		.loc 1 1069 0
 2696 0084 0021     		movs	r1, #0
 2697 0086 04E0     		b	.L192
 2698              	.L199:
1063:rt_thread/src/ipc.c ****             if (thread->event_info & RT_EVENT_FLAG_AND)
 2699              		.loc 1 1063 0
 2700 0088 4FF0FF31 		mov	r1, #-1
 2701 008c 01E0     		b	.L192
 2702              	.L200:
 2703 008e 4FF0FF31 		mov	r1, #-1
 2704              	.LVL395:
 2705              	.L192:
1081:rt_thread/src/ipc.c ****                 }
1082:rt_thread/src/ipc.c ****             }
1083:rt_thread/src/ipc.c **** 
1084:rt_thread/src/ipc.c ****             /* move node to the next */
1085:rt_thread/src/ipc.c ****             n = n->next;
 2706              		.loc 1 1085 0
 2707 0092 1D68     		ldr	r5, [r3]
 2708              	.LVL396:
1086:rt_thread/src/ipc.c **** 
1087:rt_thread/src/ipc.c ****             /* condition is satisfied, resume thread */
1088:rt_thread/src/ipc.c ****             if (status == RT_EOK)
 2709              		.loc 1 1088 0
 2710 0094 51B9     		cbnz	r1, .L193
1089:rt_thread/src/ipc.c ****             {
1090:rt_thread/src/ipc.c ****                 /* clear event */
1091:rt_thread/src/ipc.c ****                 if (thread->event_info & RT_EVENT_FLAG_CLEAR)
 2711              		.loc 1 1091 0
 2712 0096 12F0040F 		tst	r2, #4
 2713 009a 04D0     		beq	.L194
1092:rt_thread/src/ipc.c ****                     event->set &= ~thread->event_set;
 2714              		.loc 1 1092 0
 2715 009c 9A6A     		ldr	r2, [r3, #40]
 2716 009e E369     		ldr	r3, [r4, #28]
 2717 00a0 23EA0203 		bic	r3, r3, r2
 2718 00a4 E361     		str	r3, [r4, #28]
 2719              	.L194:
1093:rt_thread/src/ipc.c **** 
1094:rt_thread/src/ipc.c ****                 /* resume thread, and thread list breaks out */
1095:rt_thread/src/ipc.c ****                 rt_thread_resume(thread);
 2720              		.loc 1 1095 0
 2721 00a6 FFF7FEFF 		bl	rt_thread_resume
 2722              	.LVL397:
1096:rt_thread/src/ipc.c **** 
1097:rt_thread/src/ipc.c ****                 /* need do a scheduling */
1098:rt_thread/src/ipc.c ****                 need_schedule = RT_TRUE;
 2723              		.loc 1 1098 0
 2724 00aa 0127     		movs	r7, #1
 2725              	.LVL398:
 2726              	.L193:
 2727 00ac 2B46     		mov	r3, r5
 2728 00ae 00E0     		b	.L189
ARM GAS  /tmp/ccObKSes.s 			page 71


 2729              	.LVL399:
 2730              	.L197:
 2731 00b0 0027     		movs	r7, #0
 2732              	.LVL400:
 2733              	.L189:
1058:rt_thread/src/ipc.c ****         {
 2734              		.loc 1 1058 0
 2735 00b2 B342     		cmp	r3, r6
 2736 00b4 CED1     		bne	.L195
 2737              	.LVL401:
 2738              	.L190:
1099:rt_thread/src/ipc.c ****             }
1100:rt_thread/src/ipc.c ****         }
1101:rt_thread/src/ipc.c ****     }
1102:rt_thread/src/ipc.c **** 
1103:rt_thread/src/ipc.c ****     /* enable interrupt */
1104:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(level);
 2739              		.loc 1 1104 0
 2740 00b6 4046     		mov	r0, r8
 2741 00b8 FFF7FEFF 		bl	rt_hw_interrupt_enable
 2742              	.LVL402:
1105:rt_thread/src/ipc.c **** 
1106:rt_thread/src/ipc.c ****     /* do a schedule */
1107:rt_thread/src/ipc.c ****     if (need_schedule == RT_TRUE)
 2743              		.loc 1 1107 0
 2744 00bc 47B1     		cbz	r7, .L201
1108:rt_thread/src/ipc.c ****         rt_schedule();
 2745              		.loc 1 1108 0
 2746 00be FFF7FEFF 		bl	rt_schedule
 2747              	.LVL403:
1109:rt_thread/src/ipc.c **** 
1110:rt_thread/src/ipc.c ****     return RT_EOK;
 2748              		.loc 1 1110 0
 2749 00c2 0020     		movs	r0, #0
 2750 00c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2751              	.LVL404:
 2752              	.L196:
1042:rt_thread/src/ipc.c **** 
 2753              		.loc 1 1042 0
 2754 00c8 4FF0FF30 		mov	r0, #-1
 2755 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2756              	.LVL405:
 2757              	.L201:
 2758              		.loc 1 1110 0
 2759 00d0 0020     		movs	r0, #0
1111:rt_thread/src/ipc.c **** }
 2760              		.loc 1 1111 0
 2761 00d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2762              	.LVL406:
 2763              	.L204:
 2764 00d6 00BF     		.align	2
 2765              	.L203:
 2766 00d8 00000000 		.word	.LANCHOR18
 2767 00dc 08020000 		.word	.LC12
 2768 00e0 1C020000 		.word	.LC13
 2769 00e4 00000000 		.word	rt_object_put_hook
 2770              		.cfi_endproc
ARM GAS  /tmp/ccObKSes.s 			page 72


 2771              	.LFE38:
 2773              		.section	.text.rt_event_recv,"ax",%progbits
 2774              		.align	2
 2775              		.global	rt_event_recv
 2776              		.thumb
 2777              		.thumb_func
 2779              	rt_event_recv:
 2780              	.LFB39:
1112:rt_thread/src/ipc.c **** RTM_EXPORT(rt_event_send);
1113:rt_thread/src/ipc.c **** 
1114:rt_thread/src/ipc.c **** /**
1115:rt_thread/src/ipc.c ****  * This function will receive an event from event object, if the event is
1116:rt_thread/src/ipc.c ****  * unavailable, the thread shall wait for a specified time.
1117:rt_thread/src/ipc.c ****  *
1118:rt_thread/src/ipc.c ****  * @param event the fast event object
1119:rt_thread/src/ipc.c ****  * @param set the interested event set
1120:rt_thread/src/ipc.c ****  * @param option the receive option, either RT_EVENT_FLAG_AND or
1121:rt_thread/src/ipc.c ****  *        RT_EVENT_FLAG_OR should be set.
1122:rt_thread/src/ipc.c ****  * @param timeout the waiting time
1123:rt_thread/src/ipc.c ****  * @param recved the received event, if you don't care, RT_NULL can be set.
1124:rt_thread/src/ipc.c ****  *
1125:rt_thread/src/ipc.c ****  * @return the error code
1126:rt_thread/src/ipc.c ****  */
1127:rt_thread/src/ipc.c **** rt_err_t rt_event_recv(rt_event_t   event,
1128:rt_thread/src/ipc.c ****                        rt_uint32_t  set,
1129:rt_thread/src/ipc.c ****                        rt_uint8_t   option,
1130:rt_thread/src/ipc.c ****                        rt_int32_t   timeout,
1131:rt_thread/src/ipc.c ****                        rt_uint32_t *recved)
1132:rt_thread/src/ipc.c **** {
 2781              		.loc 1 1132 0
 2782              		.cfi_startproc
 2783              		@ args = 4, pretend = 0, frame = 8
 2784              		@ frame_needed = 0, uses_anonymous_args = 0
 2785              	.LVL407:
 2786 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2787              	.LCFI24:
 2788              		.cfi_def_cfa_offset 28
 2789              		.cfi_offset 4, -28
 2790              		.cfi_offset 5, -24
 2791              		.cfi_offset 6, -20
 2792              		.cfi_offset 7, -16
 2793              		.cfi_offset 8, -12
 2794              		.cfi_offset 9, -8
 2795              		.cfi_offset 14, -4
 2796 0004 83B0     		sub	sp, sp, #12
 2797              	.LCFI25:
 2798              		.cfi_def_cfa_offset 40
 2799 0006 0446     		mov	r4, r0
 2800 0008 0E46     		mov	r6, r1
 2801 000a 1746     		mov	r7, r2
 2802 000c 0193     		str	r3, [sp, #4]
 2803              	.LBB264:
1133:rt_thread/src/ipc.c ****     struct rt_thread *thread;
1134:rt_thread/src/ipc.c ****     register rt_ubase_t level;
1135:rt_thread/src/ipc.c ****     register rt_base_t status;
1136:rt_thread/src/ipc.c **** 
1137:rt_thread/src/ipc.c ****     RT_DEBUG_IN_THREAD_CONTEXT;
ARM GAS  /tmp/ccObKSes.s 			page 73


 2804              		.loc 1 1137 0
 2805 000e FFF7FEFF 		bl	rt_hw_interrupt_disable
 2806              	.LVL408:
 2807 0012 0546     		mov	r5, r0
 2808              	.LVL409:
 2809 0014 FFF7FEFF 		bl	rt_thread_self
 2810              	.LVL410:
 2811 0018 58B9     		cbnz	r0, .L206
 2812              		.loc 1 1137 0 is_stmt 0 discriminator 1
 2813 001a DFF8C081 		ldr	r8, .L232+12
 2814 001e 4146     		mov	r1, r8
 2815 0020 6B48     		ldr	r0, .L232
 2816 0022 FFF7FEFF 		bl	rt_kprintf
 2817              	.LVL411:
 2818 0026 40F27142 		movw	r2, #1137
 2819 002a 4146     		mov	r1, r8
 2820 002c 6948     		ldr	r0, .L232+4
 2821 002e FFF7FEFF 		bl	rt_assert_handler
 2822              	.LVL412:
 2823              	.L206:
 2824              	.LBB265:
 2825              		.loc 1 1137 0 discriminator 5
 2826 0032 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2827              	.LVL413:
 2828 0036 8046     		mov	r8, r0
 2829              	.LVL414:
 2830 0038 FFF7FEFF 		bl	rt_interrupt_get_nest
 2831              	.LVL415:
 2832 003c 58B1     		cbz	r0, .L207
 2833              		.loc 1 1137 0 discriminator 6
 2834 003e DFF89C91 		ldr	r9, .L232+12
 2835 0042 4946     		mov	r1, r9
 2836 0044 6448     		ldr	r0, .L232+8
 2837 0046 FFF7FEFF 		bl	rt_kprintf
 2838              	.LVL416:
 2839 004a 40F27142 		movw	r2, #1137
 2840 004e 4946     		mov	r1, r9
 2841 0050 6048     		ldr	r0, .L232+4
 2842 0052 FFF7FEFF 		bl	rt_assert_handler
 2843              	.LVL417:
 2844              	.L207:
 2845              		.loc 1 1137 0 discriminator 10
 2846 0056 4046     		mov	r0, r8
 2847 0058 FFF7FEFF 		bl	rt_hw_interrupt_enable
 2848              	.LVL418:
 2849              	.LBE265:
 2850 005c 2846     		mov	r0, r5
 2851 005e FFF7FEFF 		bl	rt_hw_interrupt_enable
 2852              	.LVL419:
 2853              	.LBE264:
1138:rt_thread/src/ipc.c **** 
1139:rt_thread/src/ipc.c ****     /* parameter check */
1140:rt_thread/src/ipc.c ****     RT_ASSERT(event != RT_NULL);
 2854              		.loc 1 1140 0 is_stmt 1 discriminator 10
 2855 0062 2CB9     		cbnz	r4, .L208
 2856              		.loc 1 1140 0 is_stmt 0 discriminator 1
 2857 0064 40F27442 		movw	r2, #1140
ARM GAS  /tmp/ccObKSes.s 			page 74


 2858 0068 5C49     		ldr	r1, .L232+12
 2859 006a 5D48     		ldr	r0, .L232+16
 2860 006c FFF7FEFF 		bl	rt_assert_handler
 2861              	.LVL420:
 2862              	.L208:
1141:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
 2863              		.loc 1 1141 0 is_stmt 1
 2864 0070 2046     		mov	r0, r4
 2865 0072 FFF7FEFF 		bl	rt_object_get_type
 2866              	.LVL421:
 2867 0076 0428     		cmp	r0, #4
 2868 0078 05D0     		beq	.L209
 2869              		.loc 1 1141 0 is_stmt 0 discriminator 1
 2870 007a 40F27542 		movw	r2, #1141
 2871 007e 5749     		ldr	r1, .L232+12
 2872 0080 5848     		ldr	r0, .L232+20
 2873 0082 FFF7FEFF 		bl	rt_assert_handler
 2874              	.LVL422:
 2875              	.L209:
1142:rt_thread/src/ipc.c **** 
1143:rt_thread/src/ipc.c ****     if (set == 0)
 2876              		.loc 1 1143 0 is_stmt 1
 2877 0086 002E     		cmp	r6, #0
 2878 0088 00F09C80 		beq	.L228
 2879              	.LVL423:
1144:rt_thread/src/ipc.c ****         return -RT_ERROR;
1145:rt_thread/src/ipc.c **** 
1146:rt_thread/src/ipc.c ****     /* initialize status */
1147:rt_thread/src/ipc.c ****     status = -RT_ERROR;
1148:rt_thread/src/ipc.c ****     /* get current thread */
1149:rt_thread/src/ipc.c ****     thread = rt_thread_self();
 2880              		.loc 1 1149 0
 2881 008c FFF7FEFF 		bl	rt_thread_self
 2882              	.LVL424:
 2883 0090 0546     		mov	r5, r0
 2884              	.LVL425:
1150:rt_thread/src/ipc.c ****     /* reset thread error */
1151:rt_thread/src/ipc.c ****     thread->error = RT_EOK;
 2885              		.loc 1 1151 0
 2886 0092 0023     		movs	r3, #0
 2887 0094 0363     		str	r3, [r0, #48]
1152:rt_thread/src/ipc.c **** 
1153:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(event->parent.parent)));
 2888              		.loc 1 1153 0
 2889 0096 544B     		ldr	r3, .L232+24
 2890 0098 1B68     		ldr	r3, [r3]
 2891 009a 0BB1     		cbz	r3, .L211
 2892              		.loc 1 1153 0 is_stmt 0 discriminator 1
 2893 009c 2046     		mov	r0, r4
 2894              	.LVL426:
 2895 009e 9847     		blx	r3
 2896              	.LVL427:
 2897              	.L211:
1154:rt_thread/src/ipc.c **** 
1155:rt_thread/src/ipc.c ****     /* disable interrupt */
1156:rt_thread/src/ipc.c ****     level = rt_hw_interrupt_disable();
 2898              		.loc 1 1156 0 is_stmt 1
ARM GAS  /tmp/ccObKSes.s 			page 75


 2899 00a0 FFF7FEFF 		bl	rt_hw_interrupt_disable
 2900              	.LVL428:
 2901 00a4 8046     		mov	r8, r0
 2902              	.LVL429:
 2903 00a6 8146     		mov	r9, r0
 2904              	.LVL430:
1157:rt_thread/src/ipc.c **** 
1158:rt_thread/src/ipc.c ****     /* check event set */
1159:rt_thread/src/ipc.c ****     if (option & RT_EVENT_FLAG_AND)
 2905              		.loc 1 1159 0
 2906 00a8 17F0010F 		tst	r7, #1
 2907 00ac 06D0     		beq	.L212
1160:rt_thread/src/ipc.c ****     {
1161:rt_thread/src/ipc.c ****         if ((event->set & set) == set)
 2908              		.loc 1 1161 0
 2909 00ae E369     		ldr	r3, [r4, #28]
 2910 00b0 36EA0303 		bics	r3, r6, r3
 2911 00b4 14D0     		beq	.L229
1147:rt_thread/src/ipc.c ****     /* get current thread */
 2912              		.loc 1 1147 0
 2913 00b6 4FF0FF33 		mov	r3, #-1
 2914 00ba 14E0     		b	.L213
 2915              	.L212:
1162:rt_thread/src/ipc.c ****             status = RT_EOK;
1163:rt_thread/src/ipc.c ****     }
1164:rt_thread/src/ipc.c ****     else if (option & RT_EVENT_FLAG_OR)
 2916              		.loc 1 1164 0
 2917 00bc 17F0020F 		tst	r7, #2
 2918 00c0 05D0     		beq	.L214
1165:rt_thread/src/ipc.c ****     {
1166:rt_thread/src/ipc.c ****         if (event->set & set)
 2919              		.loc 1 1166 0
 2920 00c2 E369     		ldr	r3, [r4, #28]
 2921 00c4 1E42     		tst	r6, r3
 2922 00c6 0DD1     		bne	.L230
1147:rt_thread/src/ipc.c ****     /* get current thread */
 2923              		.loc 1 1147 0
 2924 00c8 4FF0FF33 		mov	r3, #-1
 2925 00cc 0BE0     		b	.L213
 2926              	.L214:
1167:rt_thread/src/ipc.c ****             status = RT_EOK;
1168:rt_thread/src/ipc.c ****     }
1169:rt_thread/src/ipc.c ****     else
1170:rt_thread/src/ipc.c ****     {
1171:rt_thread/src/ipc.c ****         /* either RT_EVENT_FLAG_AND or RT_EVENT_FLAG_OR should be set */
1172:rt_thread/src/ipc.c ****         RT_ASSERT(0);
 2927              		.loc 1 1172 0 discriminator 1
 2928 00ce 40F29442 		movw	r2, #1172
 2929 00d2 4249     		ldr	r1, .L232+12
 2930 00d4 3F48     		ldr	r0, .L232+4
 2931              	.LVL431:
 2932 00d6 FFF7FEFF 		bl	rt_assert_handler
 2933              	.LVL432:
1147:rt_thread/src/ipc.c ****     /* get current thread */
 2934              		.loc 1 1147 0 discriminator 1
 2935 00da 4FF0FF33 		mov	r3, #-1
 2936 00de 02E0     		b	.L213
ARM GAS  /tmp/ccObKSes.s 			page 76


 2937              	.LVL433:
 2938              	.L229:
1162:rt_thread/src/ipc.c ****     }
 2939              		.loc 1 1162 0
 2940 00e0 0023     		movs	r3, #0
 2941 00e2 00E0     		b	.L213
 2942              	.L230:
1167:rt_thread/src/ipc.c ****             status = RT_EOK;
 2943              		.loc 1 1167 0
 2944 00e4 0023     		movs	r3, #0
 2945              	.LVL434:
 2946              	.L213:
1173:rt_thread/src/ipc.c ****     }
1174:rt_thread/src/ipc.c **** 
1175:rt_thread/src/ipc.c ****     if (status == RT_EOK)
 2947              		.loc 1 1175 0
 2948 00e6 6BB9     		cbnz	r3, .L215
1176:rt_thread/src/ipc.c ****     {
1177:rt_thread/src/ipc.c ****         /* set received event */
1178:rt_thread/src/ipc.c ****         if (recved)
 2949              		.loc 1 1178 0
 2950 00e8 0A9B     		ldr	r3, [sp, #40]
 2951              	.LVL435:
 2952 00ea 1BB1     		cbz	r3, .L216
1179:rt_thread/src/ipc.c ****             *recved = (event->set & set);
 2953              		.loc 1 1179 0
 2954 00ec E369     		ldr	r3, [r4, #28]
 2955 00ee 3340     		ands	r3, r3, r6
 2956 00f0 0A9A     		ldr	r2, [sp, #40]
 2957 00f2 1360     		str	r3, [r2]
 2958              	.L216:
1180:rt_thread/src/ipc.c **** 
1181:rt_thread/src/ipc.c ****         /* received event */
1182:rt_thread/src/ipc.c ****         if (option & RT_EVENT_FLAG_CLEAR)
 2959              		.loc 1 1182 0
 2960 00f4 17F0040F 		tst	r7, #4
 2961 00f8 5AD0     		beq	.L217
1183:rt_thread/src/ipc.c ****             event->set &= ~set;
 2962              		.loc 1 1183 0
 2963 00fa E369     		ldr	r3, [r4, #28]
 2964 00fc 23EA0606 		bic	r6, r3, r6
 2965              	.LVL436:
 2966 0100 E661     		str	r6, [r4, #28]
 2967 0102 55E0     		b	.L217
 2968              	.LVL437:
 2969              	.L215:
1184:rt_thread/src/ipc.c ****     }
1185:rt_thread/src/ipc.c ****     else if (timeout == 0)
 2970              		.loc 1 1185 0
 2971 0104 019B     		ldr	r3, [sp, #4]
 2972              	.LVL438:
 2973 0106 1BB9     		cbnz	r3, .L218
1186:rt_thread/src/ipc.c ****     {
1187:rt_thread/src/ipc.c ****         /* no waiting */
1188:rt_thread/src/ipc.c ****         thread->error = -RT_ETIMEOUT;
 2974              		.loc 1 1188 0
 2975 0108 6FF00103 		mvn	r3, #1
ARM GAS  /tmp/ccObKSes.s 			page 77


 2976 010c 2B63     		str	r3, [r5, #48]
 2977 010e 4FE0     		b	.L217
 2978              	.L218:
1189:rt_thread/src/ipc.c ****     }
1190:rt_thread/src/ipc.c ****     else
1191:rt_thread/src/ipc.c ****     {
1192:rt_thread/src/ipc.c ****         /* fill thread event info */
1193:rt_thread/src/ipc.c ****         thread->event_set  = set;
 2979              		.loc 1 1193 0
 2980 0110 EE63     		str	r6, [r5, #60]
1194:rt_thread/src/ipc.c ****         thread->event_info = option;
 2981              		.loc 1 1194 0
 2982 0112 85F84070 		strb	r7, [r5, #64]
1195:rt_thread/src/ipc.c **** 
1196:rt_thread/src/ipc.c ****         /* put thread to suspended thread list */
1197:rt_thread/src/ipc.c ****         rt_ipc_list_suspend(&(event->parent.suspend_thread),
 2983              		.loc 1 1197 0
 2984 0116 04F11406 		add	r6, r4, #20
 2985              	.LVL439:
 2986 011a 677A     		ldrb	r7, [r4, #9]	@ zero_extendqisi2
 2987              	.LVL440:
 2988              	.LBB266:
 2989              	.LBB267:
  85:rt_thread/src/ipc.c **** 
 2990              		.loc 1 85 0
 2991 011c 2846     		mov	r0, r5
 2992 011e FFF7FEFF 		bl	rt_thread_suspend
 2993              	.LVL441:
  87:rt_thread/src/ipc.c ****     {
 2994              		.loc 1 87 0
 2995 0122 17B1     		cbz	r7, .L220
 2996 0124 012F     		cmp	r7, #1
 2997 0126 09D0     		beq	.L221
 2998 0128 26E0     		b	.L219
 2999              	.L220:
  90:rt_thread/src/ipc.c ****         break;
 3000              		.loc 1 90 0
 3001 012a 05F11403 		add	r3, r5, #20
 3002              	.LVL442:
 3003              	.LBB268:
 3004              	.LBB269:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 3005              		.loc 2 75 0
 3006 012e 7268     		ldr	r2, [r6, #4]
 3007 0130 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 3008              		.loc 2 76 0
 3009 0132 7268     		ldr	r2, [r6, #4]
 3010 0134 AA61     		str	r2, [r5, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 3011              		.loc 2 78 0
 3012 0136 7360     		str	r3, [r6, #4]
  79:rt_thread/include/rtservice.h **** }
 3013              		.loc 2 79 0
 3014 0138 6E61     		str	r6, [r5, #20]
 3015 013a 1DE0     		b	.L219
 3016              	.LVL443:
ARM GAS  /tmp/ccObKSes.s 			page 78


 3017              	.L221:
 3018              	.LBE269:
 3019              	.LBE268:
 3020              	.LBB270:
  99:rt_thread/src/ipc.c ****             {
 3021              		.loc 1 99 0
 3022 013c 6369     		ldr	r3, [r4, #20]
 3023              	.LVL444:
 3024 013e 0FE0     		b	.L222
 3025              	.L225:
 3026              	.LVL445:
 104:rt_thread/src/ipc.c ****                 {
 3027              		.loc 1 104 0
 3028 0140 95F83510 		ldrb	r1, [r5, #53]	@ zero_extendqisi2
 3029 0144 93F82120 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
 3030 0148 9142     		cmp	r1, r2
 3031 014a 08D2     		bcs	.L223
 107:rt_thread/src/ipc.c ****                     break;
 3032              		.loc 1 107 0
 3033 014c 05F11402 		add	r2, r5, #20
 3034              	.LVL446:
 3035              	.LBB271:
 3036              	.LBB272:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 3037              		.loc 2 75 0
 3038 0150 5968     		ldr	r1, [r3, #4]
 3039 0152 0A60     		str	r2, [r1]
  76:rt_thread/include/rtservice.h **** 
 3040              		.loc 2 76 0
 3041 0154 5968     		ldr	r1, [r3, #4]
 3042 0156 A961     		str	r1, [r5, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 3043              		.loc 2 78 0
 3044 0158 5A60     		str	r2, [r3, #4]
  79:rt_thread/include/rtservice.h **** }
 3045              		.loc 2 79 0
 3046 015a 6B61     		str	r3, [r5, #20]
 3047 015c 02E0     		b	.L224
 3048              	.LVL447:
 3049              	.L223:
 3050              	.LBE272:
 3051              	.LBE271:
  99:rt_thread/src/ipc.c ****             {
 3052              		.loc 1 99 0
 3053 015e 1B68     		ldr	r3, [r3]
 3054              	.LVL448:
 3055              	.L222:
 3056 0160 9E42     		cmp	r6, r3
 3057 0162 EDD1     		bne	.L225
 3058              	.L224:
 116:rt_thread/src/ipc.c ****                 rt_list_insert_before(list, &(thread->tlist));
 3059              		.loc 1 116 0
 3060 0164 9E42     		cmp	r6, r3
 3061 0166 07D1     		bne	.L219
 117:rt_thread/src/ipc.c ****         }
 3062              		.loc 1 117 0
 3063 0168 05F11403 		add	r3, r5, #20
ARM GAS  /tmp/ccObKSes.s 			page 79


 3064              	.LVL449:
 3065              	.LBB273:
 3066              	.LBB274:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 3067              		.loc 2 75 0
 3068 016c 7268     		ldr	r2, [r6, #4]
 3069 016e 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 3070              		.loc 2 76 0
 3071 0170 7268     		ldr	r2, [r6, #4]
 3072 0172 AA61     		str	r2, [r5, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 3073              		.loc 2 78 0
 3074 0174 7360     		str	r3, [r6, #4]
  79:rt_thread/include/rtservice.h **** }
 3075              		.loc 2 79 0
 3076 0176 6E61     		str	r6, [r5, #20]
 3077              	.LVL450:
 3078              	.L219:
 3079              	.LBE274:
 3080              	.LBE273:
 3081              	.LBE270:
 3082              	.LBE267:
 3083              	.LBE266:
1198:rt_thread/src/ipc.c ****                             thread,
1199:rt_thread/src/ipc.c ****                             event->parent.parent.flag);
1200:rt_thread/src/ipc.c **** 
1201:rt_thread/src/ipc.c ****         /* if there is a waiting timeout, active thread timer */
1202:rt_thread/src/ipc.c ****         if (timeout > 0)
 3084              		.loc 1 1202 0
 3085 0178 019B     		ldr	r3, [sp, #4]
 3086 017a 002B     		cmp	r3, #0
 3087 017c 09DD     		ble	.L226
1203:rt_thread/src/ipc.c ****         {
1204:rt_thread/src/ipc.c ****             /* reset the timeout of thread timer and start it */
1205:rt_thread/src/ipc.c ****             rt_timer_control(&(thread->thread_timer),
 3088              		.loc 1 1205 0
 3089 017e 05F16006 		add	r6, r5, #96
 3090 0182 01AA     		add	r2, sp, #4
 3091              	.LVL451:
 3092 0184 0021     		movs	r1, #0
 3093 0186 3046     		mov	r0, r6
 3094 0188 FFF7FEFF 		bl	rt_timer_control
 3095              	.LVL452:
1206:rt_thread/src/ipc.c ****                              RT_TIMER_CTRL_SET_TIME,
1207:rt_thread/src/ipc.c ****                              &timeout);
1208:rt_thread/src/ipc.c ****             rt_timer_start(&(thread->thread_timer));
 3096              		.loc 1 1208 0
 3097 018c 3046     		mov	r0, r6
 3098 018e FFF7FEFF 		bl	rt_timer_start
 3099              	.LVL453:
 3100              	.L226:
1209:rt_thread/src/ipc.c ****         }
1210:rt_thread/src/ipc.c **** 
1211:rt_thread/src/ipc.c ****         /* enable interrupt */
1212:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(level);
 3101              		.loc 1 1212 0
ARM GAS  /tmp/ccObKSes.s 			page 80


 3102 0192 4046     		mov	r0, r8
 3103 0194 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3104              	.LVL454:
1213:rt_thread/src/ipc.c **** 
1214:rt_thread/src/ipc.c ****         /* do a schedule */
1215:rt_thread/src/ipc.c ****         rt_schedule();
 3105              		.loc 1 1215 0
 3106 0198 FFF7FEFF 		bl	rt_schedule
 3107              	.LVL455:
1216:rt_thread/src/ipc.c **** 
1217:rt_thread/src/ipc.c ****         if (thread->error != RT_EOK)
 3108              		.loc 1 1217 0
 3109 019c 286B     		ldr	r0, [r5, #48]
 3110 019e 98B9     		cbnz	r0, .L210
1218:rt_thread/src/ipc.c ****         {
1219:rt_thread/src/ipc.c ****             /* return error */
1220:rt_thread/src/ipc.c ****             return thread->error;
1221:rt_thread/src/ipc.c ****         }
1222:rt_thread/src/ipc.c **** 
1223:rt_thread/src/ipc.c ****         /* received an event, disable interrupt to protect */
1224:rt_thread/src/ipc.c ****         level = rt_hw_interrupt_disable();
 3111              		.loc 1 1224 0
 3112 01a0 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3113              	.LVL456:
 3114 01a4 8146     		mov	r9, r0
 3115              	.LVL457:
1225:rt_thread/src/ipc.c **** 
1226:rt_thread/src/ipc.c ****         /* set received event */
1227:rt_thread/src/ipc.c ****         if (recved)
 3116              		.loc 1 1227 0
 3117 01a6 0A9B     		ldr	r3, [sp, #40]
 3118 01a8 13B1     		cbz	r3, .L217
1228:rt_thread/src/ipc.c ****             *recved = thread->event_set;
 3119              		.loc 1 1228 0
 3120 01aa EB6B     		ldr	r3, [r5, #60]
 3121 01ac 0A9A     		ldr	r2, [sp, #40]
 3122 01ae 1360     		str	r3, [r2]
 3123              	.LVL458:
 3124              	.L217:
1229:rt_thread/src/ipc.c ****     }
1230:rt_thread/src/ipc.c **** 
1231:rt_thread/src/ipc.c ****     /* enable interrupt */
1232:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(level);
 3125              		.loc 1 1232 0
 3126 01b0 4846     		mov	r0, r9
 3127 01b2 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3128              	.LVL459:
1233:rt_thread/src/ipc.c **** 
1234:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(event->parent.parent)));
 3129              		.loc 1 1234 0
 3130 01b6 0D4B     		ldr	r3, .L232+28
 3131 01b8 1B68     		ldr	r3, [r3]
 3132 01ba 0BB1     		cbz	r3, .L227
 3133              		.loc 1 1234 0 is_stmt 0 discriminator 1
 3134 01bc 2046     		mov	r0, r4
 3135 01be 9847     		blx	r3
 3136              	.LVL460:
ARM GAS  /tmp/ccObKSes.s 			page 81


 3137              	.L227:
1235:rt_thread/src/ipc.c **** 
1236:rt_thread/src/ipc.c ****     return thread->error;
 3138              		.loc 1 1236 0 is_stmt 1
 3139 01c0 286B     		ldr	r0, [r5, #48]
 3140 01c2 01E0     		b	.L210
 3141              	.LVL461:
 3142              	.L228:
1144:rt_thread/src/ipc.c **** 
 3143              		.loc 1 1144 0
 3144 01c4 4FF0FF30 		mov	r0, #-1
 3145              	.LVL462:
 3146              	.L210:
1237:rt_thread/src/ipc.c **** }
 3147              		.loc 1 1237 0
 3148 01c8 03B0     		add	sp, sp, #12
 3149              	.LCFI26:
 3150              		.cfi_def_cfa_offset 28
 3151              		@ sp needed
 3152 01ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3153              	.LVL463:
 3154              	.L233:
 3155 01ce 00BF     		.align	2
 3156              	.L232:
 3157 01d0 04010000 		.word	.LC7
 3158 01d4 C4000000 		.word	.LC5
 3159 01d8 9C000000 		.word	.LC4
 3160 01dc 00000000 		.word	.LANCHOR19
 3161 01e0 08020000 		.word	.LC12
 3162 01e4 1C020000 		.word	.LC13
 3163 01e8 00000000 		.word	rt_object_trytake_hook
 3164 01ec 00000000 		.word	rt_object_take_hook
 3165              		.cfi_endproc
 3166              	.LFE39:
 3168              		.section	.text.rt_event_control,"ax",%progbits
 3169              		.align	2
 3170              		.global	rt_event_control
 3171              		.thumb
 3172              		.thumb_func
 3174              	rt_event_control:
 3175              	.LFB40:
1238:rt_thread/src/ipc.c **** RTM_EXPORT(rt_event_recv);
1239:rt_thread/src/ipc.c **** 
1240:rt_thread/src/ipc.c **** /**
1241:rt_thread/src/ipc.c ****  * This function can get or set some extra attributions of an event object.
1242:rt_thread/src/ipc.c ****  *
1243:rt_thread/src/ipc.c ****  * @param event the event object
1244:rt_thread/src/ipc.c ****  * @param cmd the execution command
1245:rt_thread/src/ipc.c ****  * @param arg the execution argument
1246:rt_thread/src/ipc.c ****  *
1247:rt_thread/src/ipc.c ****  * @return the error code
1248:rt_thread/src/ipc.c ****  */
1249:rt_thread/src/ipc.c **** rt_err_t rt_event_control(rt_event_t event, int cmd, void *arg)
1250:rt_thread/src/ipc.c **** {
 3176              		.loc 1 1250 0
 3177              		.cfi_startproc
 3178              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccObKSes.s 			page 82


 3179              		@ frame_needed = 0, uses_anonymous_args = 0
 3180              	.LVL464:
 3181 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3182              	.LCFI27:
 3183              		.cfi_def_cfa_offset 24
 3184              		.cfi_offset 3, -24
 3185              		.cfi_offset 4, -20
 3186              		.cfi_offset 5, -16
 3187              		.cfi_offset 6, -12
 3188              		.cfi_offset 7, -8
 3189              		.cfi_offset 14, -4
 3190 0002 0C46     		mov	r4, r1
1251:rt_thread/src/ipc.c ****     rt_ubase_t level;
1252:rt_thread/src/ipc.c **** 
1253:rt_thread/src/ipc.c ****     /* parameter check */
1254:rt_thread/src/ipc.c ****     RT_ASSERT(event != RT_NULL);
 3191              		.loc 1 1254 0
 3192 0004 0646     		mov	r6, r0
 3193 0006 28B9     		cbnz	r0, .L235
 3194              		.loc 1 1254 0 is_stmt 0 discriminator 1
 3195 0008 40F2E642 		movw	r2, #1254
 3196              	.LVL465:
 3197 000c 1949     		ldr	r1, .L242
 3198              	.LVL466:
 3199 000e 1A48     		ldr	r0, .L242+4
 3200              	.LVL467:
 3201 0010 FFF7FEFF 		bl	rt_assert_handler
 3202              	.LVL468:
 3203              	.L235:
1255:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&event->parent.parent) == RT_Object_Class_Event);
 3204              		.loc 1 1255 0 is_stmt 1
 3205 0014 3046     		mov	r0, r6
 3206 0016 FFF7FEFF 		bl	rt_object_get_type
 3207              	.LVL469:
 3208 001a 0428     		cmp	r0, #4
 3209 001c 05D0     		beq	.L236
 3210              		.loc 1 1255 0 is_stmt 0 discriminator 1
 3211 001e 40F2E742 		movw	r2, #1255
 3212 0022 1449     		ldr	r1, .L242
 3213 0024 1548     		ldr	r0, .L242+8
 3214 0026 FFF7FEFF 		bl	rt_assert_handler
 3215              	.LVL470:
 3216              	.L236:
1256:rt_thread/src/ipc.c **** 
1257:rt_thread/src/ipc.c ****     if (cmd == RT_IPC_CMD_RESET)
 3217              		.loc 1 1257 0 is_stmt 1
 3218 002a 012C     		cmp	r4, #1
 3219 002c 1ED1     		bne	.L240
1258:rt_thread/src/ipc.c ****     {
1259:rt_thread/src/ipc.c ****         /* disable interrupt */
1260:rt_thread/src/ipc.c ****         level = rt_hw_interrupt_disable();
 3220              		.loc 1 1260 0
 3221 002e FFF7FEFF 		bl	rt_hw_interrupt_disable
 3222              	.LVL471:
 3223 0032 0746     		mov	r7, r0
 3224              	.LVL472:
1261:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 83


1262:rt_thread/src/ipc.c ****         /* resume all waiting thread */
1263:rt_thread/src/ipc.c ****         rt_ipc_list_resume_all(&event->parent.suspend_thread);
 3225              		.loc 1 1263 0
 3226 0034 06F11404 		add	r4, r6, #20
 3227              	.LVL473:
 3228 0038 0CE0     		b	.L238
 3229              	.LVL474:
 3230              	.L239:
 3231              	.LBB279:
 3232              	.LBB280:
 166:rt_thread/src/ipc.c **** 
 3233              		.loc 1 166 0
 3234 003a FFF7FEFF 		bl	rt_hw_interrupt_disable
 3235              	.LVL475:
 3236 003e 0546     		mov	r5, r0
 3237              	.LVL476:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 3238              		.loc 1 169 0
 3239 0040 2068     		ldr	r0, [r4]
 3240              	.LVL477:
 171:rt_thread/src/ipc.c **** 
 3241              		.loc 1 171 0
 3242 0042 4FF0FF33 		mov	r3, #-1
 3243 0046 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 3244              		.loc 1 178 0
 3245 0048 1438     		subs	r0, r0, #20
 3246              	.LVL478:
 3247 004a FFF7FEFF 		bl	rt_thread_resume
 3248              	.LVL479:
 181:rt_thread/src/ipc.c ****     }
 3249              		.loc 1 181 0
 3250 004e 2846     		mov	r0, r5
 3251 0050 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3252              	.LVL480:
 3253              	.L238:
 3254              	.LBB281:
 3255              	.LBB282:
 3256              		.loc 2 100 0
 3257 0054 2368     		ldr	r3, [r4]
 3258              	.LVL481:
 3259              	.LBE282:
 3260              	.LBE281:
 163:rt_thread/src/ipc.c ****     {
 3261              		.loc 1 163 0
 3262 0056 9C42     		cmp	r4, r3
 3263 0058 EFD1     		bne	.L239
 3264              	.LVL482:
 3265              	.LBE280:
 3266              	.LBE279:
1264:rt_thread/src/ipc.c **** 
1265:rt_thread/src/ipc.c ****         /* initialize event set */
1266:rt_thread/src/ipc.c ****         event->set = 0;
 3267              		.loc 1 1266 0
 3268 005a 0024     		movs	r4, #0
 3269 005c F461     		str	r4, [r6, #28]
1267:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 84


1268:rt_thread/src/ipc.c ****         /* enable interrupt */
1269:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(level);
 3270              		.loc 1 1269 0
 3271 005e 3846     		mov	r0, r7
 3272 0060 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3273              	.LVL483:
1270:rt_thread/src/ipc.c **** 
1271:rt_thread/src/ipc.c ****         rt_schedule();
 3274              		.loc 1 1271 0
 3275 0064 FFF7FEFF 		bl	rt_schedule
 3276              	.LVL484:
1272:rt_thread/src/ipc.c **** 
1273:rt_thread/src/ipc.c ****         return RT_EOK;
 3277              		.loc 1 1273 0
 3278 0068 2046     		mov	r0, r4
 3279 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3280              	.LVL485:
 3281              	.L240:
1274:rt_thread/src/ipc.c ****     }
1275:rt_thread/src/ipc.c **** 
1276:rt_thread/src/ipc.c ****     return -RT_ERROR;
 3282              		.loc 1 1276 0
 3283 006c 4FF0FF30 		mov	r0, #-1
1277:rt_thread/src/ipc.c **** }
 3284              		.loc 1 1277 0
 3285 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3286              	.LVL486:
 3287              	.L243:
 3288 0072 00BF     		.align	2
 3289              	.L242:
 3290 0074 00000000 		.word	.LANCHOR20
 3291 0078 08020000 		.word	.LC12
 3292 007c 1C020000 		.word	.LC13
 3293              		.cfi_endproc
 3294              	.LFE40:
 3296              		.section	.text.rt_mb_init,"ax",%progbits
 3297              		.align	2
 3298              		.global	rt_mb_init
 3299              		.thumb
 3300              		.thumb_func
 3302              	rt_mb_init:
 3303              	.LFB41:
1278:rt_thread/src/ipc.c **** RTM_EXPORT(rt_event_control);
1279:rt_thread/src/ipc.c **** #endif /* end of RT_USING_EVENT */
1280:rt_thread/src/ipc.c **** 
1281:rt_thread/src/ipc.c **** #ifdef RT_USING_MAILBOX
1282:rt_thread/src/ipc.c **** /**
1283:rt_thread/src/ipc.c ****  * This function will initialize a mailbox and put it under control of resource
1284:rt_thread/src/ipc.c ****  * management.
1285:rt_thread/src/ipc.c ****  *
1286:rt_thread/src/ipc.c ****  * @param mb the mailbox object
1287:rt_thread/src/ipc.c ****  * @param name the name of mailbox
1288:rt_thread/src/ipc.c ****  * @param msgpool the begin address of buffer to save received mail
1289:rt_thread/src/ipc.c ****  * @param size the size of mailbox
1290:rt_thread/src/ipc.c ****  * @param flag the flag of mailbox
1291:rt_thread/src/ipc.c ****  *
1292:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
ARM GAS  /tmp/ccObKSes.s 			page 85


1293:rt_thread/src/ipc.c ****  */
1294:rt_thread/src/ipc.c **** rt_err_t rt_mb_init(rt_mailbox_t mb,
1295:rt_thread/src/ipc.c ****                     const char  *name,
1296:rt_thread/src/ipc.c ****                     void        *msgpool,
1297:rt_thread/src/ipc.c ****                     rt_size_t    size,
1298:rt_thread/src/ipc.c ****                     rt_uint8_t   flag)
1299:rt_thread/src/ipc.c **** {
 3304              		.loc 1 1299 0
 3305              		.cfi_startproc
 3306              		@ args = 4, pretend = 0, frame = 0
 3307              		@ frame_needed = 0, uses_anonymous_args = 0
 3308              	.LVL487:
 3309 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3310              	.LCFI28:
 3311              		.cfi_def_cfa_offset 24
 3312              		.cfi_offset 3, -24
 3313              		.cfi_offset 4, -20
 3314              		.cfi_offset 5, -16
 3315              		.cfi_offset 6, -12
 3316              		.cfi_offset 7, -8
 3317              		.cfi_offset 14, -4
 3318 0002 0F46     		mov	r7, r1
 3319 0004 1646     		mov	r6, r2
 3320 0006 1D46     		mov	r5, r3
1300:rt_thread/src/ipc.c ****     RT_ASSERT(mb != RT_NULL);
 3321              		.loc 1 1300 0
 3322 0008 0446     		mov	r4, r0
 3323 000a 28B9     		cbnz	r0, .L245
 3324              		.loc 1 1300 0 is_stmt 0 discriminator 1
 3325 000c 40F21452 		movw	r2, #1300
 3326              	.LVL488:
 3327 0010 0D49     		ldr	r1, .L247
 3328              	.LVL489:
 3329 0012 0E48     		ldr	r0, .L247+4
 3330              	.LVL490:
 3331 0014 FFF7FEFF 		bl	rt_assert_handler
 3332              	.LVL491:
 3333              	.L245:
1301:rt_thread/src/ipc.c **** 
1302:rt_thread/src/ipc.c ****     /* initialize object */
1303:rt_thread/src/ipc.c ****     rt_object_init(&(mb->parent.parent), RT_Object_Class_MailBox, name);
 3334              		.loc 1 1303 0 is_stmt 1
 3335 0018 3A46     		mov	r2, r7
 3336 001a 0521     		movs	r1, #5
 3337 001c 2046     		mov	r0, r4
 3338 001e FFF7FEFF 		bl	rt_object_init
 3339              	.LVL492:
1304:rt_thread/src/ipc.c **** 
1305:rt_thread/src/ipc.c ****     /* set parent flag */
1306:rt_thread/src/ipc.c ****     mb->parent.parent.flag = flag;
 3340              		.loc 1 1306 0
 3341 0022 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 3342 0026 6372     		strb	r3, [r4, #9]
 3343              	.LVL493:
 3344              	.LBB283:
 3345              	.LBB284:
  64:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 86


 3346              		.loc 1 64 0
 3347 0028 04F11403 		add	r3, r4, #20
 3348              	.LVL494:
 3349              	.LBB285:
 3350              	.LBB286:
  49:rt_thread/include/rtservice.h **** }
 3351              		.loc 2 49 0
 3352 002c A361     		str	r3, [r4, #24]
 3353 002e 6361     		str	r3, [r4, #20]
 3354              	.LVL495:
 3355              	.LBE286:
 3356              	.LBE285:
 3357              	.LBE284:
 3358              	.LBE283:
1307:rt_thread/src/ipc.c **** 
1308:rt_thread/src/ipc.c ****     /* initialize ipc object */
1309:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(mb->parent));
1310:rt_thread/src/ipc.c **** 
1311:rt_thread/src/ipc.c ****     /* initialize mailbox */
1312:rt_thread/src/ipc.c ****     mb->msg_pool   = (rt_ubase_t *)msgpool;
 3359              		.loc 1 1312 0
 3360 0030 E661     		str	r6, [r4, #28]
1313:rt_thread/src/ipc.c ****     mb->size       = size;
 3361              		.loc 1 1313 0
 3362 0032 2584     		strh	r5, [r4, #32]	@ movhi
1314:rt_thread/src/ipc.c ****     mb->entry      = 0;
 3363              		.loc 1 1314 0
 3364 0034 0020     		movs	r0, #0
 3365 0036 6084     		strh	r0, [r4, #34]	@ movhi
1315:rt_thread/src/ipc.c ****     mb->in_offset  = 0;
 3366              		.loc 1 1315 0
 3367 0038 A084     		strh	r0, [r4, #36]	@ movhi
1316:rt_thread/src/ipc.c ****     mb->out_offset = 0;
 3368              		.loc 1 1316 0
 3369 003a E084     		strh	r0, [r4, #38]	@ movhi
1317:rt_thread/src/ipc.c **** 
1318:rt_thread/src/ipc.c ****     /* initialize an additional list of sender suspend thread */
1319:rt_thread/src/ipc.c ****     rt_list_init(&(mb->suspend_sender_thread));
 3370              		.loc 1 1319 0
 3371 003c 04F12803 		add	r3, r4, #40
 3372              	.LVL496:
 3373              	.LBB287:
 3374              	.LBB288:
  49:rt_thread/include/rtservice.h **** }
 3375              		.loc 2 49 0
 3376 0040 E362     		str	r3, [r4, #44]
 3377 0042 A362     		str	r3, [r4, #40]
 3378              	.LVL497:
 3379              	.LBE288:
 3380              	.LBE287:
1320:rt_thread/src/ipc.c **** 
1321:rt_thread/src/ipc.c ****     return RT_EOK;
1322:rt_thread/src/ipc.c **** }
 3381              		.loc 1 1322 0
 3382 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3383              	.LVL498:
 3384              	.L248:
ARM GAS  /tmp/ccObKSes.s 			page 87


 3385 0046 00BF     		.align	2
 3386              	.L247:
 3387 0048 00000000 		.word	.LANCHOR21
 3388 004c D4020000 		.word	.LC16
 3389              		.cfi_endproc
 3390              	.LFE41:
 3392              		.section	.text.rt_mb_detach,"ax",%progbits
 3393              		.align	2
 3394              		.global	rt_mb_detach
 3395              		.thumb
 3396              		.thumb_func
 3398              	rt_mb_detach:
 3399              	.LFB42:
1323:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mb_init);
1324:rt_thread/src/ipc.c **** 
1325:rt_thread/src/ipc.c **** /**
1326:rt_thread/src/ipc.c ****  * This function will detach a mailbox from resource management
1327:rt_thread/src/ipc.c ****  *
1328:rt_thread/src/ipc.c ****  * @param mb the mailbox object
1329:rt_thread/src/ipc.c ****  *
1330:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
1331:rt_thread/src/ipc.c ****  */
1332:rt_thread/src/ipc.c **** rt_err_t rt_mb_detach(rt_mailbox_t mb)
1333:rt_thread/src/ipc.c **** {
 3400              		.loc 1 1333 0
 3401              		.cfi_startproc
 3402              		@ args = 0, pretend = 0, frame = 0
 3403              		@ frame_needed = 0, uses_anonymous_args = 0
 3404              	.LVL499:
 3405 0000 70B5     		push	{r4, r5, r6, lr}
 3406              	.LCFI29:
 3407              		.cfi_def_cfa_offset 16
 3408              		.cfi_offset 4, -16
 3409              		.cfi_offset 5, -12
 3410              		.cfi_offset 6, -8
 3411              		.cfi_offset 14, -4
1334:rt_thread/src/ipc.c ****     /* parameter check */
1335:rt_thread/src/ipc.c ****     RT_ASSERT(mb != RT_NULL);
 3412              		.loc 1 1335 0
 3413 0002 0646     		mov	r6, r0
 3414 0004 28B9     		cbnz	r0, .L250
 3415              		.loc 1 1335 0 is_stmt 0 discriminator 1
 3416 0006 40F23752 		movw	r2, #1335
 3417 000a 2249     		ldr	r1, .L258
 3418 000c 2248     		ldr	r0, .L258+4
 3419              	.LVL500:
 3420 000e FFF7FEFF 		bl	rt_assert_handler
 3421              	.LVL501:
 3422              	.L250:
1336:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
 3423              		.loc 1 1336 0 is_stmt 1
 3424 0012 3046     		mov	r0, r6
 3425 0014 FFF7FEFF 		bl	rt_object_get_type
 3426              	.LVL502:
 3427 0018 0528     		cmp	r0, #5
 3428 001a 05D0     		beq	.L251
 3429              		.loc 1 1336 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccObKSes.s 			page 88


 3430 001c 4FF4A762 		mov	r2, #1336
 3431 0020 1C49     		ldr	r1, .L258
 3432 0022 1E48     		ldr	r0, .L258+8
 3433 0024 FFF7FEFF 		bl	rt_assert_handler
 3434              	.LVL503:
 3435              	.L251:
1337:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&mb->parent.parent));
 3436              		.loc 1 1337 0 is_stmt 1
 3437 0028 3046     		mov	r0, r6
 3438 002a FFF7FEFF 		bl	rt_object_is_systemobject
 3439              	.LVL504:
 3440 002e 28B9     		cbnz	r0, .L252
 3441              		.loc 1 1337 0 is_stmt 0 discriminator 1
 3442 0030 40F23952 		movw	r2, #1337
 3443 0034 1749     		ldr	r1, .L258
 3444 0036 1A48     		ldr	r0, .L258+12
 3445 0038 FFF7FEFF 		bl	rt_assert_handler
 3446              	.LVL505:
 3447              	.L252:
1338:rt_thread/src/ipc.c **** 
1339:rt_thread/src/ipc.c ****     /* resume all suspended thread */
1340:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(mb->parent.suspend_thread));
 3448              		.loc 1 1340 0 is_stmt 1
 3449 003c 06F11404 		add	r4, r6, #20
 3450              	.LVL506:
 3451 0040 0CE0     		b	.L253
 3452              	.L254:
 3453              	.LBB297:
 3454              	.LBB298:
 166:rt_thread/src/ipc.c **** 
 3455              		.loc 1 166 0
 3456 0042 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3457              	.LVL507:
 3458 0046 0546     		mov	r5, r0
 3459              	.LVL508:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 3460              		.loc 1 169 0
 3461 0048 2068     		ldr	r0, [r4]
 3462              	.LVL509:
 171:rt_thread/src/ipc.c **** 
 3463              		.loc 1 171 0
 3464 004a 4FF0FF33 		mov	r3, #-1
 3465 004e C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 3466              		.loc 1 178 0
 3467 0050 1438     		subs	r0, r0, #20
 3468              	.LVL510:
 3469 0052 FFF7FEFF 		bl	rt_thread_resume
 3470              	.LVL511:
 181:rt_thread/src/ipc.c ****     }
 3471              		.loc 1 181 0
 3472 0056 2846     		mov	r0, r5
 3473 0058 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3474              	.LVL512:
 3475              	.L253:
 3476              	.LBB299:
 3477              	.LBB300:
ARM GAS  /tmp/ccObKSes.s 			page 89


 3478              		.loc 2 100 0
 3479 005c 2368     		ldr	r3, [r4]
 3480              	.LVL513:
 3481              	.LBE300:
 3482              	.LBE299:
 163:rt_thread/src/ipc.c ****     {
 3483              		.loc 1 163 0
 3484 005e 9C42     		cmp	r4, r3
 3485 0060 EFD1     		bne	.L254
 3486              	.LVL514:
 3487              	.LBE298:
 3488              	.LBE297:
1341:rt_thread/src/ipc.c ****     /* also resume all mailbox private suspended thread */
1342:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(mb->suspend_sender_thread));
 3489              		.loc 1 1342 0
 3490 0062 06F12804 		add	r4, r6, #40
 3491              	.LVL515:
 3492 0066 0CE0     		b	.L255
 3493              	.L256:
 3494              	.LBB301:
 3495              	.LBB302:
 166:rt_thread/src/ipc.c **** 
 3496              		.loc 1 166 0
 3497 0068 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3498              	.LVL516:
 3499 006c 0546     		mov	r5, r0
 3500              	.LVL517:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 3501              		.loc 1 169 0
 3502 006e 2068     		ldr	r0, [r4]
 3503              	.LVL518:
 171:rt_thread/src/ipc.c **** 
 3504              		.loc 1 171 0
 3505 0070 4FF0FF33 		mov	r3, #-1
 3506 0074 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 3507              		.loc 1 178 0
 3508 0076 1438     		subs	r0, r0, #20
 3509              	.LVL519:
 3510 0078 FFF7FEFF 		bl	rt_thread_resume
 3511              	.LVL520:
 181:rt_thread/src/ipc.c ****     }
 3512              		.loc 1 181 0
 3513 007c 2846     		mov	r0, r5
 3514 007e FFF7FEFF 		bl	rt_hw_interrupt_enable
 3515              	.LVL521:
 3516              	.L255:
 3517              	.LBB303:
 3518              	.LBB304:
 3519              		.loc 2 100 0
 3520 0082 2368     		ldr	r3, [r4]
 3521              	.LVL522:
 3522              	.LBE304:
 3523              	.LBE303:
 163:rt_thread/src/ipc.c ****     {
 3524              		.loc 1 163 0
 3525 0084 9C42     		cmp	r4, r3
ARM GAS  /tmp/ccObKSes.s 			page 90


 3526 0086 EFD1     		bne	.L256
 3527              	.LVL523:
 3528              	.LBE302:
 3529              	.LBE301:
1343:rt_thread/src/ipc.c **** 
1344:rt_thread/src/ipc.c ****     /* detach mailbox object */
1345:rt_thread/src/ipc.c ****     rt_object_detach(&(mb->parent.parent));
 3530              		.loc 1 1345 0
 3531 0088 3046     		mov	r0, r6
 3532 008a FFF7FEFF 		bl	rt_object_detach
 3533              	.LVL524:
1346:rt_thread/src/ipc.c **** 
1347:rt_thread/src/ipc.c ****     return RT_EOK;
1348:rt_thread/src/ipc.c **** }
 3534              		.loc 1 1348 0
 3535 008e 0020     		movs	r0, #0
 3536 0090 70BD     		pop	{r4, r5, r6, pc}
 3537              	.LVL525:
 3538              	.L259:
 3539 0092 00BF     		.align	2
 3540              	.L258:
 3541 0094 00000000 		.word	.LANCHOR22
 3542 0098 D4020000 		.word	.LC16
 3543 009c E4020000 		.word	.LC17
 3544 00a0 28030000 		.word	.LC18
 3545              		.cfi_endproc
 3546              	.LFE42:
 3548              		.section	.text.rt_mb_create,"ax",%progbits
 3549              		.align	2
 3550              		.global	rt_mb_create
 3551              		.thumb
 3552              		.thumb_func
 3554              	rt_mb_create:
 3555              	.LFB43:
1349:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mb_detach);
1350:rt_thread/src/ipc.c **** 
1351:rt_thread/src/ipc.c **** #ifdef RT_USING_HEAP
1352:rt_thread/src/ipc.c **** /**
1353:rt_thread/src/ipc.c ****  * This function will create a mailbox object from system resource
1354:rt_thread/src/ipc.c ****  *
1355:rt_thread/src/ipc.c ****  * @param name the name of mailbox
1356:rt_thread/src/ipc.c ****  * @param size the size of mailbox
1357:rt_thread/src/ipc.c ****  * @param flag the flag of mailbox
1358:rt_thread/src/ipc.c ****  *
1359:rt_thread/src/ipc.c ****  * @return the created mailbox, RT_NULL on error happen
1360:rt_thread/src/ipc.c ****  */
1361:rt_thread/src/ipc.c **** rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
1362:rt_thread/src/ipc.c **** {
 3556              		.loc 1 1362 0
 3557              		.cfi_startproc
 3558              		@ args = 0, pretend = 0, frame = 0
 3559              		@ frame_needed = 0, uses_anonymous_args = 0
 3560              	.LVL526:
 3561 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3562              	.LCFI30:
 3563              		.cfi_def_cfa_offset 24
 3564              		.cfi_offset 4, -24
ARM GAS  /tmp/ccObKSes.s 			page 91


 3565              		.cfi_offset 5, -20
 3566              		.cfi_offset 6, -16
 3567              		.cfi_offset 7, -12
 3568              		.cfi_offset 8, -8
 3569              		.cfi_offset 14, -4
 3570 0004 0446     		mov	r4, r0
 3571 0006 0D46     		mov	r5, r1
 3572 0008 1746     		mov	r7, r2
 3573              	.LBB305:
1363:rt_thread/src/ipc.c ****     rt_mailbox_t mb;
1364:rt_thread/src/ipc.c **** 
1365:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 3574              		.loc 1 1365 0
 3575 000a FFF7FEFF 		bl	rt_hw_interrupt_disable
 3576              	.LVL527:
 3577 000e 0646     		mov	r6, r0
 3578              	.LVL528:
 3579 0010 FFF7FEFF 		bl	rt_interrupt_get_nest
 3580              	.LVL529:
 3581 0014 58B1     		cbz	r0, .L261
 3582              		.loc 1 1365 0 is_stmt 0 discriminator 1
 3583 0016 DFF87080 		ldr	r8, .L266+8
 3584 001a 4146     		mov	r1, r8
 3585 001c 1848     		ldr	r0, .L266
 3586 001e FFF7FEFF 		bl	rt_kprintf
 3587              	.LVL530:
 3588 0022 40F25552 		movw	r2, #1365
 3589 0026 4146     		mov	r1, r8
 3590 0028 1648     		ldr	r0, .L266+4
 3591 002a FFF7FEFF 		bl	rt_assert_handler
 3592              	.LVL531:
 3593              	.L261:
 3594              		.loc 1 1365 0 discriminator 5
 3595 002e 3046     		mov	r0, r6
 3596 0030 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3597              	.LVL532:
 3598              	.LBE305:
1366:rt_thread/src/ipc.c **** 
1367:rt_thread/src/ipc.c ****     /* allocate object */
1368:rt_thread/src/ipc.c ****     mb = (rt_mailbox_t)rt_object_allocate(RT_Object_Class_MailBox, name);
 3599              		.loc 1 1368 0 is_stmt 1 discriminator 5
 3600 0034 2146     		mov	r1, r4
 3601 0036 0520     		movs	r0, #5
 3602 0038 FFF7FEFF 		bl	rt_object_allocate
 3603              	.LVL533:
1369:rt_thread/src/ipc.c ****     if (mb == RT_NULL)
 3604              		.loc 1 1369 0 discriminator 5
 3605 003c 0446     		mov	r4, r0
 3606              	.LVL534:
 3607 003e E0B1     		cbz	r0, .L264
1370:rt_thread/src/ipc.c ****         return mb;
1371:rt_thread/src/ipc.c **** 
1372:rt_thread/src/ipc.c ****     /* set parent */
1373:rt_thread/src/ipc.c ****     mb->parent.parent.flag = flag;
 3608              		.loc 1 1373 0
 3609 0040 4772     		strb	r7, [r0, #9]
 3610              	.LVL535:
ARM GAS  /tmp/ccObKSes.s 			page 92


 3611              	.LBB306:
 3612              	.LBB307:
  64:rt_thread/src/ipc.c **** 
 3613              		.loc 1 64 0
 3614 0042 00F11403 		add	r3, r0, #20
 3615              	.LVL536:
 3616              	.LBB308:
 3617              	.LBB309:
  49:rt_thread/include/rtservice.h **** }
 3618              		.loc 2 49 0
 3619 0046 8361     		str	r3, [r0, #24]
 3620 0048 4361     		str	r3, [r0, #20]
 3621              	.LVL537:
 3622              	.LBE309:
 3623              	.LBE308:
 3624              	.LBE307:
 3625              	.LBE306:
1374:rt_thread/src/ipc.c **** 
1375:rt_thread/src/ipc.c ****     /* initialize ipc object */
1376:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(mb->parent));
1377:rt_thread/src/ipc.c **** 
1378:rt_thread/src/ipc.c ****     /* initialize mailbox */
1379:rt_thread/src/ipc.c ****     mb->size     = size;
 3626              		.loc 1 1379 0
 3627 004a A8B2     		uxth	r0, r5
 3628              	.LVL538:
 3629 004c 2084     		strh	r0, [r4, #32]	@ movhi
1380:rt_thread/src/ipc.c ****     mb->msg_pool = (rt_ubase_t *)RT_KERNEL_MALLOC(mb->size * sizeof(rt_ubase_t));
 3630              		.loc 1 1380 0
 3631 004e 8000     		lsls	r0, r0, #2
 3632 0050 FFF7FEFF 		bl	rt_malloc
 3633              	.LVL539:
 3634 0054 E061     		str	r0, [r4, #28]
1381:rt_thread/src/ipc.c ****     if (mb->msg_pool == RT_NULL)
 3635              		.loc 1 1381 0
 3636 0056 28B9     		cbnz	r0, .L263
1382:rt_thread/src/ipc.c ****     {
1383:rt_thread/src/ipc.c ****         /* delete mailbox object */
1384:rt_thread/src/ipc.c ****         rt_object_delete(&(mb->parent.parent));
 3637              		.loc 1 1384 0
 3638 0058 2046     		mov	r0, r4
 3639 005a FFF7FEFF 		bl	rt_object_delete
 3640              	.LVL540:
1385:rt_thread/src/ipc.c **** 
1386:rt_thread/src/ipc.c ****         return RT_NULL;
 3641              		.loc 1 1386 0
 3642 005e 0020     		movs	r0, #0
 3643 0060 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3644              	.LVL541:
 3645              	.L263:
1387:rt_thread/src/ipc.c ****     }
1388:rt_thread/src/ipc.c ****     mb->entry      = 0;
 3646              		.loc 1 1388 0
 3647 0064 0023     		movs	r3, #0
 3648 0066 6384     		strh	r3, [r4, #34]	@ movhi
1389:rt_thread/src/ipc.c ****     mb->in_offset  = 0;
 3649              		.loc 1 1389 0
ARM GAS  /tmp/ccObKSes.s 			page 93


 3650 0068 A384     		strh	r3, [r4, #36]	@ movhi
1390:rt_thread/src/ipc.c ****     mb->out_offset = 0;
 3651              		.loc 1 1390 0
 3652 006a E384     		strh	r3, [r4, #38]	@ movhi
1391:rt_thread/src/ipc.c **** 
1392:rt_thread/src/ipc.c ****     /* initialize an additional list of sender suspend thread */
1393:rt_thread/src/ipc.c ****     rt_list_init(&(mb->suspend_sender_thread));
 3653              		.loc 1 1393 0
 3654 006c 04F12803 		add	r3, r4, #40
 3655              	.LVL542:
 3656              	.LBB310:
 3657              	.LBB311:
  49:rt_thread/include/rtservice.h **** }
 3658              		.loc 2 49 0
 3659 0070 E362     		str	r3, [r4, #44]
 3660 0072 A362     		str	r3, [r4, #40]
 3661              	.LVL543:
 3662              	.LBE311:
 3663              	.LBE310:
1394:rt_thread/src/ipc.c **** 
1395:rt_thread/src/ipc.c ****     return mb;
 3664              		.loc 1 1395 0
 3665 0074 2046     		mov	r0, r4
 3666 0076 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3667              	.LVL544:
 3668              	.L264:
1396:rt_thread/src/ipc.c **** }
 3669              		.loc 1 1396 0
 3670 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3671              	.LVL545:
 3672              	.L267:
 3673 007e 00BF     		.align	2
 3674              	.L266:
 3675 0080 9C000000 		.word	.LC4
 3676 0084 C4000000 		.word	.LC5
 3677 0088 00000000 		.word	.LANCHOR23
 3678              		.cfi_endproc
 3679              	.LFE43:
 3681              		.section	.text.rt_mb_delete,"ax",%progbits
 3682              		.align	2
 3683              		.global	rt_mb_delete
 3684              		.thumb
 3685              		.thumb_func
 3687              	rt_mb_delete:
 3688              	.LFB44:
1397:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mb_create);
1398:rt_thread/src/ipc.c **** 
1399:rt_thread/src/ipc.c **** /**
1400:rt_thread/src/ipc.c ****  * This function will delete a mailbox object and release the memory
1401:rt_thread/src/ipc.c ****  *
1402:rt_thread/src/ipc.c ****  * @param mb the mailbox object
1403:rt_thread/src/ipc.c ****  *
1404:rt_thread/src/ipc.c ****  * @return the error code
1405:rt_thread/src/ipc.c ****  */
1406:rt_thread/src/ipc.c **** rt_err_t rt_mb_delete(rt_mailbox_t mb)
1407:rt_thread/src/ipc.c **** {
 3689              		.loc 1 1407 0
ARM GAS  /tmp/ccObKSes.s 			page 94


 3690              		.cfi_startproc
 3691              		@ args = 0, pretend = 0, frame = 0
 3692              		@ frame_needed = 0, uses_anonymous_args = 0
 3693              	.LVL546:
 3694 0000 70B5     		push	{r4, r5, r6, lr}
 3695              	.LCFI31:
 3696              		.cfi_def_cfa_offset 16
 3697              		.cfi_offset 4, -16
 3698              		.cfi_offset 5, -12
 3699              		.cfi_offset 6, -8
 3700              		.cfi_offset 14, -4
 3701 0002 0646     		mov	r6, r0
 3702              	.LBB321:
1408:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 3703              		.loc 1 1408 0
 3704 0004 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3705              	.LVL547:
 3706 0008 0446     		mov	r4, r0
 3707              	.LVL548:
 3708 000a FFF7FEFF 		bl	rt_interrupt_get_nest
 3709              	.LVL549:
 3710 000e 50B1     		cbz	r0, .L269
 3711              		.loc 1 1408 0 is_stmt 0 discriminator 1
 3712 0010 2B4D     		ldr	r5, .L278
 3713 0012 2946     		mov	r1, r5
 3714 0014 2B48     		ldr	r0, .L278+4
 3715 0016 FFF7FEFF 		bl	rt_kprintf
 3716              	.LVL550:
 3717 001a 4FF4B062 		mov	r2, #1408
 3718 001e 2946     		mov	r1, r5
 3719 0020 2948     		ldr	r0, .L278+8
 3720 0022 FFF7FEFF 		bl	rt_assert_handler
 3721              	.LVL551:
 3722              	.L269:
 3723              		.loc 1 1408 0 discriminator 5
 3724 0026 2046     		mov	r0, r4
 3725 0028 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3726              	.LVL552:
 3727              	.LBE321:
1409:rt_thread/src/ipc.c **** 
1410:rt_thread/src/ipc.c ****     /* parameter check */
1411:rt_thread/src/ipc.c ****     RT_ASSERT(mb != RT_NULL);
 3728              		.loc 1 1411 0 is_stmt 1 discriminator 5
 3729 002c 2EB9     		cbnz	r6, .L270
 3730              		.loc 1 1411 0 is_stmt 0 discriminator 1
 3731 002e 40F28352 		movw	r2, #1411
 3732 0032 2349     		ldr	r1, .L278
 3733 0034 2548     		ldr	r0, .L278+12
 3734 0036 FFF7FEFF 		bl	rt_assert_handler
 3735              	.LVL553:
 3736              	.L270:
1412:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
 3737              		.loc 1 1412 0 is_stmt 1
 3738 003a 3046     		mov	r0, r6
 3739 003c FFF7FEFF 		bl	rt_object_get_type
 3740              	.LVL554:
 3741 0040 0528     		cmp	r0, #5
ARM GAS  /tmp/ccObKSes.s 			page 95


 3742 0042 05D0     		beq	.L271
 3743              		.loc 1 1412 0 is_stmt 0 discriminator 1
 3744 0044 40F28452 		movw	r2, #1412
 3745 0048 1D49     		ldr	r1, .L278
 3746 004a 2148     		ldr	r0, .L278+16
 3747 004c FFF7FEFF 		bl	rt_assert_handler
 3748              	.LVL555:
 3749              	.L271:
1413:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&mb->parent.parent) == RT_FALSE);
 3750              		.loc 1 1413 0 is_stmt 1
 3751 0050 3046     		mov	r0, r6
 3752 0052 FFF7FEFF 		bl	rt_object_is_systemobject
 3753              	.LVL556:
 3754 0056 28B1     		cbz	r0, .L272
 3755              		.loc 1 1413 0 is_stmt 0 discriminator 1
 3756 0058 40F28552 		movw	r2, #1413
 3757 005c 1849     		ldr	r1, .L278
 3758 005e 1D48     		ldr	r0, .L278+20
 3759 0060 FFF7FEFF 		bl	rt_assert_handler
 3760              	.LVL557:
 3761              	.L272:
1414:rt_thread/src/ipc.c **** 
1415:rt_thread/src/ipc.c ****     /* resume all suspended thread */
1416:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(mb->parent.suspend_thread));
 3762              		.loc 1 1416 0 is_stmt 1
 3763 0064 06F11404 		add	r4, r6, #20
 3764              	.LVL558:
 3765 0068 0CE0     		b	.L273
 3766              	.L274:
 3767              	.LBB322:
 3768              	.LBB323:
 166:rt_thread/src/ipc.c **** 
 3769              		.loc 1 166 0
 3770 006a FFF7FEFF 		bl	rt_hw_interrupt_disable
 3771              	.LVL559:
 3772 006e 0546     		mov	r5, r0
 3773              	.LVL560:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 3774              		.loc 1 169 0
 3775 0070 2068     		ldr	r0, [r4]
 3776              	.LVL561:
 171:rt_thread/src/ipc.c **** 
 3777              		.loc 1 171 0
 3778 0072 4FF0FF33 		mov	r3, #-1
 3779 0076 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 3780              		.loc 1 178 0
 3781 0078 1438     		subs	r0, r0, #20
 3782              	.LVL562:
 3783 007a FFF7FEFF 		bl	rt_thread_resume
 3784              	.LVL563:
 181:rt_thread/src/ipc.c ****     }
 3785              		.loc 1 181 0
 3786 007e 2846     		mov	r0, r5
 3787 0080 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3788              	.LVL564:
 3789              	.L273:
ARM GAS  /tmp/ccObKSes.s 			page 96


 3790              	.LBB324:
 3791              	.LBB325:
 3792              		.loc 2 100 0
 3793 0084 2368     		ldr	r3, [r4]
 3794              	.LVL565:
 3795              	.LBE325:
 3796              	.LBE324:
 163:rt_thread/src/ipc.c ****     {
 3797              		.loc 1 163 0
 3798 0086 9C42     		cmp	r4, r3
 3799 0088 EFD1     		bne	.L274
 3800              	.LVL566:
 3801              	.LBE323:
 3802              	.LBE322:
1417:rt_thread/src/ipc.c **** 
1418:rt_thread/src/ipc.c ****     /* also resume all mailbox private suspended thread */
1419:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(mb->suspend_sender_thread));
 3803              		.loc 1 1419 0
 3804 008a 06F12804 		add	r4, r6, #40
 3805              	.LVL567:
 3806 008e 0CE0     		b	.L275
 3807              	.L276:
 3808              	.LBB326:
 3809              	.LBB327:
 166:rt_thread/src/ipc.c **** 
 3810              		.loc 1 166 0
 3811 0090 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3812              	.LVL568:
 3813 0094 0546     		mov	r5, r0
 3814              	.LVL569:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 3815              		.loc 1 169 0
 3816 0096 2068     		ldr	r0, [r4]
 3817              	.LVL570:
 171:rt_thread/src/ipc.c **** 
 3818              		.loc 1 171 0
 3819 0098 4FF0FF33 		mov	r3, #-1
 3820 009c C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 3821              		.loc 1 178 0
 3822 009e 1438     		subs	r0, r0, #20
 3823              	.LVL571:
 3824 00a0 FFF7FEFF 		bl	rt_thread_resume
 3825              	.LVL572:
 181:rt_thread/src/ipc.c ****     }
 3826              		.loc 1 181 0
 3827 00a4 2846     		mov	r0, r5
 3828 00a6 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3829              	.LVL573:
 3830              	.L275:
 3831              	.LBB328:
 3832              	.LBB329:
 3833              		.loc 2 100 0
 3834 00aa 2368     		ldr	r3, [r4]
 3835              	.LVL574:
 3836              	.LBE329:
 3837              	.LBE328:
ARM GAS  /tmp/ccObKSes.s 			page 97


 163:rt_thread/src/ipc.c ****     {
 3838              		.loc 1 163 0
 3839 00ac 9C42     		cmp	r4, r3
 3840 00ae EFD1     		bne	.L276
 3841              	.LVL575:
 3842              	.LBE327:
 3843              	.LBE326:
1420:rt_thread/src/ipc.c **** 
1421:rt_thread/src/ipc.c ****     /* free mailbox pool */
1422:rt_thread/src/ipc.c ****     RT_KERNEL_FREE(mb->msg_pool);
 3844              		.loc 1 1422 0
 3845 00b0 F069     		ldr	r0, [r6, #28]
 3846 00b2 FFF7FEFF 		bl	rt_free
 3847              	.LVL576:
1423:rt_thread/src/ipc.c **** 
1424:rt_thread/src/ipc.c ****     /* delete mailbox object */
1425:rt_thread/src/ipc.c ****     rt_object_delete(&(mb->parent.parent));
 3848              		.loc 1 1425 0
 3849 00b6 3046     		mov	r0, r6
 3850 00b8 FFF7FEFF 		bl	rt_object_delete
 3851              	.LVL577:
1426:rt_thread/src/ipc.c **** 
1427:rt_thread/src/ipc.c ****     return RT_EOK;
1428:rt_thread/src/ipc.c **** }
 3852              		.loc 1 1428 0
 3853 00bc 0020     		movs	r0, #0
 3854 00be 70BD     		pop	{r4, r5, r6, pc}
 3855              	.LVL578:
 3856              	.L279:
 3857              		.align	2
 3858              	.L278:
 3859 00c0 00000000 		.word	.LANCHOR24
 3860 00c4 9C000000 		.word	.LC4
 3861 00c8 C4000000 		.word	.LC5
 3862 00cc D4020000 		.word	.LC16
 3863 00d0 E4020000 		.word	.LC17
 3864 00d4 58030000 		.word	.LC19
 3865              		.cfi_endproc
 3866              	.LFE44:
 3868              		.section	.text.rt_mb_send_wait,"ax",%progbits
 3869              		.align	2
 3870              		.global	rt_mb_send_wait
 3871              		.thumb
 3872              		.thumb_func
 3874              	rt_mb_send_wait:
 3875              	.LFB45:
1429:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mb_delete);
1430:rt_thread/src/ipc.c **** #endif
1431:rt_thread/src/ipc.c **** 
1432:rt_thread/src/ipc.c **** /**
1433:rt_thread/src/ipc.c ****  * This function will send a mail to mailbox object. If the mailbox is full,
1434:rt_thread/src/ipc.c ****  * current thread will be suspended until timeout.
1435:rt_thread/src/ipc.c ****  *
1436:rt_thread/src/ipc.c ****  * @param mb the mailbox object
1437:rt_thread/src/ipc.c ****  * @param value the mail
1438:rt_thread/src/ipc.c ****  * @param timeout the waiting time
1439:rt_thread/src/ipc.c ****  *
ARM GAS  /tmp/ccObKSes.s 			page 98


1440:rt_thread/src/ipc.c ****  * @return the error code
1441:rt_thread/src/ipc.c ****  */
1442:rt_thread/src/ipc.c **** rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
1443:rt_thread/src/ipc.c ****                          rt_ubase_t   value,
1444:rt_thread/src/ipc.c ****                          rt_int32_t   timeout)
1445:rt_thread/src/ipc.c **** {
 3876              		.loc 1 1445 0
 3877              		.cfi_startproc
 3878              		@ args = 0, pretend = 0, frame = 8
 3879              		@ frame_needed = 0, uses_anonymous_args = 0
 3880              	.LVL579:
 3881 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3882              	.LCFI32:
 3883              		.cfi_def_cfa_offset 36
 3884              		.cfi_offset 4, -36
 3885              		.cfi_offset 5, -32
 3886              		.cfi_offset 6, -28
 3887              		.cfi_offset 7, -24
 3888              		.cfi_offset 8, -20
 3889              		.cfi_offset 9, -16
 3890              		.cfi_offset 10, -12
 3891              		.cfi_offset 11, -8
 3892              		.cfi_offset 14, -4
 3893 0004 83B0     		sub	sp, sp, #12
 3894              	.LCFI33:
 3895              		.cfi_def_cfa_offset 48
 3896 0006 8946     		mov	r9, r1
 3897 0008 0192     		str	r2, [sp, #4]
1446:rt_thread/src/ipc.c ****     struct rt_thread *thread;
1447:rt_thread/src/ipc.c ****     register rt_ubase_t temp;
1448:rt_thread/src/ipc.c ****     rt_uint32_t tick_delta;
1449:rt_thread/src/ipc.c **** 
1450:rt_thread/src/ipc.c ****     /* parameter check */
1451:rt_thread/src/ipc.c ****     RT_ASSERT(mb != RT_NULL);
 3898              		.loc 1 1451 0
 3899 000a 0646     		mov	r6, r0
 3900 000c 28B9     		cbnz	r0, .L281
 3901              		.loc 1 1451 0 is_stmt 0 discriminator 1
 3902 000e 40F2AB52 		movw	r2, #1451
 3903              	.LVL580:
 3904 0012 7449     		ldr	r1, .L304
 3905              	.LVL581:
 3906 0014 7448     		ldr	r0, .L304+4
 3907              	.LVL582:
 3908 0016 FFF7FEFF 		bl	rt_assert_handler
 3909              	.LVL583:
 3910              	.L281:
1452:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
 3911              		.loc 1 1452 0 is_stmt 1
 3912 001a 3046     		mov	r0, r6
 3913 001c FFF7FEFF 		bl	rt_object_get_type
 3914              	.LVL584:
 3915 0020 0528     		cmp	r0, #5
 3916 0022 05D0     		beq	.L282
 3917              		.loc 1 1452 0 is_stmt 0 discriminator 1
 3918 0024 40F2AC52 		movw	r2, #1452
 3919 0028 6E49     		ldr	r1, .L304
ARM GAS  /tmp/ccObKSes.s 			page 99


 3920 002a 7048     		ldr	r0, .L304+8
 3921 002c FFF7FEFF 		bl	rt_assert_handler
 3922              	.LVL585:
 3923              	.L282:
1453:rt_thread/src/ipc.c **** 
1454:rt_thread/src/ipc.c ****     /* initialize delta tick */
1455:rt_thread/src/ipc.c ****     tick_delta = 0;
1456:rt_thread/src/ipc.c ****     /* get current thread */
1457:rt_thread/src/ipc.c ****     thread = rt_thread_self();
 3924              		.loc 1 1457 0 is_stmt 1
 3925 0030 FFF7FEFF 		bl	rt_thread_self
 3926              	.LVL586:
 3927 0034 0446     		mov	r4, r0
 3928              	.LVL587:
1458:rt_thread/src/ipc.c **** 
1459:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mb->parent.parent)));
 3929              		.loc 1 1459 0
 3930 0036 6E4B     		ldr	r3, .L304+12
 3931 0038 1B68     		ldr	r3, [r3]
 3932 003a 0BB1     		cbz	r3, .L283
 3933              		.loc 1 1459 0 is_stmt 0 discriminator 1
 3934 003c 3046     		mov	r0, r6
 3935              	.LVL588:
 3936 003e 9847     		blx	r3
 3937              	.LVL589:
 3938              	.L283:
1460:rt_thread/src/ipc.c **** 
1461:rt_thread/src/ipc.c ****     /* disable interrupt */
1462:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 3939              		.loc 1 1462 0 is_stmt 1
 3940 0040 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3941              	.LVL590:
 3942 0044 8046     		mov	r8, r0
 3943              	.LVL591:
1463:rt_thread/src/ipc.c **** 
1464:rt_thread/src/ipc.c ****     /* for non-blocking call */
1465:rt_thread/src/ipc.c ****     if (mb->entry == mb->size && timeout == 0)
 3944              		.loc 1 1465 0
 3945 0046 728C     		ldrh	r2, [r6, #34]
 3946 0048 338C     		ldrh	r3, [r6, #32]
 3947 004a 9A42     		cmp	r2, r3
 3948 004c 40F09B80 		bne	.L301
 3949              		.loc 1 1465 0 is_stmt 0 discriminator 1
 3950 0050 019B     		ldr	r3, [sp, #4]
 3951 0052 002B     		cmp	r3, #0
 3952 0054 40F09980 		bne	.L302
1466:rt_thread/src/ipc.c ****     {
1467:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 3953              		.loc 1 1467 0 is_stmt 1
 3954 0058 FFF7FEFF 		bl	rt_hw_interrupt_enable
 3955              	.LVL592:
1468:rt_thread/src/ipc.c **** 
1469:rt_thread/src/ipc.c ****         return -RT_EFULL;
 3956              		.loc 1 1469 0
 3957 005c 6FF00200 		mvn	r0, #2
 3958 0060 BCE0     		b	.L285
 3959              	.LVL593:
ARM GAS  /tmp/ccObKSes.s 			page 100


 3960              	.L298:
1470:rt_thread/src/ipc.c ****     }
1471:rt_thread/src/ipc.c **** 
1472:rt_thread/src/ipc.c ****     /* mailbox is full */
1473:rt_thread/src/ipc.c ****     while (mb->entry == mb->size)
1474:rt_thread/src/ipc.c ****     {
1475:rt_thread/src/ipc.c ****         /* reset error number in thread */
1476:rt_thread/src/ipc.c ****         thread->error = RT_EOK;
 3961              		.loc 1 1476 0
 3962 0062 0023     		movs	r3, #0
 3963 0064 2363     		str	r3, [r4, #48]
1477:rt_thread/src/ipc.c **** 
1478:rt_thread/src/ipc.c ****         /* no waiting, return timeout */
1479:rt_thread/src/ipc.c ****         if (timeout == 0)
 3964              		.loc 1 1479 0
 3965 0066 019B     		ldr	r3, [sp, #4]
 3966 0068 2BB9     		cbnz	r3, .L286
1480:rt_thread/src/ipc.c ****         {
1481:rt_thread/src/ipc.c ****             /* enable interrupt */
1482:rt_thread/src/ipc.c ****             rt_hw_interrupt_enable(temp);
 3967              		.loc 1 1482 0
 3968 006a 4046     		mov	r0, r8
 3969 006c FFF7FEFF 		bl	rt_hw_interrupt_enable
 3970              	.LVL594:
1483:rt_thread/src/ipc.c **** 
1484:rt_thread/src/ipc.c ****             return -RT_EFULL;
 3971              		.loc 1 1484 0
 3972 0070 6FF00200 		mvn	r0, #2
 3973 0074 B2E0     		b	.L285
 3974              	.L286:
 3975              	.LBB345:
1485:rt_thread/src/ipc.c ****         }
1486:rt_thread/src/ipc.c **** 
1487:rt_thread/src/ipc.c ****         RT_DEBUG_IN_THREAD_CONTEXT;
 3976              		.loc 1 1487 0
 3977 0076 FFF7FEFF 		bl	rt_hw_interrupt_disable
 3978              	.LVL595:
 3979 007a 0546     		mov	r5, r0
 3980              	.LVL596:
 3981 007c FFF7FEFF 		bl	rt_thread_self
 3982              	.LVL597:
 3983 0080 58B9     		cbnz	r0, .L287
 3984              		.loc 1 1487 0 is_stmt 0 discriminator 1
 3985 0082 DFF860A1 		ldr	r10, .L304
 3986 0086 5146     		mov	r1, r10
 3987 0088 5A48     		ldr	r0, .L304+16
 3988 008a FFF7FEFF 		bl	rt_kprintf
 3989              	.LVL598:
 3990 008e 40F2CF52 		movw	r2, #1487
 3991 0092 5146     		mov	r1, r10
 3992 0094 5848     		ldr	r0, .L304+20
 3993 0096 FFF7FEFF 		bl	rt_assert_handler
 3994              	.LVL599:
 3995              	.L287:
 3996              	.LBB346:
 3997              		.loc 1 1487 0 discriminator 5
 3998 009a FFF7FEFF 		bl	rt_hw_interrupt_disable
ARM GAS  /tmp/ccObKSes.s 			page 101


 3999              	.LVL600:
 4000 009e 8246     		mov	r10, r0
 4001              	.LVL601:
 4002 00a0 FFF7FEFF 		bl	rt_interrupt_get_nest
 4003              	.LVL602:
 4004 00a4 58B1     		cbz	r0, .L288
 4005              		.loc 1 1487 0 discriminator 6
 4006 00a6 DFF83CB1 		ldr	fp, .L304
 4007 00aa 5946     		mov	r1, fp
 4008 00ac 5348     		ldr	r0, .L304+24
 4009 00ae FFF7FEFF 		bl	rt_kprintf
 4010              	.LVL603:
 4011 00b2 40F2CF52 		movw	r2, #1487
 4012 00b6 5946     		mov	r1, fp
 4013 00b8 4F48     		ldr	r0, .L304+20
 4014 00ba FFF7FEFF 		bl	rt_assert_handler
 4015              	.LVL604:
 4016              	.L288:
 4017              		.loc 1 1487 0 discriminator 10
 4018 00be 5046     		mov	r0, r10
 4019 00c0 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4020              	.LVL605:
 4021              	.LBE346:
 4022 00c4 2846     		mov	r0, r5
 4023 00c6 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4024              	.LVL606:
 4025              	.LBE345:
1488:rt_thread/src/ipc.c ****         /* suspend current thread */
1489:rt_thread/src/ipc.c ****         rt_ipc_list_suspend(&(mb->suspend_sender_thread),
 4026              		.loc 1 1489 0 is_stmt 1 discriminator 10
 4027 00ca 06F12805 		add	r5, r6, #40
 4028              	.LVL607:
 4029 00ce 96F809A0 		ldrb	r10, [r6, #9]	@ zero_extendqisi2
 4030              	.LVL608:
 4031              	.LBB347:
 4032              	.LBB348:
  85:rt_thread/src/ipc.c **** 
 4033              		.loc 1 85 0 discriminator 10
 4034 00d2 2046     		mov	r0, r4
 4035 00d4 FFF7FEFF 		bl	rt_thread_suspend
 4036              	.LVL609:
  87:rt_thread/src/ipc.c ****     {
 4037              		.loc 1 87 0 discriminator 10
 4038 00d8 BAF1000F 		cmp	r10, #0
 4039 00dc 03D0     		beq	.L290
 4040 00de BAF1010F 		cmp	r10, #1
 4041 00e2 09D0     		beq	.L291
 4042 00e4 26E0     		b	.L289
 4043              	.L290:
  90:rt_thread/src/ipc.c ****         break;
 4044              		.loc 1 90 0
 4045 00e6 04F11403 		add	r3, r4, #20
 4046              	.LVL610:
 4047              	.LBB349:
 4048              	.LBB350:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 4049              		.loc 2 75 0
ARM GAS  /tmp/ccObKSes.s 			page 102


 4050 00ea 6A68     		ldr	r2, [r5, #4]
 4051 00ec 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 4052              		.loc 2 76 0
 4053 00ee 6A68     		ldr	r2, [r5, #4]
 4054 00f0 A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 4055              		.loc 2 78 0
 4056 00f2 6B60     		str	r3, [r5, #4]
  79:rt_thread/include/rtservice.h **** }
 4057              		.loc 2 79 0
 4058 00f4 6561     		str	r5, [r4, #20]
 4059 00f6 1DE0     		b	.L289
 4060              	.LVL611:
 4061              	.L291:
 4062              	.LBE350:
 4063              	.LBE349:
 4064              	.LBB351:
  99:rt_thread/src/ipc.c ****             {
 4065              		.loc 1 99 0
 4066 00f8 B36A     		ldr	r3, [r6, #40]
 4067              	.LVL612:
 4068 00fa 0FE0     		b	.L292
 4069              	.L295:
 4070              	.LVL613:
 104:rt_thread/src/ipc.c ****                 {
 4071              		.loc 1 104 0
 4072 00fc 94F83510 		ldrb	r1, [r4, #53]	@ zero_extendqisi2
 4073 0100 93F82120 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
 4074 0104 9142     		cmp	r1, r2
 4075 0106 08D2     		bcs	.L293
 107:rt_thread/src/ipc.c ****                     break;
 4076              		.loc 1 107 0
 4077 0108 04F11402 		add	r2, r4, #20
 4078              	.LVL614:
 4079              	.LBB352:
 4080              	.LBB353:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 4081              		.loc 2 75 0
 4082 010c 5968     		ldr	r1, [r3, #4]
 4083 010e 0A60     		str	r2, [r1]
  76:rt_thread/include/rtservice.h **** 
 4084              		.loc 2 76 0
 4085 0110 5968     		ldr	r1, [r3, #4]
 4086 0112 A161     		str	r1, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 4087              		.loc 2 78 0
 4088 0114 5A60     		str	r2, [r3, #4]
  79:rt_thread/include/rtservice.h **** }
 4089              		.loc 2 79 0
 4090 0116 6361     		str	r3, [r4, #20]
 4091 0118 02E0     		b	.L294
 4092              	.LVL615:
 4093              	.L293:
 4094              	.LBE353:
 4095              	.LBE352:
  99:rt_thread/src/ipc.c ****             {
ARM GAS  /tmp/ccObKSes.s 			page 103


 4096              		.loc 1 99 0
 4097 011a 1B68     		ldr	r3, [r3]
 4098              	.LVL616:
 4099              	.L292:
 4100 011c 9D42     		cmp	r5, r3
 4101 011e EDD1     		bne	.L295
 4102              	.L294:
 116:rt_thread/src/ipc.c ****                 rt_list_insert_before(list, &(thread->tlist));
 4103              		.loc 1 116 0
 4104 0120 9D42     		cmp	r5, r3
 4105 0122 07D1     		bne	.L289
 117:rt_thread/src/ipc.c ****         }
 4106              		.loc 1 117 0
 4107 0124 04F11403 		add	r3, r4, #20
 4108              	.LVL617:
 4109              	.LBB354:
 4110              	.LBB355:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 4111              		.loc 2 75 0
 4112 0128 6A68     		ldr	r2, [r5, #4]
 4113 012a 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 4114              		.loc 2 76 0
 4115 012c 6A68     		ldr	r2, [r5, #4]
 4116 012e A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 4117              		.loc 2 78 0
 4118 0130 6B60     		str	r3, [r5, #4]
  79:rt_thread/include/rtservice.h **** }
 4119              		.loc 2 79 0
 4120 0132 6561     		str	r5, [r4, #20]
 4121              	.LVL618:
 4122              	.L289:
 4123              	.LBE355:
 4124              	.LBE354:
 4125              	.LBE351:
 4126              	.LBE348:
 4127              	.LBE347:
1490:rt_thread/src/ipc.c ****                             thread,
1491:rt_thread/src/ipc.c ****                             mb->parent.parent.flag);
1492:rt_thread/src/ipc.c **** 
1493:rt_thread/src/ipc.c ****         /* has waiting time, start thread timer */
1494:rt_thread/src/ipc.c ****         if (timeout > 0)
 4128              		.loc 1 1494 0
 4129 0134 019B     		ldr	r3, [sp, #4]
 4130 0136 002B     		cmp	r3, #0
 4131 0138 0CDD     		ble	.L296
1495:rt_thread/src/ipc.c ****         {
1496:rt_thread/src/ipc.c ****             /* get the start tick of timer */
1497:rt_thread/src/ipc.c ****             tick_delta = rt_tick_get();
 4132              		.loc 1 1497 0
 4133 013a FFF7FEFF 		bl	rt_tick_get
 4134              	.LVL619:
 4135 013e 0746     		mov	r7, r0
 4136              	.LVL620:
1498:rt_thread/src/ipc.c **** 
1499:rt_thread/src/ipc.c ****             RT_DEBUG_LOG(RT_DEBUG_IPC, ("mb_send_wait: start timer of thread:%s\n",
ARM GAS  /tmp/ccObKSes.s 			page 104


1500:rt_thread/src/ipc.c ****                                         thread->name));
1501:rt_thread/src/ipc.c **** 
1502:rt_thread/src/ipc.c ****             /* reset the timeout of thread timer and start it */
1503:rt_thread/src/ipc.c ****             rt_timer_control(&(thread->thread_timer),
 4137              		.loc 1 1503 0
 4138 0140 04F16005 		add	r5, r4, #96
 4139 0144 01AA     		add	r2, sp, #4
 4140              	.LVL621:
 4141 0146 0021     		movs	r1, #0
 4142 0148 2846     		mov	r0, r5
 4143              	.LVL622:
 4144 014a FFF7FEFF 		bl	rt_timer_control
 4145              	.LVL623:
1504:rt_thread/src/ipc.c ****                              RT_TIMER_CTRL_SET_TIME,
1505:rt_thread/src/ipc.c ****                              &timeout);
1506:rt_thread/src/ipc.c ****             rt_timer_start(&(thread->thread_timer));
 4146              		.loc 1 1506 0
 4147 014e 2846     		mov	r0, r5
 4148 0150 FFF7FEFF 		bl	rt_timer_start
 4149              	.LVL624:
 4150              	.L296:
1507:rt_thread/src/ipc.c ****         }
1508:rt_thread/src/ipc.c **** 
1509:rt_thread/src/ipc.c ****         /* enable interrupt */
1510:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 4151              		.loc 1 1510 0
 4152 0154 4046     		mov	r0, r8
 4153 0156 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4154              	.LVL625:
1511:rt_thread/src/ipc.c **** 
1512:rt_thread/src/ipc.c ****         /* re-schedule */
1513:rt_thread/src/ipc.c ****         rt_schedule();
 4155              		.loc 1 1513 0
 4156 015a FFF7FEFF 		bl	rt_schedule
 4157              	.LVL626:
1514:rt_thread/src/ipc.c **** 
1515:rt_thread/src/ipc.c ****         /* resume from suspend state */
1516:rt_thread/src/ipc.c ****         if (thread->error != RT_EOK)
 4158              		.loc 1 1516 0
 4159 015e 206B     		ldr	r0, [r4, #48]
 4160 0160 0028     		cmp	r0, #0
 4161 0162 3BD1     		bne	.L285
1517:rt_thread/src/ipc.c ****         {
1518:rt_thread/src/ipc.c ****             /* return error */
1519:rt_thread/src/ipc.c ****             return thread->error;
1520:rt_thread/src/ipc.c ****         }
1521:rt_thread/src/ipc.c **** 
1522:rt_thread/src/ipc.c ****         /* disable interrupt */
1523:rt_thread/src/ipc.c ****         temp = rt_hw_interrupt_disable();
 4162              		.loc 1 1523 0
 4163 0164 FFF7FEFF 		bl	rt_hw_interrupt_disable
 4164              	.LVL627:
 4165 0168 8046     		mov	r8, r0
 4166              	.LVL628:
1524:rt_thread/src/ipc.c **** 
1525:rt_thread/src/ipc.c ****         /* if it's not waiting forever and then re-calculate timeout tick */
1526:rt_thread/src/ipc.c ****         if (timeout > 0)
ARM GAS  /tmp/ccObKSes.s 			page 105


 4167              		.loc 1 1526 0
 4168 016a 019B     		ldr	r3, [sp, #4]
 4169 016c 002B     		cmp	r3, #0
 4170 016e 0DDD     		ble	.L284
1527:rt_thread/src/ipc.c ****         {
1528:rt_thread/src/ipc.c ****             tick_delta = rt_tick_get() - tick_delta;
 4171              		.loc 1 1528 0
 4172 0170 FFF7FEFF 		bl	rt_tick_get
 4173              	.LVL629:
 4174 0174 C71B     		subs	r7, r0, r7
 4175              	.LVL630:
1529:rt_thread/src/ipc.c ****             timeout -= tick_delta;
 4176              		.loc 1 1529 0
 4177 0176 019B     		ldr	r3, [sp, #4]
 4178 0178 DB1B     		subs	r3, r3, r7
 4179 017a 0193     		str	r3, [sp, #4]
1530:rt_thread/src/ipc.c ****             if (timeout < 0)
 4180              		.loc 1 1530 0
 4181 017c 002B     		cmp	r3, #0
 4182 017e 05DA     		bge	.L284
1531:rt_thread/src/ipc.c ****                 timeout = 0;
 4183              		.loc 1 1531 0
 4184 0180 0023     		movs	r3, #0
 4185 0182 0193     		str	r3, [sp, #4]
 4186 0184 02E0     		b	.L284
 4187              	.LVL631:
 4188              	.L301:
 4189 0186 0027     		movs	r7, #0
 4190 0188 00E0     		b	.L284
 4191              	.L302:
 4192 018a 0027     		movs	r7, #0
 4193              	.LVL632:
 4194              	.L284:
1473:rt_thread/src/ipc.c ****     {
 4195              		.loc 1 1473 0
 4196 018c 728C     		ldrh	r2, [r6, #34]
 4197 018e 338C     		ldrh	r3, [r6, #32]
 4198 0190 9A42     		cmp	r2, r3
 4199 0192 3FF466AF 		beq	.L298
1532:rt_thread/src/ipc.c ****         }
1533:rt_thread/src/ipc.c ****     }
1534:rt_thread/src/ipc.c **** 
1535:rt_thread/src/ipc.c ****     /* set ptr */
1536:rt_thread/src/ipc.c ****     mb->msg_pool[mb->in_offset] = value;
 4200              		.loc 1 1536 0
 4201 0196 F369     		ldr	r3, [r6, #28]
 4202 0198 B28C     		ldrh	r2, [r6, #36]
 4203 019a 43F82290 		str	r9, [r3, r2, lsl #2]
1537:rt_thread/src/ipc.c ****     /* increase input offset */
1538:rt_thread/src/ipc.c ****     ++ mb->in_offset;
 4204              		.loc 1 1538 0
 4205 019e B38C     		ldrh	r3, [r6, #36]
 4206 01a0 0133     		adds	r3, r3, #1
 4207 01a2 9BB2     		uxth	r3, r3
 4208 01a4 B384     		strh	r3, [r6, #36]	@ movhi
1539:rt_thread/src/ipc.c ****     if (mb->in_offset >= mb->size)
 4209              		.loc 1 1539 0
ARM GAS  /tmp/ccObKSes.s 			page 106


 4210 01a6 328C     		ldrh	r2, [r6, #32]
 4211 01a8 9342     		cmp	r3, r2
 4212 01aa 01D3     		bcc	.L299
1540:rt_thread/src/ipc.c ****         mb->in_offset = 0;
 4213              		.loc 1 1540 0
 4214 01ac 0023     		movs	r3, #0
 4215 01ae B384     		strh	r3, [r6, #36]	@ movhi
 4216              	.L299:
1541:rt_thread/src/ipc.c ****     /* increase message entry */
1542:rt_thread/src/ipc.c ****     mb->entry ++;
 4217              		.loc 1 1542 0
 4218 01b0 738C     		ldrh	r3, [r6, #34]
 4219 01b2 0133     		adds	r3, r3, #1
 4220 01b4 7384     		strh	r3, [r6, #34]	@ movhi
1543:rt_thread/src/ipc.c **** 
1544:rt_thread/src/ipc.c ****     /* resume suspended thread */
1545:rt_thread/src/ipc.c ****     if (!rt_list_isempty(&mb->parent.suspend_thread))
 4221              		.loc 1 1545 0
 4222 01b6 06F11403 		add	r3, r6, #20
 4223              	.LVL633:
 4224              	.LBB356:
 4225              	.LBB357:
 4226              		.loc 2 100 0
 4227 01ba 7069     		ldr	r0, [r6, #20]
 4228              	.LVL634:
 4229              	.LBE357:
 4230              	.LBE356:
 4231              		.loc 1 1545 0
 4232 01bc 8342     		cmp	r3, r0
 4233 01be 09D0     		beq	.L300
 4234              	.LVL635:
 4235              	.LBB358:
 4236              	.LBB359:
 144:rt_thread/src/ipc.c **** 
 4237              		.loc 1 144 0
 4238 01c0 1438     		subs	r0, r0, #20
 4239              	.LVL636:
 4240 01c2 FFF7FEFF 		bl	rt_thread_resume
 4241              	.LVL637:
 4242              	.LBE359:
 4243              	.LBE358:
1546:rt_thread/src/ipc.c ****     {
1547:rt_thread/src/ipc.c ****         rt_ipc_list_resume(&(mb->parent.suspend_thread));
1548:rt_thread/src/ipc.c **** 
1549:rt_thread/src/ipc.c ****         /* enable interrupt */
1550:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 4244              		.loc 1 1550 0
 4245 01c6 4046     		mov	r0, r8
 4246 01c8 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4247              	.LVL638:
1551:rt_thread/src/ipc.c **** 
1552:rt_thread/src/ipc.c ****         rt_schedule();
 4248              		.loc 1 1552 0
 4249 01cc FFF7FEFF 		bl	rt_schedule
 4250              	.LVL639:
1553:rt_thread/src/ipc.c **** 
1554:rt_thread/src/ipc.c ****         return RT_EOK;
ARM GAS  /tmp/ccObKSes.s 			page 107


 4251              		.loc 1 1554 0
 4252 01d0 0020     		movs	r0, #0
 4253 01d2 03E0     		b	.L285
 4254              	.L300:
1555:rt_thread/src/ipc.c ****     }
1556:rt_thread/src/ipc.c **** 
1557:rt_thread/src/ipc.c ****     /* enable interrupt */
1558:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 4255              		.loc 1 1558 0
 4256 01d4 4046     		mov	r0, r8
 4257 01d6 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4258              	.LVL640:
1559:rt_thread/src/ipc.c **** 
1560:rt_thread/src/ipc.c ****     return RT_EOK;
 4259              		.loc 1 1560 0
 4260 01da 0020     		movs	r0, #0
 4261              	.LVL641:
 4262              	.L285:
1561:rt_thread/src/ipc.c **** }
 4263              		.loc 1 1561 0
 4264 01dc 03B0     		add	sp, sp, #12
 4265              	.LCFI34:
 4266              		.cfi_def_cfa_offset 36
 4267              		@ sp needed
 4268 01de BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4269              	.LVL642:
 4270              	.L305:
 4271 01e2 00BF     		.align	2
 4272              	.L304:
 4273 01e4 00000000 		.word	.LANCHOR25
 4274 01e8 D4020000 		.word	.LC16
 4275 01ec E4020000 		.word	.LC17
 4276 01f0 00000000 		.word	rt_object_put_hook
 4277 01f4 04010000 		.word	.LC7
 4278 01f8 C4000000 		.word	.LC5
 4279 01fc 9C000000 		.word	.LC4
 4280              		.cfi_endproc
 4281              	.LFE45:
 4283              		.section	.text.rt_mb_send,"ax",%progbits
 4284              		.align	2
 4285              		.global	rt_mb_send
 4286              		.thumb
 4287              		.thumb_func
 4289              	rt_mb_send:
 4290              	.LFB46:
1562:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mb_send_wait);
1563:rt_thread/src/ipc.c **** 
1564:rt_thread/src/ipc.c **** /**
1565:rt_thread/src/ipc.c ****  * This function will send a mail to mailbox object, if there are threads
1566:rt_thread/src/ipc.c ****  * suspended on mailbox object, it will be waked up. This function will return
1567:rt_thread/src/ipc.c ****  * immediately, if you want blocking send, use rt_mb_send_wait instead.
1568:rt_thread/src/ipc.c ****  *
1569:rt_thread/src/ipc.c ****  * @param mb the mailbox object
1570:rt_thread/src/ipc.c ****  * @param value the mail
1571:rt_thread/src/ipc.c ****  *
1572:rt_thread/src/ipc.c ****  * @return the error code
1573:rt_thread/src/ipc.c ****  */
ARM GAS  /tmp/ccObKSes.s 			page 108


1574:rt_thread/src/ipc.c **** rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
1575:rt_thread/src/ipc.c **** {
 4291              		.loc 1 1575 0
 4292              		.cfi_startproc
 4293              		@ args = 0, pretend = 0, frame = 0
 4294              		@ frame_needed = 0, uses_anonymous_args = 0
 4295              	.LVL643:
 4296 0000 08B5     		push	{r3, lr}
 4297              	.LCFI35:
 4298              		.cfi_def_cfa_offset 8
 4299              		.cfi_offset 3, -8
 4300              		.cfi_offset 14, -4
1576:rt_thread/src/ipc.c ****     return rt_mb_send_wait(mb, value, 0);
 4301              		.loc 1 1576 0
 4302 0002 0022     		movs	r2, #0
 4303 0004 FFF7FEFF 		bl	rt_mb_send_wait
 4304              	.LVL644:
1577:rt_thread/src/ipc.c **** }
 4305              		.loc 1 1577 0
 4306 0008 08BD     		pop	{r3, pc}
 4307              		.cfi_endproc
 4308              	.LFE46:
 4310 000a 00BF     		.section	.text.rt_mb_recv,"ax",%progbits
 4311              		.align	2
 4312              		.global	rt_mb_recv
 4313              		.thumb
 4314              		.thumb_func
 4316              	rt_mb_recv:
 4317              	.LFB47:
1578:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mb_send);
1579:rt_thread/src/ipc.c **** 
1580:rt_thread/src/ipc.c **** /**
1581:rt_thread/src/ipc.c ****  * This function will receive a mail from mailbox object, if there is no mail
1582:rt_thread/src/ipc.c ****  * in mailbox object, the thread shall wait for a specified time.
1583:rt_thread/src/ipc.c ****  *
1584:rt_thread/src/ipc.c ****  * @param mb the mailbox object
1585:rt_thread/src/ipc.c ****  * @param value the received mail will be saved in
1586:rt_thread/src/ipc.c ****  * @param timeout the waiting time
1587:rt_thread/src/ipc.c ****  *
1588:rt_thread/src/ipc.c ****  * @return the error code
1589:rt_thread/src/ipc.c ****  */
1590:rt_thread/src/ipc.c **** rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
1591:rt_thread/src/ipc.c **** {
 4318              		.loc 1 1591 0
 4319              		.cfi_startproc
 4320              		@ args = 0, pretend = 0, frame = 8
 4321              		@ frame_needed = 0, uses_anonymous_args = 0
 4322              	.LVL645:
 4323 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4324              	.LCFI36:
 4325              		.cfi_def_cfa_offset 36
 4326              		.cfi_offset 4, -36
 4327              		.cfi_offset 5, -32
 4328              		.cfi_offset 6, -28
 4329              		.cfi_offset 7, -24
 4330              		.cfi_offset 8, -20
 4331              		.cfi_offset 9, -16
ARM GAS  /tmp/ccObKSes.s 			page 109


 4332              		.cfi_offset 10, -12
 4333              		.cfi_offset 11, -8
 4334              		.cfi_offset 14, -4
 4335 0004 83B0     		sub	sp, sp, #12
 4336              	.LCFI37:
 4337              		.cfi_def_cfa_offset 48
 4338 0006 8946     		mov	r9, r1
 4339 0008 0192     		str	r2, [sp, #4]
1592:rt_thread/src/ipc.c ****     struct rt_thread *thread;
1593:rt_thread/src/ipc.c ****     register rt_ubase_t temp;
1594:rt_thread/src/ipc.c ****     rt_uint32_t tick_delta;
1595:rt_thread/src/ipc.c **** 
1596:rt_thread/src/ipc.c ****     /* parameter check */
1597:rt_thread/src/ipc.c ****     RT_ASSERT(mb != RT_NULL);
 4340              		.loc 1 1597 0
 4341 000a 0646     		mov	r6, r0
 4342 000c 28B9     		cbnz	r0, .L309
 4343              		.loc 1 1597 0 is_stmt 0 discriminator 1
 4344 000e 40F23D62 		movw	r2, #1597
 4345              	.LVL646:
 4346 0012 7A49     		ldr	r1, .L334
 4347              	.LVL647:
 4348 0014 7A48     		ldr	r0, .L334+4
 4349              	.LVL648:
 4350 0016 FFF7FEFF 		bl	rt_assert_handler
 4351              	.LVL649:
 4352              	.L309:
1598:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
 4353              		.loc 1 1598 0 is_stmt 1
 4354 001a 3046     		mov	r0, r6
 4355 001c FFF7FEFF 		bl	rt_object_get_type
 4356              	.LVL650:
 4357 0020 0528     		cmp	r0, #5
 4358 0022 05D0     		beq	.L310
 4359              		.loc 1 1598 0 is_stmt 0 discriminator 1
 4360 0024 40F23E62 		movw	r2, #1598
 4361 0028 7449     		ldr	r1, .L334
 4362 002a 7648     		ldr	r0, .L334+8
 4363 002c FFF7FEFF 		bl	rt_assert_handler
 4364              	.LVL651:
 4365              	.L310:
1599:rt_thread/src/ipc.c **** 
1600:rt_thread/src/ipc.c ****     /* initialize delta tick */
1601:rt_thread/src/ipc.c ****     tick_delta = 0;
1602:rt_thread/src/ipc.c ****     /* get current thread */
1603:rt_thread/src/ipc.c ****     thread = rt_thread_self();
 4366              		.loc 1 1603 0 is_stmt 1
 4367 0030 FFF7FEFF 		bl	rt_thread_self
 4368              	.LVL652:
 4369 0034 0446     		mov	r4, r0
 4370              	.LVL653:
1604:rt_thread/src/ipc.c **** 
1605:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mb->parent.parent)));
 4371              		.loc 1 1605 0
 4372 0036 744B     		ldr	r3, .L334+12
 4373 0038 1B68     		ldr	r3, [r3]
 4374 003a 0BB1     		cbz	r3, .L311
ARM GAS  /tmp/ccObKSes.s 			page 110


 4375              		.loc 1 1605 0 is_stmt 0 discriminator 1
 4376 003c 3046     		mov	r0, r6
 4377              	.LVL654:
 4378 003e 9847     		blx	r3
 4379              	.LVL655:
 4380              	.L311:
1606:rt_thread/src/ipc.c **** 
1607:rt_thread/src/ipc.c ****     /* disable interrupt */
1608:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 4381              		.loc 1 1608 0 is_stmt 1
 4382 0040 FFF7FEFF 		bl	rt_hw_interrupt_disable
 4383              	.LVL656:
 4384 0044 8046     		mov	r8, r0
 4385              	.LVL657:
1609:rt_thread/src/ipc.c **** 
1610:rt_thread/src/ipc.c ****     /* for non-blocking call */
1611:rt_thread/src/ipc.c ****     if (mb->entry == 0 && timeout == 0)
 4386              		.loc 1 1611 0
 4387 0046 738C     		ldrh	r3, [r6, #34]
 4388 0048 002B     		cmp	r3, #0
 4389 004a 40F09C80 		bne	.L330
 4390              		.loc 1 1611 0 is_stmt 0 discriminator 1
 4391 004e 019B     		ldr	r3, [sp, #4]
 4392 0050 002B     		cmp	r3, #0
 4393 0052 40F09A80 		bne	.L331
1612:rt_thread/src/ipc.c ****     {
1613:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 4394              		.loc 1 1613 0 is_stmt 1
 4395 0056 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4396              	.LVL658:
1614:rt_thread/src/ipc.c **** 
1615:rt_thread/src/ipc.c ****         return -RT_ETIMEOUT;
 4397              		.loc 1 1615 0
 4398 005a 6FF00100 		mvn	r0, #1
 4399 005e CAE0     		b	.L313
 4400              	.LVL659:
 4401              	.L326:
1616:rt_thread/src/ipc.c ****     }
1617:rt_thread/src/ipc.c **** 
1618:rt_thread/src/ipc.c ****     /* mailbox is empty */
1619:rt_thread/src/ipc.c ****     while (mb->entry == 0)
1620:rt_thread/src/ipc.c ****     {
1621:rt_thread/src/ipc.c ****         /* reset error number in thread */
1622:rt_thread/src/ipc.c ****         thread->error = RT_EOK;
 4402              		.loc 1 1622 0
 4403 0060 0023     		movs	r3, #0
 4404 0062 2363     		str	r3, [r4, #48]
1623:rt_thread/src/ipc.c **** 
1624:rt_thread/src/ipc.c ****         /* no waiting, return timeout */
1625:rt_thread/src/ipc.c ****         if (timeout == 0)
 4405              		.loc 1 1625 0
 4406 0064 019B     		ldr	r3, [sp, #4]
 4407 0066 33B9     		cbnz	r3, .L314
1626:rt_thread/src/ipc.c ****         {
1627:rt_thread/src/ipc.c ****             /* enable interrupt */
1628:rt_thread/src/ipc.c ****             rt_hw_interrupt_enable(temp);
 4408              		.loc 1 1628 0
ARM GAS  /tmp/ccObKSes.s 			page 111


 4409 0068 4046     		mov	r0, r8
 4410 006a FFF7FEFF 		bl	rt_hw_interrupt_enable
 4411              	.LVL660:
1629:rt_thread/src/ipc.c **** 
1630:rt_thread/src/ipc.c ****             thread->error = -RT_ETIMEOUT;
 4412              		.loc 1 1630 0
 4413 006e 6FF00100 		mvn	r0, #1
 4414 0072 2063     		str	r0, [r4, #48]
1631:rt_thread/src/ipc.c **** 
1632:rt_thread/src/ipc.c ****             return -RT_ETIMEOUT;
 4415              		.loc 1 1632 0
 4416 0074 BFE0     		b	.L313
 4417              	.L314:
 4418              	.LBB375:
1633:rt_thread/src/ipc.c ****         }
1634:rt_thread/src/ipc.c **** 
1635:rt_thread/src/ipc.c ****         RT_DEBUG_IN_THREAD_CONTEXT;
 4419              		.loc 1 1635 0
 4420 0076 FFF7FEFF 		bl	rt_hw_interrupt_disable
 4421              	.LVL661:
 4422 007a 0546     		mov	r5, r0
 4423              	.LVL662:
 4424 007c FFF7FEFF 		bl	rt_thread_self
 4425              	.LVL663:
 4426 0080 58B9     		cbnz	r0, .L315
 4427              		.loc 1 1635 0 is_stmt 0 discriminator 1
 4428 0082 DFF878A1 		ldr	r10, .L334
 4429 0086 5146     		mov	r1, r10
 4430 0088 6048     		ldr	r0, .L334+16
 4431 008a FFF7FEFF 		bl	rt_kprintf
 4432              	.LVL664:
 4433 008e 40F26362 		movw	r2, #1635
 4434 0092 5146     		mov	r1, r10
 4435 0094 5E48     		ldr	r0, .L334+20
 4436 0096 FFF7FEFF 		bl	rt_assert_handler
 4437              	.LVL665:
 4438              	.L315:
 4439              	.LBB376:
 4440              		.loc 1 1635 0 discriminator 5
 4441 009a FFF7FEFF 		bl	rt_hw_interrupt_disable
 4442              	.LVL666:
 4443 009e 8246     		mov	r10, r0
 4444              	.LVL667:
 4445 00a0 FFF7FEFF 		bl	rt_interrupt_get_nest
 4446              	.LVL668:
 4447 00a4 58B1     		cbz	r0, .L316
 4448              		.loc 1 1635 0 discriminator 6
 4449 00a6 DFF854B1 		ldr	fp, .L334
 4450 00aa 5946     		mov	r1, fp
 4451 00ac 5948     		ldr	r0, .L334+24
 4452 00ae FFF7FEFF 		bl	rt_kprintf
 4453              	.LVL669:
 4454 00b2 40F26362 		movw	r2, #1635
 4455 00b6 5946     		mov	r1, fp
 4456 00b8 5548     		ldr	r0, .L334+20
 4457 00ba FFF7FEFF 		bl	rt_assert_handler
 4458              	.LVL670:
ARM GAS  /tmp/ccObKSes.s 			page 112


 4459              	.L316:
 4460              		.loc 1 1635 0 discriminator 10
 4461 00be 5046     		mov	r0, r10
 4462 00c0 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4463              	.LVL671:
 4464              	.LBE376:
 4465 00c4 2846     		mov	r0, r5
 4466 00c6 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4467              	.LVL672:
 4468              	.LBE375:
1636:rt_thread/src/ipc.c ****         /* suspend current thread */
1637:rt_thread/src/ipc.c ****         rt_ipc_list_suspend(&(mb->parent.suspend_thread),
 4469              		.loc 1 1637 0 is_stmt 1 discriminator 10
 4470 00ca 06F11405 		add	r5, r6, #20
 4471              	.LVL673:
 4472 00ce 96F809A0 		ldrb	r10, [r6, #9]	@ zero_extendqisi2
 4473              	.LVL674:
 4474              	.LBB377:
 4475              	.LBB378:
  85:rt_thread/src/ipc.c **** 
 4476              		.loc 1 85 0 discriminator 10
 4477 00d2 2046     		mov	r0, r4
 4478 00d4 FFF7FEFF 		bl	rt_thread_suspend
 4479              	.LVL675:
  87:rt_thread/src/ipc.c ****     {
 4480              		.loc 1 87 0 discriminator 10
 4481 00d8 BAF1000F 		cmp	r10, #0
 4482 00dc 03D0     		beq	.L318
 4483 00de BAF1010F 		cmp	r10, #1
 4484 00e2 09D0     		beq	.L319
 4485 00e4 26E0     		b	.L317
 4486              	.L318:
  90:rt_thread/src/ipc.c ****         break;
 4487              		.loc 1 90 0
 4488 00e6 04F11403 		add	r3, r4, #20
 4489              	.LVL676:
 4490              	.LBB379:
 4491              	.LBB380:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 4492              		.loc 2 75 0
 4493 00ea 6A68     		ldr	r2, [r5, #4]
 4494 00ec 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 4495              		.loc 2 76 0
 4496 00ee 6A68     		ldr	r2, [r5, #4]
 4497 00f0 A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 4498              		.loc 2 78 0
 4499 00f2 6B60     		str	r3, [r5, #4]
  79:rt_thread/include/rtservice.h **** }
 4500              		.loc 2 79 0
 4501 00f4 6561     		str	r5, [r4, #20]
 4502 00f6 1DE0     		b	.L317
 4503              	.LVL677:
 4504              	.L319:
 4505              	.LBE380:
 4506              	.LBE379:
ARM GAS  /tmp/ccObKSes.s 			page 113


 4507              	.LBB381:
  99:rt_thread/src/ipc.c ****             {
 4508              		.loc 1 99 0
 4509 00f8 7369     		ldr	r3, [r6, #20]
 4510              	.LVL678:
 4511 00fa 0FE0     		b	.L320
 4512              	.L323:
 4513              	.LVL679:
 104:rt_thread/src/ipc.c ****                 {
 4514              		.loc 1 104 0
 4515 00fc 94F83510 		ldrb	r1, [r4, #53]	@ zero_extendqisi2
 4516 0100 93F82120 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
 4517 0104 9142     		cmp	r1, r2
 4518 0106 08D2     		bcs	.L321
 107:rt_thread/src/ipc.c ****                     break;
 4519              		.loc 1 107 0
 4520 0108 04F11402 		add	r2, r4, #20
 4521              	.LVL680:
 4522              	.LBB382:
 4523              	.LBB383:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 4524              		.loc 2 75 0
 4525 010c 5968     		ldr	r1, [r3, #4]
 4526 010e 0A60     		str	r2, [r1]
  76:rt_thread/include/rtservice.h **** 
 4527              		.loc 2 76 0
 4528 0110 5968     		ldr	r1, [r3, #4]
 4529 0112 A161     		str	r1, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 4530              		.loc 2 78 0
 4531 0114 5A60     		str	r2, [r3, #4]
  79:rt_thread/include/rtservice.h **** }
 4532              		.loc 2 79 0
 4533 0116 6361     		str	r3, [r4, #20]
 4534 0118 02E0     		b	.L322
 4535              	.LVL681:
 4536              	.L321:
 4537              	.LBE383:
 4538              	.LBE382:
  99:rt_thread/src/ipc.c ****             {
 4539              		.loc 1 99 0
 4540 011a 1B68     		ldr	r3, [r3]
 4541              	.LVL682:
 4542              	.L320:
 4543 011c 9D42     		cmp	r5, r3
 4544 011e EDD1     		bne	.L323
 4545              	.L322:
 116:rt_thread/src/ipc.c ****                 rt_list_insert_before(list, &(thread->tlist));
 4546              		.loc 1 116 0
 4547 0120 9D42     		cmp	r5, r3
 4548 0122 07D1     		bne	.L317
 117:rt_thread/src/ipc.c ****         }
 4549              		.loc 1 117 0
 4550 0124 04F11403 		add	r3, r4, #20
 4551              	.LVL683:
 4552              	.LBB384:
 4553              	.LBB385:
ARM GAS  /tmp/ccObKSes.s 			page 114


  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 4554              		.loc 2 75 0
 4555 0128 6A68     		ldr	r2, [r5, #4]
 4556 012a 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 4557              		.loc 2 76 0
 4558 012c 6A68     		ldr	r2, [r5, #4]
 4559 012e A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 4560              		.loc 2 78 0
 4561 0130 6B60     		str	r3, [r5, #4]
  79:rt_thread/include/rtservice.h **** }
 4562              		.loc 2 79 0
 4563 0132 6561     		str	r5, [r4, #20]
 4564              	.LVL684:
 4565              	.L317:
 4566              	.LBE385:
 4567              	.LBE384:
 4568              	.LBE381:
 4569              	.LBE378:
 4570              	.LBE377:
1638:rt_thread/src/ipc.c ****                             thread,
1639:rt_thread/src/ipc.c ****                             mb->parent.parent.flag);
1640:rt_thread/src/ipc.c **** 
1641:rt_thread/src/ipc.c ****         /* has waiting time, start thread timer */
1642:rt_thread/src/ipc.c ****         if (timeout > 0)
 4571              		.loc 1 1642 0
 4572 0134 019B     		ldr	r3, [sp, #4]
 4573 0136 002B     		cmp	r3, #0
 4574 0138 0CDD     		ble	.L324
1643:rt_thread/src/ipc.c ****         {
1644:rt_thread/src/ipc.c ****             /* get the start tick of timer */
1645:rt_thread/src/ipc.c ****             tick_delta = rt_tick_get();
 4575              		.loc 1 1645 0
 4576 013a FFF7FEFF 		bl	rt_tick_get
 4577              	.LVL685:
 4578 013e 0746     		mov	r7, r0
 4579              	.LVL686:
1646:rt_thread/src/ipc.c **** 
1647:rt_thread/src/ipc.c ****             RT_DEBUG_LOG(RT_DEBUG_IPC, ("mb_recv: start timer of thread:%s\n",
1648:rt_thread/src/ipc.c ****                                         thread->name));
1649:rt_thread/src/ipc.c **** 
1650:rt_thread/src/ipc.c ****             /* reset the timeout of thread timer and start it */
1651:rt_thread/src/ipc.c ****             rt_timer_control(&(thread->thread_timer),
 4580              		.loc 1 1651 0
 4581 0140 04F16005 		add	r5, r4, #96
 4582 0144 01AA     		add	r2, sp, #4
 4583              	.LVL687:
 4584 0146 0021     		movs	r1, #0
 4585 0148 2846     		mov	r0, r5
 4586              	.LVL688:
 4587 014a FFF7FEFF 		bl	rt_timer_control
 4588              	.LVL689:
1652:rt_thread/src/ipc.c ****                              RT_TIMER_CTRL_SET_TIME,
1653:rt_thread/src/ipc.c ****                              &timeout);
1654:rt_thread/src/ipc.c ****             rt_timer_start(&(thread->thread_timer));
 4589              		.loc 1 1654 0
ARM GAS  /tmp/ccObKSes.s 			page 115


 4590 014e 2846     		mov	r0, r5
 4591 0150 FFF7FEFF 		bl	rt_timer_start
 4592              	.LVL690:
 4593              	.L324:
1655:rt_thread/src/ipc.c ****         }
1656:rt_thread/src/ipc.c **** 
1657:rt_thread/src/ipc.c ****         /* enable interrupt */
1658:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 4594              		.loc 1 1658 0
 4595 0154 4046     		mov	r0, r8
 4596 0156 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4597              	.LVL691:
1659:rt_thread/src/ipc.c **** 
1660:rt_thread/src/ipc.c ****         /* re-schedule */
1661:rt_thread/src/ipc.c ****         rt_schedule();
 4598              		.loc 1 1661 0
 4599 015a FFF7FEFF 		bl	rt_schedule
 4600              	.LVL692:
1662:rt_thread/src/ipc.c **** 
1663:rt_thread/src/ipc.c ****         /* resume from suspend state */
1664:rt_thread/src/ipc.c ****         if (thread->error != RT_EOK)
 4601              		.loc 1 1664 0
 4602 015e 206B     		ldr	r0, [r4, #48]
 4603 0160 0028     		cmp	r0, #0
 4604 0162 48D1     		bne	.L313
1665:rt_thread/src/ipc.c ****         {
1666:rt_thread/src/ipc.c ****             /* return error */
1667:rt_thread/src/ipc.c ****             return thread->error;
1668:rt_thread/src/ipc.c ****         }
1669:rt_thread/src/ipc.c **** 
1670:rt_thread/src/ipc.c ****         /* disable interrupt */
1671:rt_thread/src/ipc.c ****         temp = rt_hw_interrupt_disable();
 4605              		.loc 1 1671 0
 4606 0164 FFF7FEFF 		bl	rt_hw_interrupt_disable
 4607              	.LVL693:
 4608 0168 8046     		mov	r8, r0
 4609              	.LVL694:
1672:rt_thread/src/ipc.c **** 
1673:rt_thread/src/ipc.c ****         /* if it's not waiting forever and then re-calculate timeout tick */
1674:rt_thread/src/ipc.c ****         if (timeout > 0)
 4610              		.loc 1 1674 0
 4611 016a 019B     		ldr	r3, [sp, #4]
 4612 016c 002B     		cmp	r3, #0
 4613 016e 0DDD     		ble	.L312
1675:rt_thread/src/ipc.c ****         {
1676:rt_thread/src/ipc.c ****             tick_delta = rt_tick_get() - tick_delta;
 4614              		.loc 1 1676 0
 4615 0170 FFF7FEFF 		bl	rt_tick_get
 4616              	.LVL695:
 4617 0174 C71B     		subs	r7, r0, r7
 4618              	.LVL696:
1677:rt_thread/src/ipc.c ****             timeout -= tick_delta;
 4619              		.loc 1 1677 0
 4620 0176 019B     		ldr	r3, [sp, #4]
 4621 0178 DB1B     		subs	r3, r3, r7
 4622 017a 0193     		str	r3, [sp, #4]
1678:rt_thread/src/ipc.c ****             if (timeout < 0)
ARM GAS  /tmp/ccObKSes.s 			page 116


 4623              		.loc 1 1678 0
 4624 017c 002B     		cmp	r3, #0
 4625 017e 05DA     		bge	.L312
1679:rt_thread/src/ipc.c ****                 timeout = 0;
 4626              		.loc 1 1679 0
 4627 0180 0023     		movs	r3, #0
 4628 0182 0193     		str	r3, [sp, #4]
 4629 0184 02E0     		b	.L312
 4630              	.LVL697:
 4631              	.L330:
 4632 0186 0027     		movs	r7, #0
 4633 0188 00E0     		b	.L312
 4634              	.L331:
 4635 018a 0027     		movs	r7, #0
 4636              	.LVL698:
 4637              	.L312:
1619:rt_thread/src/ipc.c ****     {
 4638              		.loc 1 1619 0
 4639 018c 738C     		ldrh	r3, [r6, #34]
 4640 018e 002B     		cmp	r3, #0
 4641 0190 3FF466AF 		beq	.L326
1680:rt_thread/src/ipc.c ****         }
1681:rt_thread/src/ipc.c ****     }
1682:rt_thread/src/ipc.c **** 
1683:rt_thread/src/ipc.c ****     /* fill ptr */
1684:rt_thread/src/ipc.c ****     *value = mb->msg_pool[mb->out_offset];
 4642              		.loc 1 1684 0
 4643 0194 F369     		ldr	r3, [r6, #28]
 4644 0196 F28C     		ldrh	r2, [r6, #38]
 4645 0198 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4646 019c C9F80030 		str	r3, [r9]
1685:rt_thread/src/ipc.c **** 
1686:rt_thread/src/ipc.c ****     /* increase output offset */
1687:rt_thread/src/ipc.c ****     ++ mb->out_offset;
 4647              		.loc 1 1687 0
 4648 01a0 F38C     		ldrh	r3, [r6, #38]
 4649 01a2 0133     		adds	r3, r3, #1
 4650 01a4 9BB2     		uxth	r3, r3
 4651 01a6 F384     		strh	r3, [r6, #38]	@ movhi
1688:rt_thread/src/ipc.c ****     if (mb->out_offset >= mb->size)
 4652              		.loc 1 1688 0
 4653 01a8 328C     		ldrh	r2, [r6, #32]
 4654 01aa 9342     		cmp	r3, r2
 4655 01ac 01D3     		bcc	.L327
1689:rt_thread/src/ipc.c ****         mb->out_offset = 0;
 4656              		.loc 1 1689 0
 4657 01ae 0023     		movs	r3, #0
 4658 01b0 F384     		strh	r3, [r6, #38]	@ movhi
 4659              	.L327:
1690:rt_thread/src/ipc.c ****     /* decrease message entry */
1691:rt_thread/src/ipc.c ****     mb->entry --;
 4660              		.loc 1 1691 0
 4661 01b2 738C     		ldrh	r3, [r6, #34]
 4662 01b4 013B     		subs	r3, r3, #1
 4663 01b6 7384     		strh	r3, [r6, #34]	@ movhi
1692:rt_thread/src/ipc.c **** 
1693:rt_thread/src/ipc.c ****     /* resume suspended thread */
ARM GAS  /tmp/ccObKSes.s 			page 117


1694:rt_thread/src/ipc.c ****     if (!rt_list_isempty(&(mb->suspend_sender_thread)))
 4664              		.loc 1 1694 0
 4665 01b8 06F12803 		add	r3, r6, #40
 4666              	.LBB386:
 4667              	.LBB387:
 4668              		.loc 2 100 0
 4669 01bc B06A     		ldr	r0, [r6, #40]
 4670              	.LBE387:
 4671              	.LBE386:
 4672              		.loc 1 1694 0
 4673 01be 8342     		cmp	r3, r0
 4674 01c0 0ED0     		beq	.L328
 4675              	.LVL699:
 4676              	.LBB388:
 4677              	.LBB389:
 144:rt_thread/src/ipc.c **** 
 4678              		.loc 1 144 0
 4679 01c2 1438     		subs	r0, r0, #20
 4680              	.LVL700:
 4681 01c4 FFF7FEFF 		bl	rt_thread_resume
 4682              	.LVL701:
 4683              	.LBE389:
 4684              	.LBE388:
1695:rt_thread/src/ipc.c ****     {
1696:rt_thread/src/ipc.c ****         rt_ipc_list_resume(&(mb->suspend_sender_thread));
1697:rt_thread/src/ipc.c **** 
1698:rt_thread/src/ipc.c ****         /* enable interrupt */
1699:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 4685              		.loc 1 1699 0
 4686 01c8 4046     		mov	r0, r8
 4687 01ca FFF7FEFF 		bl	rt_hw_interrupt_enable
 4688              	.LVL702:
1700:rt_thread/src/ipc.c **** 
1701:rt_thread/src/ipc.c ****         RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mb->parent.parent)));
 4689              		.loc 1 1701 0
 4690 01ce 124B     		ldr	r3, .L334+28
 4691 01d0 1B68     		ldr	r3, [r3]
 4692 01d2 0BB1     		cbz	r3, .L329
 4693              		.loc 1 1701 0 is_stmt 0 discriminator 1
 4694 01d4 3046     		mov	r0, r6
 4695 01d6 9847     		blx	r3
 4696              	.LVL703:
 4697              	.L329:
1702:rt_thread/src/ipc.c **** 
1703:rt_thread/src/ipc.c ****         rt_schedule();
 4698              		.loc 1 1703 0 is_stmt 1
 4699 01d8 FFF7FEFF 		bl	rt_schedule
 4700              	.LVL704:
1704:rt_thread/src/ipc.c **** 
1705:rt_thread/src/ipc.c ****         return RT_EOK;
 4701              		.loc 1 1705 0
 4702 01dc 0020     		movs	r0, #0
 4703 01de 0AE0     		b	.L313
 4704              	.L328:
1706:rt_thread/src/ipc.c ****     }
1707:rt_thread/src/ipc.c **** 
1708:rt_thread/src/ipc.c ****     /* enable interrupt */
ARM GAS  /tmp/ccObKSes.s 			page 118


1709:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 4705              		.loc 1 1709 0
 4706 01e0 4046     		mov	r0, r8
 4707 01e2 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4708              	.LVL705:
1710:rt_thread/src/ipc.c **** 
1711:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mb->parent.parent)));
 4709              		.loc 1 1711 0
 4710 01e6 0C4B     		ldr	r3, .L334+28
 4711 01e8 1B68     		ldr	r3, [r3]
 4712 01ea 1BB1     		cbz	r3, .L332
 4713              		.loc 1 1711 0 is_stmt 0 discriminator 1
 4714 01ec 3046     		mov	r0, r6
 4715 01ee 9847     		blx	r3
 4716              	.LVL706:
1712:rt_thread/src/ipc.c **** 
1713:rt_thread/src/ipc.c ****     return RT_EOK;
 4717              		.loc 1 1713 0 is_stmt 1 discriminator 1
 4718 01f0 0020     		movs	r0, #0
 4719 01f2 00E0     		b	.L313
 4720              	.L332:
 4721              		.loc 1 1713 0 is_stmt 0
 4722 01f4 0020     		movs	r0, #0
 4723              	.LVL707:
 4724              	.L313:
1714:rt_thread/src/ipc.c **** }
 4725              		.loc 1 1714 0 is_stmt 1
 4726 01f6 03B0     		add	sp, sp, #12
 4727              	.LCFI38:
 4728              		.cfi_def_cfa_offset 36
 4729              		@ sp needed
 4730 01f8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4731              	.LVL708:
 4732              	.L335:
 4733              		.align	2
 4734              	.L334:
 4735 01fc 00000000 		.word	.LANCHOR26
 4736 0200 D4020000 		.word	.LC16
 4737 0204 E4020000 		.word	.LC17
 4738 0208 00000000 		.word	rt_object_trytake_hook
 4739 020c 04010000 		.word	.LC7
 4740 0210 C4000000 		.word	.LC5
 4741 0214 9C000000 		.word	.LC4
 4742 0218 00000000 		.word	rt_object_take_hook
 4743              		.cfi_endproc
 4744              	.LFE47:
 4746              		.section	.text.rt_mb_control,"ax",%progbits
 4747              		.align	2
 4748              		.global	rt_mb_control
 4749              		.thumb
 4750              		.thumb_func
 4752              	rt_mb_control:
 4753              	.LFB48:
1715:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mb_recv);
1716:rt_thread/src/ipc.c **** 
1717:rt_thread/src/ipc.c **** /**
1718:rt_thread/src/ipc.c ****  * This function can get or set some extra attributions of a mailbox object.
ARM GAS  /tmp/ccObKSes.s 			page 119


1719:rt_thread/src/ipc.c ****  *
1720:rt_thread/src/ipc.c ****  * @param mb the mailbox object
1721:rt_thread/src/ipc.c ****  * @param cmd the execution command
1722:rt_thread/src/ipc.c ****  * @param arg the execution argument
1723:rt_thread/src/ipc.c ****  *
1724:rt_thread/src/ipc.c ****  * @return the error code
1725:rt_thread/src/ipc.c ****  */
1726:rt_thread/src/ipc.c **** rt_err_t rt_mb_control(rt_mailbox_t mb, int cmd, void *arg)
1727:rt_thread/src/ipc.c **** {
 4754              		.loc 1 1727 0
 4755              		.cfi_startproc
 4756              		@ args = 0, pretend = 0, frame = 0
 4757              		@ frame_needed = 0, uses_anonymous_args = 0
 4758              	.LVL709:
 4759 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4760              	.LCFI39:
 4761              		.cfi_def_cfa_offset 24
 4762              		.cfi_offset 3, -24
 4763              		.cfi_offset 4, -20
 4764              		.cfi_offset 5, -16
 4765              		.cfi_offset 6, -12
 4766              		.cfi_offset 7, -8
 4767              		.cfi_offset 14, -4
 4768 0002 0C46     		mov	r4, r1
1728:rt_thread/src/ipc.c ****     rt_ubase_t level;
1729:rt_thread/src/ipc.c **** 
1730:rt_thread/src/ipc.c ****     /* parameter check */
1731:rt_thread/src/ipc.c ****     RT_ASSERT(mb != RT_NULL);
 4769              		.loc 1 1731 0
 4770 0004 0546     		mov	r5, r0
 4771 0006 28B9     		cbnz	r0, .L337
 4772              		.loc 1 1731 0 is_stmt 0 discriminator 1
 4773 0008 40F2C362 		movw	r2, #1731
 4774              	.LVL710:
 4775 000c 2349     		ldr	r1, .L346
 4776              	.LVL711:
 4777 000e 2448     		ldr	r0, .L346+4
 4778              	.LVL712:
 4779 0010 FFF7FEFF 		bl	rt_assert_handler
 4780              	.LVL713:
 4781              	.L337:
1732:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mb->parent.parent) == RT_Object_Class_MailBox);
 4782              		.loc 1 1732 0 is_stmt 1
 4783 0014 2846     		mov	r0, r5
 4784 0016 FFF7FEFF 		bl	rt_object_get_type
 4785              	.LVL714:
 4786 001a 0528     		cmp	r0, #5
 4787 001c 05D0     		beq	.L338
 4788              		.loc 1 1732 0 is_stmt 0 discriminator 1
 4789 001e 40F2C462 		movw	r2, #1732
 4790 0022 1E49     		ldr	r1, .L346
 4791 0024 1F48     		ldr	r0, .L346+8
 4792 0026 FFF7FEFF 		bl	rt_assert_handler
 4793              	.LVL715:
 4794              	.L338:
1733:rt_thread/src/ipc.c **** 
1734:rt_thread/src/ipc.c ****     if (cmd == RT_IPC_CMD_RESET)
ARM GAS  /tmp/ccObKSes.s 			page 120


 4795              		.loc 1 1734 0 is_stmt 1
 4796 002a 012C     		cmp	r4, #1
 4797 002c 33D1     		bne	.L344
1735:rt_thread/src/ipc.c ****     {
1736:rt_thread/src/ipc.c ****         /* disable interrupt */
1737:rt_thread/src/ipc.c ****         level = rt_hw_interrupt_disable();
 4798              		.loc 1 1737 0
 4799 002e FFF7FEFF 		bl	rt_hw_interrupt_disable
 4800              	.LVL716:
 4801 0032 0646     		mov	r6, r0
 4802              	.LVL717:
1738:rt_thread/src/ipc.c **** 
1739:rt_thread/src/ipc.c ****         /* resume all waiting thread */
1740:rt_thread/src/ipc.c ****         rt_ipc_list_resume_all(&(mb->parent.suspend_thread));
 4803              		.loc 1 1740 0
 4804 0034 05F11404 		add	r4, r5, #20
 4805              	.LVL718:
 4806 0038 0CE0     		b	.L340
 4807              	.LVL719:
 4808              	.L341:
 4809              	.LBB398:
 4810              	.LBB399:
 166:rt_thread/src/ipc.c **** 
 4811              		.loc 1 166 0
 4812 003a FFF7FEFF 		bl	rt_hw_interrupt_disable
 4813              	.LVL720:
 4814 003e 0746     		mov	r7, r0
 4815              	.LVL721:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 4816              		.loc 1 169 0
 4817 0040 2068     		ldr	r0, [r4]
 4818              	.LVL722:
 171:rt_thread/src/ipc.c **** 
 4819              		.loc 1 171 0
 4820 0042 4FF0FF33 		mov	r3, #-1
 4821 0046 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 4822              		.loc 1 178 0
 4823 0048 1438     		subs	r0, r0, #20
 4824              	.LVL723:
 4825 004a FFF7FEFF 		bl	rt_thread_resume
 4826              	.LVL724:
 181:rt_thread/src/ipc.c ****     }
 4827              		.loc 1 181 0
 4828 004e 3846     		mov	r0, r7
 4829 0050 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4830              	.LVL725:
 4831              	.L340:
 4832              	.LBB400:
 4833              	.LBB401:
 4834              		.loc 2 100 0
 4835 0054 2368     		ldr	r3, [r4]
 4836              	.LVL726:
 4837              	.LBE401:
 4838              	.LBE400:
 163:rt_thread/src/ipc.c ****     {
 4839              		.loc 1 163 0
ARM GAS  /tmp/ccObKSes.s 			page 121


 4840 0056 9C42     		cmp	r4, r3
 4841 0058 EFD1     		bne	.L341
 4842              	.LVL727:
 4843              	.LBE399:
 4844              	.LBE398:
1741:rt_thread/src/ipc.c ****         /* also resume all mailbox private suspended thread */
1742:rt_thread/src/ipc.c ****         rt_ipc_list_resume_all(&(mb->suspend_sender_thread));
 4845              		.loc 1 1742 0
 4846 005a 05F12804 		add	r4, r5, #40
 4847              	.LVL728:
 4848 005e 0CE0     		b	.L342
 4849              	.L343:
 4850              	.LBB402:
 4851              	.LBB403:
 166:rt_thread/src/ipc.c **** 
 4852              		.loc 1 166 0
 4853 0060 FFF7FEFF 		bl	rt_hw_interrupt_disable
 4854              	.LVL729:
 4855 0064 0746     		mov	r7, r0
 4856              	.LVL730:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 4857              		.loc 1 169 0
 4858 0066 2068     		ldr	r0, [r4]
 4859              	.LVL731:
 171:rt_thread/src/ipc.c **** 
 4860              		.loc 1 171 0
 4861 0068 4FF0FF33 		mov	r3, #-1
 4862 006c C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 4863              		.loc 1 178 0
 4864 006e 1438     		subs	r0, r0, #20
 4865              	.LVL732:
 4866 0070 FFF7FEFF 		bl	rt_thread_resume
 4867              	.LVL733:
 181:rt_thread/src/ipc.c ****     }
 4868              		.loc 1 181 0
 4869 0074 3846     		mov	r0, r7
 4870 0076 FFF7FEFF 		bl	rt_hw_interrupt_enable
 4871              	.LVL734:
 4872              	.L342:
 4873              	.LBB404:
 4874              	.LBB405:
 4875              		.loc 2 100 0
 4876 007a 2368     		ldr	r3, [r4]
 4877              	.LVL735:
 4878              	.LBE405:
 4879              	.LBE404:
 163:rt_thread/src/ipc.c ****     {
 4880              		.loc 1 163 0
 4881 007c 9C42     		cmp	r4, r3
 4882 007e EFD1     		bne	.L343
 4883              	.LVL736:
 4884              	.LBE403:
 4885              	.LBE402:
1743:rt_thread/src/ipc.c **** 
1744:rt_thread/src/ipc.c ****         /* re-init mailbox */
1745:rt_thread/src/ipc.c ****         mb->entry      = 0;
ARM GAS  /tmp/ccObKSes.s 			page 122


 4886              		.loc 1 1745 0
 4887 0080 0024     		movs	r4, #0
 4888 0082 6C84     		strh	r4, [r5, #34]	@ movhi
1746:rt_thread/src/ipc.c ****         mb->in_offset  = 0;
 4889              		.loc 1 1746 0
 4890 0084 AC84     		strh	r4, [r5, #36]	@ movhi
1747:rt_thread/src/ipc.c ****         mb->out_offset = 0;
 4891              		.loc 1 1747 0
 4892 0086 EC84     		strh	r4, [r5, #38]	@ movhi
1748:rt_thread/src/ipc.c **** 
1749:rt_thread/src/ipc.c ****         /* enable interrupt */
1750:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(level);
 4893              		.loc 1 1750 0
 4894 0088 3046     		mov	r0, r6
 4895 008a FFF7FEFF 		bl	rt_hw_interrupt_enable
 4896              	.LVL737:
1751:rt_thread/src/ipc.c **** 
1752:rt_thread/src/ipc.c ****         rt_schedule();
 4897              		.loc 1 1752 0
 4898 008e FFF7FEFF 		bl	rt_schedule
 4899              	.LVL738:
1753:rt_thread/src/ipc.c **** 
1754:rt_thread/src/ipc.c ****         return RT_EOK;
 4900              		.loc 1 1754 0
 4901 0092 2046     		mov	r0, r4
 4902 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4903              	.LVL739:
 4904              	.L344:
1755:rt_thread/src/ipc.c ****     }
1756:rt_thread/src/ipc.c **** 
1757:rt_thread/src/ipc.c ****     return -RT_ERROR;
 4905              		.loc 1 1757 0
 4906 0096 4FF0FF30 		mov	r0, #-1
1758:rt_thread/src/ipc.c **** }
 4907              		.loc 1 1758 0
 4908 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4909              	.LVL740:
 4910              	.L347:
 4911              		.align	2
 4912              	.L346:
 4913 009c 00000000 		.word	.LANCHOR27
 4914 00a0 D4020000 		.word	.LC16
 4915 00a4 E4020000 		.word	.LC17
 4916              		.cfi_endproc
 4917              	.LFE48:
 4919              		.section	.text.rt_mq_init,"ax",%progbits
 4920              		.align	2
 4921              		.global	rt_mq_init
 4922              		.thumb
 4923              		.thumb_func
 4925              	rt_mq_init:
 4926              	.LFB49:
1759:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mb_control);
1760:rt_thread/src/ipc.c **** #endif /* end of RT_USING_MAILBOX */
1761:rt_thread/src/ipc.c **** 
1762:rt_thread/src/ipc.c **** #ifdef RT_USING_MESSAGEQUEUE
1763:rt_thread/src/ipc.c **** struct rt_mq_message
ARM GAS  /tmp/ccObKSes.s 			page 123


1764:rt_thread/src/ipc.c **** {
1765:rt_thread/src/ipc.c ****     struct rt_mq_message *next;
1766:rt_thread/src/ipc.c **** };
1767:rt_thread/src/ipc.c **** 
1768:rt_thread/src/ipc.c **** /**
1769:rt_thread/src/ipc.c ****  * This function will initialize a message queue and put it under control of
1770:rt_thread/src/ipc.c ****  * resource management.
1771:rt_thread/src/ipc.c ****  *
1772:rt_thread/src/ipc.c ****  * @param mq the message object
1773:rt_thread/src/ipc.c ****  * @param name the name of message queue
1774:rt_thread/src/ipc.c ****  * @param msgpool the beginning address of buffer to save messages
1775:rt_thread/src/ipc.c ****  * @param msg_size the maximum size of message
1776:rt_thread/src/ipc.c ****  * @param pool_size the size of buffer to save messages
1777:rt_thread/src/ipc.c ****  * @param flag the flag of message queue
1778:rt_thread/src/ipc.c ****  *
1779:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
1780:rt_thread/src/ipc.c ****  */
1781:rt_thread/src/ipc.c **** rt_err_t rt_mq_init(rt_mq_t     mq,
1782:rt_thread/src/ipc.c ****                     const char *name,
1783:rt_thread/src/ipc.c ****                     void       *msgpool,
1784:rt_thread/src/ipc.c ****                     rt_size_t   msg_size,
1785:rt_thread/src/ipc.c ****                     rt_size_t   pool_size,
1786:rt_thread/src/ipc.c ****                     rt_uint8_t  flag)
1787:rt_thread/src/ipc.c **** {
 4927              		.loc 1 1787 0
 4928              		.cfi_startproc
 4929              		@ args = 8, pretend = 0, frame = 0
 4930              		@ frame_needed = 0, uses_anonymous_args = 0
 4931              	.LVL741:
 4932 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4933              	.LCFI40:
 4934              		.cfi_def_cfa_offset 24
 4935              		.cfi_offset 3, -24
 4936              		.cfi_offset 4, -20
 4937              		.cfi_offset 5, -16
 4938              		.cfi_offset 6, -12
 4939              		.cfi_offset 7, -8
 4940              		.cfi_offset 14, -4
 4941 0002 0F46     		mov	r7, r1
 4942 0004 1646     		mov	r6, r2
 4943 0006 1D46     		mov	r5, r3
1788:rt_thread/src/ipc.c ****     struct rt_mq_message *head;
1789:rt_thread/src/ipc.c ****     register rt_base_t temp;
1790:rt_thread/src/ipc.c **** 
1791:rt_thread/src/ipc.c ****     /* parameter check */
1792:rt_thread/src/ipc.c ****     RT_ASSERT(mq != RT_NULL);
 4944              		.loc 1 1792 0
 4945 0008 0446     		mov	r4, r0
 4946 000a 28B9     		cbnz	r0, .L349
 4947              		.loc 1 1792 0 is_stmt 0 discriminator 1
 4948 000c 4FF4E062 		mov	r2, #1792
 4949              	.LVL742:
 4950 0010 1949     		ldr	r1, .L353
 4951              	.LVL743:
 4952 0012 1A48     		ldr	r0, .L353+4
 4953              	.LVL744:
 4954 0014 FFF7FEFF 		bl	rt_assert_handler
ARM GAS  /tmp/ccObKSes.s 			page 124


 4955              	.LVL745:
 4956              	.L349:
1793:rt_thread/src/ipc.c **** 
1794:rt_thread/src/ipc.c ****     /* initialize object */
1795:rt_thread/src/ipc.c ****     rt_object_init(&(mq->parent.parent), RT_Object_Class_MessageQueue, name);
 4957              		.loc 1 1795 0 is_stmt 1
 4958 0018 3A46     		mov	r2, r7
 4959 001a 0621     		movs	r1, #6
 4960 001c 2046     		mov	r0, r4
 4961 001e FFF7FEFF 		bl	rt_object_init
 4962              	.LVL746:
1796:rt_thread/src/ipc.c **** 
1797:rt_thread/src/ipc.c ****     /* set parent flag */
1798:rt_thread/src/ipc.c ****     mq->parent.parent.flag = flag;
 4963              		.loc 1 1798 0
 4964 0022 9DF81C30 		ldrb	r3, [sp, #28]	@ zero_extendqisi2
 4965 0026 6372     		strb	r3, [r4, #9]
 4966              	.LVL747:
 4967              	.LBB406:
 4968              	.LBB407:
  64:rt_thread/src/ipc.c **** 
 4969              		.loc 1 64 0
 4970 0028 04F11403 		add	r3, r4, #20
 4971              	.LVL748:
 4972              	.LBB408:
 4973              	.LBB409:
  49:rt_thread/include/rtservice.h **** }
 4974              		.loc 2 49 0
 4975 002c A361     		str	r3, [r4, #24]
 4976 002e 6361     		str	r3, [r4, #20]
 4977              	.LVL749:
 4978              	.LBE409:
 4979              	.LBE408:
 4980              	.LBE407:
 4981              	.LBE406:
1799:rt_thread/src/ipc.c **** 
1800:rt_thread/src/ipc.c ****     /* initialize ipc object */
1801:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(mq->parent));
1802:rt_thread/src/ipc.c **** 
1803:rt_thread/src/ipc.c ****     /* set message pool */
1804:rt_thread/src/ipc.c ****     mq->msg_pool = msgpool;
 4982              		.loc 1 1804 0
 4983 0030 E661     		str	r6, [r4, #28]
1805:rt_thread/src/ipc.c **** 
1806:rt_thread/src/ipc.c ****     /* get correct message size */
1807:rt_thread/src/ipc.c ****     mq->msg_size = RT_ALIGN(msg_size, RT_ALIGN_SIZE);
 4984              		.loc 1 1807 0
 4985 0032 EB1C     		adds	r3, r5, #3
 4986 0034 23F00303 		bic	r3, r3, #3
 4987 0038 9BB2     		uxth	r3, r3
 4988 003a 2384     		strh	r3, [r4, #32]	@ movhi
1808:rt_thread/src/ipc.c ****     mq->max_msgs = pool_size / (mq->msg_size + sizeof(struct rt_mq_message));
 4989              		.loc 1 1808 0
 4990 003c 0433     		adds	r3, r3, #4
 4991 003e 069A     		ldr	r2, [sp, #24]
 4992 0040 B2FBF3F3 		udiv	r3, r2, r3
 4993 0044 6384     		strh	r3, [r4, #34]	@ movhi
ARM GAS  /tmp/ccObKSes.s 			page 125


1809:rt_thread/src/ipc.c **** 
1810:rt_thread/src/ipc.c ****     /* initialize message list */
1811:rt_thread/src/ipc.c ****     mq->msg_queue_head = RT_NULL;
 4994              		.loc 1 1811 0
 4995 0046 0022     		movs	r2, #0
 4996 0048 A262     		str	r2, [r4, #40]
1812:rt_thread/src/ipc.c ****     mq->msg_queue_tail = RT_NULL;
 4997              		.loc 1 1812 0
 4998 004a E262     		str	r2, [r4, #44]
1813:rt_thread/src/ipc.c **** 
1814:rt_thread/src/ipc.c ****     /* initialize message empty list */
1815:rt_thread/src/ipc.c ****     mq->msg_queue_free = RT_NULL;
 4999              		.loc 1 1815 0
 5000 004c 2263     		str	r2, [r4, #48]
 5001              	.LVL750:
1816:rt_thread/src/ipc.c ****     for (temp = 0; temp < mq->max_msgs; temp ++)
 5002              		.loc 1 1816 0
 5003 004e 09E0     		b	.L350
 5004              	.LVL751:
 5005              	.L351:
1817:rt_thread/src/ipc.c ****     {
1818:rt_thread/src/ipc.c ****         head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
 5006              		.loc 1 1818 0 discriminator 3
 5007 0050 E169     		ldr	r1, [r4, #28]
1819:rt_thread/src/ipc.c ****                                         temp * (mq->msg_size + sizeof(struct rt_mq_message)));
 5008              		.loc 1 1819 0 discriminator 3
 5009 0052 238C     		ldrh	r3, [r4, #32]
 5010 0054 0433     		adds	r3, r3, #4
1818:rt_thread/src/ipc.c ****                                         temp * (mq->msg_size + sizeof(struct rt_mq_message)));
 5011              		.loc 1 1818 0 discriminator 3
 5012 0056 02FB03F3 		mul	r3, r2, r3
 5013 005a C818     		adds	r0, r1, r3
 5014              	.LVL752:
1820:rt_thread/src/ipc.c ****         head->next = (struct rt_mq_message *)mq->msg_queue_free;
 5015              		.loc 1 1820 0 discriminator 3
 5016 005c 256B     		ldr	r5, [r4, #48]
 5017 005e CD50     		str	r5, [r1, r3]
1821:rt_thread/src/ipc.c ****         mq->msg_queue_free = head;
 5018              		.loc 1 1821 0 discriminator 3
 5019 0060 2063     		str	r0, [r4, #48]
1816:rt_thread/src/ipc.c ****     {
 5020              		.loc 1 1816 0 discriminator 3
 5021 0062 0132     		adds	r2, r2, #1
 5022              	.LVL753:
 5023              	.L350:
1816:rt_thread/src/ipc.c ****     {
 5024              		.loc 1 1816 0 is_stmt 0 discriminator 1
 5025 0064 638C     		ldrh	r3, [r4, #34]
 5026 0066 9A42     		cmp	r2, r3
 5027 0068 F2DB     		blt	.L351
1822:rt_thread/src/ipc.c ****     }
1823:rt_thread/src/ipc.c **** 
1824:rt_thread/src/ipc.c ****     /* the initial entry is zero */
1825:rt_thread/src/ipc.c ****     mq->entry = 0;
 5028              		.loc 1 1825 0 is_stmt 1
 5029 006a 0020     		movs	r0, #0
 5030 006c A084     		strh	r0, [r4, #36]	@ movhi
ARM GAS  /tmp/ccObKSes.s 			page 126


1826:rt_thread/src/ipc.c **** 
1827:rt_thread/src/ipc.c ****     /* initialize an additional list of sender suspend thread */
1828:rt_thread/src/ipc.c ****     rt_list_init(&(mq->suspend_sender_thread));
 5031              		.loc 1 1828 0
 5032 006e 04F13403 		add	r3, r4, #52
 5033              	.LVL754:
 5034              	.LBB410:
 5035              	.LBB411:
  49:rt_thread/include/rtservice.h **** }
 5036              		.loc 2 49 0
 5037 0072 A363     		str	r3, [r4, #56]
 5038 0074 6363     		str	r3, [r4, #52]
 5039              	.LVL755:
 5040              	.LBE411:
 5041              	.LBE410:
1829:rt_thread/src/ipc.c **** 
1830:rt_thread/src/ipc.c ****     return RT_EOK;
1831:rt_thread/src/ipc.c **** }
 5042              		.loc 1 1831 0
 5043 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5044              	.LVL756:
 5045              	.L354:
 5046              		.align	2
 5047              	.L353:
 5048 0078 00000000 		.word	.LANCHOR28
 5049 007c 94030000 		.word	.LC20
 5050              		.cfi_endproc
 5051              	.LFE49:
 5053              		.section	.text.rt_mq_detach,"ax",%progbits
 5054              		.align	2
 5055              		.global	rt_mq_detach
 5056              		.thumb
 5057              		.thumb_func
 5059              	rt_mq_detach:
 5060              	.LFB50:
1832:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mq_init);
1833:rt_thread/src/ipc.c **** 
1834:rt_thread/src/ipc.c **** /**
1835:rt_thread/src/ipc.c ****  * This function will detach a message queue object from resource management
1836:rt_thread/src/ipc.c ****  *
1837:rt_thread/src/ipc.c ****  * @param mq the message queue object
1838:rt_thread/src/ipc.c ****  *
1839:rt_thread/src/ipc.c ****  * @return the operation status, RT_EOK on successful
1840:rt_thread/src/ipc.c ****  */
1841:rt_thread/src/ipc.c **** rt_err_t rt_mq_detach(rt_mq_t mq)
1842:rt_thread/src/ipc.c **** {
 5061              		.loc 1 1842 0
 5062              		.cfi_startproc
 5063              		@ args = 0, pretend = 0, frame = 0
 5064              		@ frame_needed = 0, uses_anonymous_args = 0
 5065              	.LVL757:
 5066 0000 70B5     		push	{r4, r5, r6, lr}
 5067              	.LCFI41:
 5068              		.cfi_def_cfa_offset 16
 5069              		.cfi_offset 4, -16
 5070              		.cfi_offset 5, -12
 5071              		.cfi_offset 6, -8
ARM GAS  /tmp/ccObKSes.s 			page 127


 5072              		.cfi_offset 14, -4
1843:rt_thread/src/ipc.c ****     /* parameter check */
1844:rt_thread/src/ipc.c ****     RT_ASSERT(mq != RT_NULL);
 5073              		.loc 1 1844 0
 5074 0002 0646     		mov	r6, r0
 5075 0004 28B9     		cbnz	r0, .L356
 5076              		.loc 1 1844 0 is_stmt 0 discriminator 1
 5077 0006 40F23472 		movw	r2, #1844
 5078 000a 2249     		ldr	r1, .L364
 5079 000c 2248     		ldr	r0, .L364+4
 5080              	.LVL758:
 5081 000e FFF7FEFF 		bl	rt_assert_handler
 5082              	.LVL759:
 5083              	.L356:
1845:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
 5084              		.loc 1 1845 0 is_stmt 1
 5085 0012 3046     		mov	r0, r6
 5086 0014 FFF7FEFF 		bl	rt_object_get_type
 5087              	.LVL760:
 5088 0018 0628     		cmp	r0, #6
 5089 001a 05D0     		beq	.L357
 5090              		.loc 1 1845 0 is_stmt 0 discriminator 1
 5091 001c 40F23572 		movw	r2, #1845
 5092 0020 1C49     		ldr	r1, .L364
 5093 0022 1E48     		ldr	r0, .L364+8
 5094 0024 FFF7FEFF 		bl	rt_assert_handler
 5095              	.LVL761:
 5096              	.L357:
1846:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&mq->parent.parent));
 5097              		.loc 1 1846 0 is_stmt 1
 5098 0028 3046     		mov	r0, r6
 5099 002a FFF7FEFF 		bl	rt_object_is_systemobject
 5100              	.LVL762:
 5101 002e 28B9     		cbnz	r0, .L358
 5102              		.loc 1 1846 0 is_stmt 0 discriminator 1
 5103 0030 40F23672 		movw	r2, #1846
 5104 0034 1749     		ldr	r1, .L364
 5105 0036 1A48     		ldr	r0, .L364+12
 5106 0038 FFF7FEFF 		bl	rt_assert_handler
 5107              	.LVL763:
 5108              	.L358:
1847:rt_thread/src/ipc.c **** 
1848:rt_thread/src/ipc.c ****     /* resume all suspended thread */
1849:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&mq->parent.suspend_thread);
 5109              		.loc 1 1849 0 is_stmt 1
 5110 003c 06F11404 		add	r4, r6, #20
 5111              	.LVL764:
 5112 0040 0CE0     		b	.L359
 5113              	.L360:
 5114              	.LBB420:
 5115              	.LBB421:
 166:rt_thread/src/ipc.c **** 
 5116              		.loc 1 166 0
 5117 0042 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5118              	.LVL765:
 5119 0046 0546     		mov	r5, r0
 5120              	.LVL766:
ARM GAS  /tmp/ccObKSes.s 			page 128


 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 5121              		.loc 1 169 0
 5122 0048 2068     		ldr	r0, [r4]
 5123              	.LVL767:
 171:rt_thread/src/ipc.c **** 
 5124              		.loc 1 171 0
 5125 004a 4FF0FF33 		mov	r3, #-1
 5126 004e C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 5127              		.loc 1 178 0
 5128 0050 1438     		subs	r0, r0, #20
 5129              	.LVL768:
 5130 0052 FFF7FEFF 		bl	rt_thread_resume
 5131              	.LVL769:
 181:rt_thread/src/ipc.c ****     }
 5132              		.loc 1 181 0
 5133 0056 2846     		mov	r0, r5
 5134 0058 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5135              	.LVL770:
 5136              	.L359:
 5137              	.LBB422:
 5138              	.LBB423:
 5139              		.loc 2 100 0
 5140 005c 2368     		ldr	r3, [r4]
 5141              	.LVL771:
 5142              	.LBE423:
 5143              	.LBE422:
 163:rt_thread/src/ipc.c ****     {
 5144              		.loc 1 163 0
 5145 005e 9C42     		cmp	r4, r3
 5146 0060 EFD1     		bne	.L360
 5147              	.LVL772:
 5148              	.LBE421:
 5149              	.LBE420:
1850:rt_thread/src/ipc.c ****     /* also resume all message queue private suspended thread */
1851:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(mq->suspend_sender_thread));
 5150              		.loc 1 1851 0
 5151 0062 06F13404 		add	r4, r6, #52
 5152              	.LVL773:
 5153 0066 0CE0     		b	.L361
 5154              	.L362:
 5155              	.LBB424:
 5156              	.LBB425:
 166:rt_thread/src/ipc.c **** 
 5157              		.loc 1 166 0
 5158 0068 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5159              	.LVL774:
 5160 006c 0546     		mov	r5, r0
 5161              	.LVL775:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 5162              		.loc 1 169 0
 5163 006e 2068     		ldr	r0, [r4]
 5164              	.LVL776:
 171:rt_thread/src/ipc.c **** 
 5165              		.loc 1 171 0
 5166 0070 4FF0FF33 		mov	r3, #-1
 5167 0074 C361     		str	r3, [r0, #28]
ARM GAS  /tmp/ccObKSes.s 			page 129


 178:rt_thread/src/ipc.c **** 
 5168              		.loc 1 178 0
 5169 0076 1438     		subs	r0, r0, #20
 5170              	.LVL777:
 5171 0078 FFF7FEFF 		bl	rt_thread_resume
 5172              	.LVL778:
 181:rt_thread/src/ipc.c ****     }
 5173              		.loc 1 181 0
 5174 007c 2846     		mov	r0, r5
 5175 007e FFF7FEFF 		bl	rt_hw_interrupt_enable
 5176              	.LVL779:
 5177              	.L361:
 5178              	.LBB426:
 5179              	.LBB427:
 5180              		.loc 2 100 0
 5181 0082 2368     		ldr	r3, [r4]
 5182              	.LVL780:
 5183              	.LBE427:
 5184              	.LBE426:
 163:rt_thread/src/ipc.c ****     {
 5185              		.loc 1 163 0
 5186 0084 9C42     		cmp	r4, r3
 5187 0086 EFD1     		bne	.L362
 5188              	.LVL781:
 5189              	.LBE425:
 5190              	.LBE424:
1852:rt_thread/src/ipc.c **** 
1853:rt_thread/src/ipc.c ****     /* detach message queue object */
1854:rt_thread/src/ipc.c ****     rt_object_detach(&(mq->parent.parent));
 5191              		.loc 1 1854 0
 5192 0088 3046     		mov	r0, r6
 5193 008a FFF7FEFF 		bl	rt_object_detach
 5194              	.LVL782:
1855:rt_thread/src/ipc.c **** 
1856:rt_thread/src/ipc.c ****     return RT_EOK;
1857:rt_thread/src/ipc.c **** }
 5195              		.loc 1 1857 0
 5196 008e 0020     		movs	r0, #0
 5197 0090 70BD     		pop	{r4, r5, r6, pc}
 5198              	.LVL783:
 5199              	.L365:
 5200 0092 00BF     		.align	2
 5201              	.L364:
 5202 0094 00000000 		.word	.LANCHOR29
 5203 0098 94030000 		.word	.LC20
 5204 009c A4030000 		.word	.LC21
 5205 00a0 EC030000 		.word	.LC22
 5206              		.cfi_endproc
 5207              	.LFE50:
 5209              		.section	.text.rt_mq_create,"ax",%progbits
 5210              		.align	2
 5211              		.global	rt_mq_create
 5212              		.thumb
 5213              		.thumb_func
 5215              	rt_mq_create:
 5216              	.LFB51:
1858:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mq_detach);
ARM GAS  /tmp/ccObKSes.s 			page 130


1859:rt_thread/src/ipc.c **** 
1860:rt_thread/src/ipc.c **** #ifdef RT_USING_HEAP
1861:rt_thread/src/ipc.c **** /**
1862:rt_thread/src/ipc.c ****  * This function will create a message queue object from system resource
1863:rt_thread/src/ipc.c ****  *
1864:rt_thread/src/ipc.c ****  * @param name the name of message queue
1865:rt_thread/src/ipc.c ****  * @param msg_size the size of message
1866:rt_thread/src/ipc.c ****  * @param max_msgs the maximum number of message in queue
1867:rt_thread/src/ipc.c ****  * @param flag the flag of message queue
1868:rt_thread/src/ipc.c ****  *
1869:rt_thread/src/ipc.c ****  * @return the created message queue, RT_NULL on error happen
1870:rt_thread/src/ipc.c ****  */
1871:rt_thread/src/ipc.c **** rt_mq_t rt_mq_create(const char *name,
1872:rt_thread/src/ipc.c ****                      rt_size_t   msg_size,
1873:rt_thread/src/ipc.c ****                      rt_size_t   max_msgs,
1874:rt_thread/src/ipc.c ****                      rt_uint8_t  flag)
1875:rt_thread/src/ipc.c **** {
 5217              		.loc 1 1875 0
 5218              		.cfi_startproc
 5219              		@ args = 0, pretend = 0, frame = 0
 5220              		@ frame_needed = 0, uses_anonymous_args = 0
 5221              	.LVL784:
 5222 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5223              	.LCFI42:
 5224              		.cfi_def_cfa_offset 32
 5225              		.cfi_offset 3, -32
 5226              		.cfi_offset 4, -28
 5227              		.cfi_offset 5, -24
 5228              		.cfi_offset 6, -20
 5229              		.cfi_offset 7, -16
 5230              		.cfi_offset 8, -12
 5231              		.cfi_offset 9, -8
 5232              		.cfi_offset 14, -4
 5233 0004 0446     		mov	r4, r0
 5234 0006 0D46     		mov	r5, r1
 5235 0008 1646     		mov	r6, r2
 5236 000a 9846     		mov	r8, r3
 5237              	.LBB428:
1876:rt_thread/src/ipc.c ****     struct rt_messagequeue *mq;
1877:rt_thread/src/ipc.c ****     struct rt_mq_message *head;
1878:rt_thread/src/ipc.c ****     register rt_base_t temp;
1879:rt_thread/src/ipc.c **** 
1880:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 5238              		.loc 1 1880 0
 5239 000c FFF7FEFF 		bl	rt_hw_interrupt_disable
 5240              	.LVL785:
 5241 0010 0746     		mov	r7, r0
 5242              	.LVL786:
 5243 0012 FFF7FEFF 		bl	rt_interrupt_get_nest
 5244              	.LVL787:
 5245 0016 58B1     		cbz	r0, .L367
 5246              		.loc 1 1880 0 is_stmt 0 discriminator 1
 5247 0018 DFF8A090 		ldr	r9, .L374+8
 5248 001c 4946     		mov	r1, r9
 5249 001e 2548     		ldr	r0, .L374
 5250 0020 FFF7FEFF 		bl	rt_kprintf
 5251              	.LVL788:
ARM GAS  /tmp/ccObKSes.s 			page 131


 5252 0024 4FF4EB62 		mov	r2, #1880
 5253 0028 4946     		mov	r1, r9
 5254 002a 2348     		ldr	r0, .L374+4
 5255 002c FFF7FEFF 		bl	rt_assert_handler
 5256              	.LVL789:
 5257              	.L367:
 5258              		.loc 1 1880 0 discriminator 5
 5259 0030 3846     		mov	r0, r7
 5260 0032 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5261              	.LVL790:
 5262              	.LBE428:
1881:rt_thread/src/ipc.c **** 
1882:rt_thread/src/ipc.c ****     /* allocate object */
1883:rt_thread/src/ipc.c ****     mq = (rt_mq_t)rt_object_allocate(RT_Object_Class_MessageQueue, name);
 5263              		.loc 1 1883 0 is_stmt 1 discriminator 5
 5264 0036 2146     		mov	r1, r4
 5265 0038 0620     		movs	r0, #6
 5266 003a FFF7FEFF 		bl	rt_object_allocate
 5267              	.LVL791:
1884:rt_thread/src/ipc.c ****     if (mq == RT_NULL)
 5268              		.loc 1 1884 0 discriminator 5
 5269 003e 0446     		mov	r4, r0
 5270              	.LVL792:
 5271 0040 0028     		cmp	r0, #0
 5272 0042 34D0     		beq	.L372
1885:rt_thread/src/ipc.c ****         return mq;
1886:rt_thread/src/ipc.c **** 
1887:rt_thread/src/ipc.c ****     /* set parent */
1888:rt_thread/src/ipc.c ****     mq->parent.parent.flag = flag;
 5273              		.loc 1 1888 0
 5274 0044 80F80980 		strb	r8, [r0, #9]
 5275              	.LVL793:
 5276              	.LBB429:
 5277              	.LBB430:
  64:rt_thread/src/ipc.c **** 
 5278              		.loc 1 64 0
 5279 0048 00F11403 		add	r3, r0, #20
 5280              	.LVL794:
 5281              	.LBB431:
 5282              	.LBB432:
  49:rt_thread/include/rtservice.h **** }
 5283              		.loc 2 49 0
 5284 004c 8361     		str	r3, [r0, #24]
 5285 004e 4361     		str	r3, [r0, #20]
 5286              	.LVL795:
 5287              	.LBE432:
 5288              	.LBE431:
 5289              	.LBE430:
 5290              	.LBE429:
1889:rt_thread/src/ipc.c **** 
1890:rt_thread/src/ipc.c ****     /* initialize ipc object */
1891:rt_thread/src/ipc.c ****     rt_ipc_object_init(&(mq->parent));
1892:rt_thread/src/ipc.c **** 
1893:rt_thread/src/ipc.c ****     /* initialize message queue */
1894:rt_thread/src/ipc.c **** 
1895:rt_thread/src/ipc.c ****     /* get correct message size */
1896:rt_thread/src/ipc.c ****     mq->msg_size = RT_ALIGN(msg_size, RT_ALIGN_SIZE);
ARM GAS  /tmp/ccObKSes.s 			page 132


 5291              		.loc 1 1896 0
 5292 0050 EB1C     		adds	r3, r5, #3
 5293 0052 23F00303 		bic	r3, r3, #3
 5294 0056 9BB2     		uxth	r3, r3
 5295 0058 0384     		strh	r3, [r0, #32]	@ movhi
1897:rt_thread/src/ipc.c ****     mq->max_msgs = max_msgs;
 5296              		.loc 1 1897 0
 5297 005a B0B2     		uxth	r0, r6
 5298              	.LVL796:
 5299 005c 6084     		strh	r0, [r4, #34]	@ movhi
1898:rt_thread/src/ipc.c **** 
1899:rt_thread/src/ipc.c ****     /* allocate message pool */
1900:rt_thread/src/ipc.c ****     mq->msg_pool = RT_KERNEL_MALLOC((mq->msg_size + sizeof(struct rt_mq_message)) * mq->max_msgs);
 5300              		.loc 1 1900 0
 5301 005e 0433     		adds	r3, r3, #4
 5302 0060 00FB03F0 		mul	r0, r0, r3
 5303 0064 FFF7FEFF 		bl	rt_malloc
 5304              	.LVL797:
 5305 0068 E061     		str	r0, [r4, #28]
1901:rt_thread/src/ipc.c ****     if (mq->msg_pool == RT_NULL)
 5306              		.loc 1 1901 0
 5307 006a 28B9     		cbnz	r0, .L369
1902:rt_thread/src/ipc.c ****     {
1903:rt_thread/src/ipc.c ****         rt_object_delete(&(mq->parent.parent));
 5308              		.loc 1 1903 0
 5309 006c 2046     		mov	r0, r4
 5310 006e FFF7FEFF 		bl	rt_object_delete
 5311              	.LVL798:
1904:rt_thread/src/ipc.c **** 
1905:rt_thread/src/ipc.c ****         return RT_NULL;
 5312              		.loc 1 1905 0
 5313 0072 0020     		movs	r0, #0
 5314 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5315              	.LVL799:
 5316              	.L369:
1906:rt_thread/src/ipc.c ****     }
1907:rt_thread/src/ipc.c **** 
1908:rt_thread/src/ipc.c ****     /* initialize message list */
1909:rt_thread/src/ipc.c ****     mq->msg_queue_head = RT_NULL;
 5317              		.loc 1 1909 0
 5318 0078 0022     		movs	r2, #0
 5319 007a A262     		str	r2, [r4, #40]
1910:rt_thread/src/ipc.c ****     mq->msg_queue_tail = RT_NULL;
 5320              		.loc 1 1910 0
 5321 007c E262     		str	r2, [r4, #44]
1911:rt_thread/src/ipc.c **** 
1912:rt_thread/src/ipc.c ****     /* initialize message empty list */
1913:rt_thread/src/ipc.c ****     mq->msg_queue_free = RT_NULL;
 5322              		.loc 1 1913 0
 5323 007e 2263     		str	r2, [r4, #48]
 5324              	.LVL800:
1914:rt_thread/src/ipc.c ****     for (temp = 0; temp < mq->max_msgs; temp ++)
 5325              		.loc 1 1914 0
 5326 0080 09E0     		b	.L370
 5327              	.LVL801:
 5328              	.L371:
1915:rt_thread/src/ipc.c ****     {
ARM GAS  /tmp/ccObKSes.s 			page 133


1916:rt_thread/src/ipc.c ****         head = (struct rt_mq_message *)((rt_uint8_t *)mq->msg_pool +
 5329              		.loc 1 1916 0 discriminator 3
 5330 0082 E169     		ldr	r1, [r4, #28]
1917:rt_thread/src/ipc.c ****                                         temp * (mq->msg_size + sizeof(struct rt_mq_message)));
 5331              		.loc 1 1917 0 discriminator 3
 5332 0084 238C     		ldrh	r3, [r4, #32]
 5333 0086 0433     		adds	r3, r3, #4
1916:rt_thread/src/ipc.c ****                                         temp * (mq->msg_size + sizeof(struct rt_mq_message)));
 5334              		.loc 1 1916 0 discriminator 3
 5335 0088 02FB03F3 		mul	r3, r2, r3
 5336 008c C818     		adds	r0, r1, r3
 5337              	.LVL802:
1918:rt_thread/src/ipc.c ****         head->next = (struct rt_mq_message *)mq->msg_queue_free;
 5338              		.loc 1 1918 0 discriminator 3
 5339 008e 256B     		ldr	r5, [r4, #48]
 5340 0090 CD50     		str	r5, [r1, r3]
1919:rt_thread/src/ipc.c ****         mq->msg_queue_free = head;
 5341              		.loc 1 1919 0 discriminator 3
 5342 0092 2063     		str	r0, [r4, #48]
1914:rt_thread/src/ipc.c ****     {
 5343              		.loc 1 1914 0 discriminator 3
 5344 0094 0132     		adds	r2, r2, #1
 5345              	.LVL803:
 5346              	.L370:
1914:rt_thread/src/ipc.c ****     {
 5347              		.loc 1 1914 0 is_stmt 0 discriminator 1
 5348 0096 638C     		ldrh	r3, [r4, #34]
 5349 0098 9A42     		cmp	r2, r3
 5350 009a F2DB     		blt	.L371
1920:rt_thread/src/ipc.c ****     }
1921:rt_thread/src/ipc.c **** 
1922:rt_thread/src/ipc.c ****     /* the initial entry is zero */
1923:rt_thread/src/ipc.c ****     mq->entry = 0;
 5351              		.loc 1 1923 0 is_stmt 1
 5352 009c 0023     		movs	r3, #0
 5353 009e A384     		strh	r3, [r4, #36]	@ movhi
1924:rt_thread/src/ipc.c **** 
1925:rt_thread/src/ipc.c ****     /* initialize an additional list of sender suspend thread */
1926:rt_thread/src/ipc.c ****     rt_list_init(&(mq->suspend_sender_thread));
 5354              		.loc 1 1926 0
 5355 00a0 04F13403 		add	r3, r4, #52
 5356              	.LVL804:
 5357              	.LBB433:
 5358              	.LBB434:
  49:rt_thread/include/rtservice.h **** }
 5359              		.loc 2 49 0
 5360 00a4 A363     		str	r3, [r4, #56]
 5361 00a6 6363     		str	r3, [r4, #52]
 5362              	.LVL805:
 5363              	.LBE434:
 5364              	.LBE433:
1927:rt_thread/src/ipc.c **** 
1928:rt_thread/src/ipc.c ****     return mq;
 5365              		.loc 1 1928 0
 5366 00a8 2046     		mov	r0, r4
 5367 00aa BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5368              	.LVL806:
ARM GAS  /tmp/ccObKSes.s 			page 134


 5369              	.L372:
1929:rt_thread/src/ipc.c **** }
 5370              		.loc 1 1929 0
 5371 00ae BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5372              	.LVL807:
 5373              	.L375:
 5374 00b2 00BF     		.align	2
 5375              	.L374:
 5376 00b4 9C000000 		.word	.LC4
 5377 00b8 C4000000 		.word	.LC5
 5378 00bc 00000000 		.word	.LANCHOR30
 5379              		.cfi_endproc
 5380              	.LFE51:
 5382              		.section	.text.rt_mq_delete,"ax",%progbits
 5383              		.align	2
 5384              		.global	rt_mq_delete
 5385              		.thumb
 5386              		.thumb_func
 5388              	rt_mq_delete:
 5389              	.LFB52:
1930:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mq_create);
1931:rt_thread/src/ipc.c **** 
1932:rt_thread/src/ipc.c **** /**
1933:rt_thread/src/ipc.c ****  * This function will delete a message queue object and release the memory
1934:rt_thread/src/ipc.c ****  *
1935:rt_thread/src/ipc.c ****  * @param mq the message queue object
1936:rt_thread/src/ipc.c ****  *
1937:rt_thread/src/ipc.c ****  * @return the error code
1938:rt_thread/src/ipc.c ****  */
1939:rt_thread/src/ipc.c **** rt_err_t rt_mq_delete(rt_mq_t mq)
1940:rt_thread/src/ipc.c **** {
 5390              		.loc 1 1940 0
 5391              		.cfi_startproc
 5392              		@ args = 0, pretend = 0, frame = 0
 5393              		@ frame_needed = 0, uses_anonymous_args = 0
 5394              	.LVL808:
 5395 0000 70B5     		push	{r4, r5, r6, lr}
 5396              	.LCFI43:
 5397              		.cfi_def_cfa_offset 16
 5398              		.cfi_offset 4, -16
 5399              		.cfi_offset 5, -12
 5400              		.cfi_offset 6, -8
 5401              		.cfi_offset 14, -4
 5402 0002 0646     		mov	r6, r0
 5403              	.LBB444:
1941:rt_thread/src/ipc.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 5404              		.loc 1 1941 0
 5405 0004 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5406              	.LVL809:
 5407 0008 0446     		mov	r4, r0
 5408              	.LVL810:
 5409 000a FFF7FEFF 		bl	rt_interrupt_get_nest
 5410              	.LVL811:
 5411 000e 50B1     		cbz	r0, .L377
 5412              		.loc 1 1941 0 is_stmt 0 discriminator 1
 5413 0010 2B4D     		ldr	r5, .L386
 5414 0012 2946     		mov	r1, r5
ARM GAS  /tmp/ccObKSes.s 			page 135


 5415 0014 2B48     		ldr	r0, .L386+4
 5416 0016 FFF7FEFF 		bl	rt_kprintf
 5417              	.LVL812:
 5418 001a 40F29572 		movw	r2, #1941
 5419 001e 2946     		mov	r1, r5
 5420 0020 2948     		ldr	r0, .L386+8
 5421 0022 FFF7FEFF 		bl	rt_assert_handler
 5422              	.LVL813:
 5423              	.L377:
 5424              		.loc 1 1941 0 discriminator 5
 5425 0026 2046     		mov	r0, r4
 5426 0028 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5427              	.LVL814:
 5428              	.LBE444:
1942:rt_thread/src/ipc.c **** 
1943:rt_thread/src/ipc.c ****     /* parameter check */
1944:rt_thread/src/ipc.c ****     RT_ASSERT(mq != RT_NULL);
 5429              		.loc 1 1944 0 is_stmt 1 discriminator 5
 5430 002c 2EB9     		cbnz	r6, .L378
 5431              		.loc 1 1944 0 is_stmt 0 discriminator 1
 5432 002e 4FF4F362 		mov	r2, #1944
 5433 0032 2349     		ldr	r1, .L386
 5434 0034 2548     		ldr	r0, .L386+12
 5435 0036 FFF7FEFF 		bl	rt_assert_handler
 5436              	.LVL815:
 5437              	.L378:
1945:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
 5438              		.loc 1 1945 0 is_stmt 1
 5439 003a 3046     		mov	r0, r6
 5440 003c FFF7FEFF 		bl	rt_object_get_type
 5441              	.LVL816:
 5442 0040 0628     		cmp	r0, #6
 5443 0042 05D0     		beq	.L379
 5444              		.loc 1 1945 0 is_stmt 0 discriminator 1
 5445 0044 40F29972 		movw	r2, #1945
 5446 0048 1D49     		ldr	r1, .L386
 5447 004a 2148     		ldr	r0, .L386+16
 5448 004c FFF7FEFF 		bl	rt_assert_handler
 5449              	.LVL817:
 5450              	.L379:
1946:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_is_systemobject(&mq->parent.parent) == RT_FALSE);
 5451              		.loc 1 1946 0 is_stmt 1
 5452 0050 3046     		mov	r0, r6
 5453 0052 FFF7FEFF 		bl	rt_object_is_systemobject
 5454              	.LVL818:
 5455 0056 28B1     		cbz	r0, .L380
 5456              		.loc 1 1946 0 is_stmt 0 discriminator 1
 5457 0058 40F29A72 		movw	r2, #1946
 5458 005c 1849     		ldr	r1, .L386
 5459 005e 1D48     		ldr	r0, .L386+20
 5460 0060 FFF7FEFF 		bl	rt_assert_handler
 5461              	.LVL819:
 5462              	.L380:
1947:rt_thread/src/ipc.c **** 
1948:rt_thread/src/ipc.c ****     /* resume all suspended thread */
1949:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(mq->parent.suspend_thread));
 5463              		.loc 1 1949 0 is_stmt 1
ARM GAS  /tmp/ccObKSes.s 			page 136


 5464 0064 06F11404 		add	r4, r6, #20
 5465              	.LVL820:
 5466 0068 0CE0     		b	.L381
 5467              	.L382:
 5468              	.LBB445:
 5469              	.LBB446:
 166:rt_thread/src/ipc.c **** 
 5470              		.loc 1 166 0
 5471 006a FFF7FEFF 		bl	rt_hw_interrupt_disable
 5472              	.LVL821:
 5473 006e 0546     		mov	r5, r0
 5474              	.LVL822:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 5475              		.loc 1 169 0
 5476 0070 2068     		ldr	r0, [r4]
 5477              	.LVL823:
 171:rt_thread/src/ipc.c **** 
 5478              		.loc 1 171 0
 5479 0072 4FF0FF33 		mov	r3, #-1
 5480 0076 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 5481              		.loc 1 178 0
 5482 0078 1438     		subs	r0, r0, #20
 5483              	.LVL824:
 5484 007a FFF7FEFF 		bl	rt_thread_resume
 5485              	.LVL825:
 181:rt_thread/src/ipc.c ****     }
 5486              		.loc 1 181 0
 5487 007e 2846     		mov	r0, r5
 5488 0080 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5489              	.LVL826:
 5490              	.L381:
 5491              	.LBB447:
 5492              	.LBB448:
 5493              		.loc 2 100 0
 5494 0084 2368     		ldr	r3, [r4]
 5495              	.LVL827:
 5496              	.LBE448:
 5497              	.LBE447:
 163:rt_thread/src/ipc.c ****     {
 5498              		.loc 1 163 0
 5499 0086 9C42     		cmp	r4, r3
 5500 0088 EFD1     		bne	.L382
 5501              	.LVL828:
 5502              	.LBE446:
 5503              	.LBE445:
1950:rt_thread/src/ipc.c ****     /* also resume all message queue private suspended thread */
1951:rt_thread/src/ipc.c ****     rt_ipc_list_resume_all(&(mq->suspend_sender_thread));
 5504              		.loc 1 1951 0
 5505 008a 06F13404 		add	r4, r6, #52
 5506              	.LVL829:
 5507 008e 0CE0     		b	.L383
 5508              	.L384:
 5509              	.LBB449:
 5510              	.LBB450:
 166:rt_thread/src/ipc.c **** 
 5511              		.loc 1 166 0
ARM GAS  /tmp/ccObKSes.s 			page 137


 5512 0090 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5513              	.LVL830:
 5514 0094 0546     		mov	r5, r0
 5515              	.LVL831:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 5516              		.loc 1 169 0
 5517 0096 2068     		ldr	r0, [r4]
 5518              	.LVL832:
 171:rt_thread/src/ipc.c **** 
 5519              		.loc 1 171 0
 5520 0098 4FF0FF33 		mov	r3, #-1
 5521 009c C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 5522              		.loc 1 178 0
 5523 009e 1438     		subs	r0, r0, #20
 5524              	.LVL833:
 5525 00a0 FFF7FEFF 		bl	rt_thread_resume
 5526              	.LVL834:
 181:rt_thread/src/ipc.c ****     }
 5527              		.loc 1 181 0
 5528 00a4 2846     		mov	r0, r5
 5529 00a6 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5530              	.LVL835:
 5531              	.L383:
 5532              	.LBB451:
 5533              	.LBB452:
 5534              		.loc 2 100 0
 5535 00aa 2368     		ldr	r3, [r4]
 5536              	.LVL836:
 5537              	.LBE452:
 5538              	.LBE451:
 163:rt_thread/src/ipc.c ****     {
 5539              		.loc 1 163 0
 5540 00ac 9C42     		cmp	r4, r3
 5541 00ae EFD1     		bne	.L384
 5542              	.LVL837:
 5543              	.LBE450:
 5544              	.LBE449:
1952:rt_thread/src/ipc.c **** 
1953:rt_thread/src/ipc.c ****     /* free message queue pool */
1954:rt_thread/src/ipc.c ****     RT_KERNEL_FREE(mq->msg_pool);
 5545              		.loc 1 1954 0
 5546 00b0 F069     		ldr	r0, [r6, #28]
 5547 00b2 FFF7FEFF 		bl	rt_free
 5548              	.LVL838:
1955:rt_thread/src/ipc.c **** 
1956:rt_thread/src/ipc.c ****     /* delete message queue object */
1957:rt_thread/src/ipc.c ****     rt_object_delete(&(mq->parent.parent));
 5549              		.loc 1 1957 0
 5550 00b6 3046     		mov	r0, r6
 5551 00b8 FFF7FEFF 		bl	rt_object_delete
 5552              	.LVL839:
1958:rt_thread/src/ipc.c **** 
1959:rt_thread/src/ipc.c ****     return RT_EOK;
1960:rt_thread/src/ipc.c **** }
 5553              		.loc 1 1960 0
 5554 00bc 0020     		movs	r0, #0
ARM GAS  /tmp/ccObKSes.s 			page 138


 5555 00be 70BD     		pop	{r4, r5, r6, pc}
 5556              	.LVL840:
 5557              	.L387:
 5558              		.align	2
 5559              	.L386:
 5560 00c0 00000000 		.word	.LANCHOR31
 5561 00c4 9C000000 		.word	.LC4
 5562 00c8 C4000000 		.word	.LC5
 5563 00cc 94030000 		.word	.LC20
 5564 00d0 A4030000 		.word	.LC21
 5565 00d4 1C040000 		.word	.LC23
 5566              		.cfi_endproc
 5567              	.LFE52:
 5569              		.section	.text.rt_mq_send_wait,"ax",%progbits
 5570              		.align	2
 5571              		.global	rt_mq_send_wait
 5572              		.thumb
 5573              		.thumb_func
 5575              	rt_mq_send_wait:
 5576              	.LFB53:
1961:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mq_delete);
1962:rt_thread/src/ipc.c **** #endif
1963:rt_thread/src/ipc.c **** 
1964:rt_thread/src/ipc.c **** /**
1965:rt_thread/src/ipc.c ****  * This function will send a message to message queue object. If the message queue is full,
1966:rt_thread/src/ipc.c ****  * current thread will be suspended until timeout.
1967:rt_thread/src/ipc.c ****  *
1968:rt_thread/src/ipc.c ****  * @param mq the message queue object
1969:rt_thread/src/ipc.c ****  * @param buffer the message
1970:rt_thread/src/ipc.c ****  * @param size the size of buffer
1971:rt_thread/src/ipc.c ****  * @param timeout the waiting time
1972:rt_thread/src/ipc.c ****  *
1973:rt_thread/src/ipc.c ****  * @return the error code
1974:rt_thread/src/ipc.c ****  */
1975:rt_thread/src/ipc.c **** rt_err_t rt_mq_send_wait(rt_mq_t     mq,
1976:rt_thread/src/ipc.c ****                          const void *buffer,
1977:rt_thread/src/ipc.c ****                          rt_size_t   size,
1978:rt_thread/src/ipc.c ****                          rt_int32_t  timeout)
1979:rt_thread/src/ipc.c **** {
 5577              		.loc 1 1979 0
 5578              		.cfi_startproc
 5579              		@ args = 0, pretend = 0, frame = 8
 5580              		@ frame_needed = 0, uses_anonymous_args = 0
 5581              	.LVL841:
 5582 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5583              	.LCFI44:
 5584              		.cfi_def_cfa_offset 36
 5585              		.cfi_offset 4, -36
 5586              		.cfi_offset 5, -32
 5587              		.cfi_offset 6, -28
 5588              		.cfi_offset 7, -24
 5589              		.cfi_offset 8, -20
 5590              		.cfi_offset 9, -16
 5591              		.cfi_offset 10, -12
 5592              		.cfi_offset 11, -8
 5593              		.cfi_offset 14, -4
 5594 0004 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccObKSes.s 			page 139


 5595              	.LCFI45:
 5596              		.cfi_def_cfa_offset 48
 5597 0006 0091     		str	r1, [sp]
 5598 0008 9346     		mov	fp, r2
 5599 000a 0193     		str	r3, [sp, #4]
1980:rt_thread/src/ipc.c ****     register rt_ubase_t temp;
1981:rt_thread/src/ipc.c ****     struct rt_mq_message *msg;
1982:rt_thread/src/ipc.c ****     rt_uint32_t tick_delta;
1983:rt_thread/src/ipc.c ****     struct rt_thread *thread;
1984:rt_thread/src/ipc.c **** 
1985:rt_thread/src/ipc.c ****     /* parameter check */
1986:rt_thread/src/ipc.c ****     RT_ASSERT(mq != RT_NULL);
 5600              		.loc 1 1986 0
 5601 000c 0546     		mov	r5, r0
 5602 000e 28B9     		cbnz	r0, .L389
 5603              		.loc 1 1986 0 is_stmt 0 discriminator 1
 5604 0010 40F2C272 		movw	r2, #1986
 5605              	.LVL842:
 5606 0014 8249     		ldr	r1, .L416
 5607              	.LVL843:
 5608 0016 8348     		ldr	r0, .L416+4
 5609              	.LVL844:
 5610 0018 FFF7FEFF 		bl	rt_assert_handler
 5611              	.LVL845:
 5612              	.L389:
1987:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
 5613              		.loc 1 1987 0 is_stmt 1
 5614 001c 2846     		mov	r0, r5
 5615 001e FFF7FEFF 		bl	rt_object_get_type
 5616              	.LVL846:
 5617 0022 0628     		cmp	r0, #6
 5618 0024 05D0     		beq	.L390
 5619              		.loc 1 1987 0 is_stmt 0 discriminator 1
 5620 0026 40F2C372 		movw	r2, #1987
 5621 002a 7D49     		ldr	r1, .L416
 5622 002c 7E48     		ldr	r0, .L416+8
 5623 002e FFF7FEFF 		bl	rt_assert_handler
 5624              	.LVL847:
 5625              	.L390:
1988:rt_thread/src/ipc.c ****     RT_ASSERT(buffer != RT_NULL);
 5626              		.loc 1 1988 0 is_stmt 1
 5627 0032 009B     		ldr	r3, [sp]
 5628 0034 2BB9     		cbnz	r3, .L391
 5629              		.loc 1 1988 0 is_stmt 0 discriminator 1
 5630 0036 40F2C472 		movw	r2, #1988
 5631 003a 7949     		ldr	r1, .L416
 5632 003c 7B48     		ldr	r0, .L416+12
 5633 003e FFF7FEFF 		bl	rt_assert_handler
 5634              	.LVL848:
 5635              	.L391:
1989:rt_thread/src/ipc.c ****     RT_ASSERT(size != 0);
 5636              		.loc 1 1989 0 is_stmt 1
 5637 0042 BBF1000F 		cmp	fp, #0
 5638 0046 05D1     		bne	.L392
 5639              		.loc 1 1989 0 is_stmt 0 discriminator 1
 5640 0048 40F2C572 		movw	r2, #1989
 5641 004c 7449     		ldr	r1, .L416
ARM GAS  /tmp/ccObKSes.s 			page 140


 5642 004e 7848     		ldr	r0, .L416+16
 5643 0050 FFF7FEFF 		bl	rt_assert_handler
 5644              	.LVL849:
 5645              	.L392:
1990:rt_thread/src/ipc.c **** 
1991:rt_thread/src/ipc.c ****     /* greater than one message size */
1992:rt_thread/src/ipc.c ****     if (size > mq->msg_size)
 5646              		.loc 1 1992 0 is_stmt 1
 5647 0054 2B8C     		ldrh	r3, [r5, #32]
 5648 0056 9B45     		cmp	fp, r3
 5649 0058 00F2DD80 		bhi	.L412
 5650              	.LVL850:
1993:rt_thread/src/ipc.c ****         return -RT_ERROR;
1994:rt_thread/src/ipc.c **** 
1995:rt_thread/src/ipc.c ****     /* initialize delta tick */
1996:rt_thread/src/ipc.c ****     tick_delta = 0;
1997:rt_thread/src/ipc.c ****     /* get current thread */
1998:rt_thread/src/ipc.c ****     thread = rt_thread_self();
 5651              		.loc 1 1998 0
 5652 005c FFF7FEFF 		bl	rt_thread_self
 5653              	.LVL851:
 5654 0060 0446     		mov	r4, r0
 5655              	.LVL852:
1999:rt_thread/src/ipc.c **** 
2000:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mq->parent.parent)));
 5656              		.loc 1 2000 0
 5657 0062 744B     		ldr	r3, .L416+20
 5658 0064 1B68     		ldr	r3, [r3]
 5659 0066 0BB1     		cbz	r3, .L394
 5660              		.loc 1 2000 0 is_stmt 0 discriminator 1
 5661 0068 2846     		mov	r0, r5
 5662              	.LVL853:
 5663 006a 9847     		blx	r3
 5664              	.LVL854:
 5665              	.L394:
2001:rt_thread/src/ipc.c **** 
2002:rt_thread/src/ipc.c ****     /* disable interrupt */
2003:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 5666              		.loc 1 2003 0 is_stmt 1
 5667 006c FFF7FEFF 		bl	rt_hw_interrupt_disable
 5668              	.LVL855:
 5669 0070 8246     		mov	r10, r0
 5670              	.LVL856:
2004:rt_thread/src/ipc.c **** 
2005:rt_thread/src/ipc.c ****     /* get a free list, there must be an empty item */
2006:rt_thread/src/ipc.c ****     msg = (struct rt_mq_message *)mq->msg_queue_free;
 5671              		.loc 1 2006 0
 5672 0072 2B6B     		ldr	r3, [r5, #48]
 5673              	.LVL857:
2007:rt_thread/src/ipc.c ****     /* for non-blocking call */
2008:rt_thread/src/ipc.c ****     if (msg == RT_NULL && timeout == 0)
 5674              		.loc 1 2008 0
 5675 0074 002B     		cmp	r3, #0
 5676 0076 40F09980 		bne	.L413
 5677              		.loc 1 2008 0 is_stmt 0 discriminator 1
 5678 007a 019B     		ldr	r3, [sp, #4]
 5679              	.LVL858:
ARM GAS  /tmp/ccObKSes.s 			page 141


 5680 007c 002B     		cmp	r3, #0
 5681 007e 40F09780 		bne	.L414
2009:rt_thread/src/ipc.c ****     {
2010:rt_thread/src/ipc.c ****         /* enable interrupt */
2011:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 5682              		.loc 1 2011 0 is_stmt 1
 5683 0082 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5684              	.LVL859:
2012:rt_thread/src/ipc.c **** 
2013:rt_thread/src/ipc.c ****         return -RT_EFULL;
 5685              		.loc 1 2013 0
 5686 0086 6FF00200 		mvn	r0, #2
 5687 008a C6E0     		b	.L393
 5688              	.LVL860:
 5689              	.L408:
2014:rt_thread/src/ipc.c ****     }
2015:rt_thread/src/ipc.c **** 
2016:rt_thread/src/ipc.c ****     /* message queue is full */
2017:rt_thread/src/ipc.c ****     while ((msg = mq->msg_queue_free) == RT_NULL)
2018:rt_thread/src/ipc.c ****     {
2019:rt_thread/src/ipc.c ****         /* reset error number in thread */
2020:rt_thread/src/ipc.c ****         thread->error = RT_EOK;
 5690              		.loc 1 2020 0
 5691 008c 0023     		movs	r3, #0
 5692 008e 2363     		str	r3, [r4, #48]
2021:rt_thread/src/ipc.c **** 
2022:rt_thread/src/ipc.c ****         /* no waiting, return timeout */
2023:rt_thread/src/ipc.c ****         if (timeout == 0)
 5693              		.loc 1 2023 0
 5694 0090 019B     		ldr	r3, [sp, #4]
 5695 0092 2BB9     		cbnz	r3, .L396
2024:rt_thread/src/ipc.c ****         {
2025:rt_thread/src/ipc.c ****             /* enable interrupt */
2026:rt_thread/src/ipc.c ****             rt_hw_interrupt_enable(temp);
 5696              		.loc 1 2026 0
 5697 0094 5046     		mov	r0, r10
 5698 0096 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5699              	.LVL861:
2027:rt_thread/src/ipc.c **** 
2028:rt_thread/src/ipc.c ****             return -RT_EFULL;
 5700              		.loc 1 2028 0
 5701 009a 6FF00200 		mvn	r0, #2
 5702 009e BCE0     		b	.L393
 5703              	.L396:
 5704              	.LBB468:
2029:rt_thread/src/ipc.c ****         }
2030:rt_thread/src/ipc.c **** 
2031:rt_thread/src/ipc.c ****         RT_DEBUG_IN_THREAD_CONTEXT;
 5705              		.loc 1 2031 0
 5706 00a0 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5707              	.LVL862:
 5708 00a4 8046     		mov	r8, r0
 5709              	.LVL863:
 5710 00a6 FFF7FEFF 		bl	rt_thread_self
 5711              	.LVL864:
 5712 00aa 50B9     		cbnz	r0, .L397
 5713              		.loc 1 2031 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccObKSes.s 			page 142


 5714 00ac 5C4F     		ldr	r7, .L416
 5715              	.LVL865:
 5716 00ae 3946     		mov	r1, r7
 5717 00b0 6148     		ldr	r0, .L416+24
 5718 00b2 FFF7FEFF 		bl	rt_kprintf
 5719              	.LVL866:
 5720 00b6 40F2EF72 		movw	r2, #2031
 5721 00ba 3946     		mov	r1, r7
 5722 00bc 5F48     		ldr	r0, .L416+28
 5723 00be FFF7FEFF 		bl	rt_assert_handler
 5724              	.LVL867:
 5725              	.L397:
 5726              	.LBB469:
 5727              		.loc 1 2031 0 discriminator 5
 5728 00c2 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5729              	.LVL868:
 5730 00c6 8146     		mov	r9, r0
 5731              	.LVL869:
 5732 00c8 FFF7FEFF 		bl	rt_interrupt_get_nest
 5733              	.LVL870:
 5734 00cc 50B1     		cbz	r0, .L398
 5735              		.loc 1 2031 0 discriminator 6
 5736 00ce 544F     		ldr	r7, .L416
 5737 00d0 3946     		mov	r1, r7
 5738 00d2 5B48     		ldr	r0, .L416+32
 5739 00d4 FFF7FEFF 		bl	rt_kprintf
 5740              	.LVL871:
 5741 00d8 40F2EF72 		movw	r2, #2031
 5742 00dc 3946     		mov	r1, r7
 5743 00de 5748     		ldr	r0, .L416+28
 5744 00e0 FFF7FEFF 		bl	rt_assert_handler
 5745              	.LVL872:
 5746              	.L398:
 5747              		.loc 1 2031 0 discriminator 10
 5748 00e4 4846     		mov	r0, r9
 5749 00e6 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5750              	.LVL873:
 5751              	.LBE469:
 5752 00ea 4046     		mov	r0, r8
 5753 00ec FFF7FEFF 		bl	rt_hw_interrupt_enable
 5754              	.LVL874:
 5755              	.LBE468:
2032:rt_thread/src/ipc.c ****         /* suspend current thread */
2033:rt_thread/src/ipc.c ****         rt_ipc_list_suspend(&(mq->suspend_sender_thread),
 5756              		.loc 1 2033 0 is_stmt 1 discriminator 10
 5757 00f0 05F13407 		add	r7, r5, #52
 5758 00f4 95F80990 		ldrb	r9, [r5, #9]	@ zero_extendqisi2
 5759              	.LVL875:
 5760              	.LBB470:
 5761              	.LBB471:
  85:rt_thread/src/ipc.c **** 
 5762              		.loc 1 85 0 discriminator 10
 5763 00f8 2046     		mov	r0, r4
 5764 00fa FFF7FEFF 		bl	rt_thread_suspend
 5765              	.LVL876:
  87:rt_thread/src/ipc.c ****     {
 5766              		.loc 1 87 0 discriminator 10
ARM GAS  /tmp/ccObKSes.s 			page 143


 5767 00fe B9F1000F 		cmp	r9, #0
 5768 0102 03D0     		beq	.L400
 5769 0104 B9F1010F 		cmp	r9, #1
 5770 0108 09D0     		beq	.L401
 5771 010a 26E0     		b	.L399
 5772              	.L400:
  90:rt_thread/src/ipc.c ****         break;
 5773              		.loc 1 90 0
 5774 010c 04F11403 		add	r3, r4, #20
 5775              	.LVL877:
 5776              	.LBB472:
 5777              	.LBB473:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 5778              		.loc 2 75 0
 5779 0110 7A68     		ldr	r2, [r7, #4]
 5780 0112 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 5781              		.loc 2 76 0
 5782 0114 7A68     		ldr	r2, [r7, #4]
 5783 0116 A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 5784              		.loc 2 78 0
 5785 0118 7B60     		str	r3, [r7, #4]
  79:rt_thread/include/rtservice.h **** }
 5786              		.loc 2 79 0
 5787 011a 6761     		str	r7, [r4, #20]
 5788 011c 1DE0     		b	.L399
 5789              	.LVL878:
 5790              	.L401:
 5791              	.LBE473:
 5792              	.LBE472:
 5793              	.LBB474:
  99:rt_thread/src/ipc.c ****             {
 5794              		.loc 1 99 0
 5795 011e 6B6B     		ldr	r3, [r5, #52]
 5796              	.LVL879:
 5797 0120 0FE0     		b	.L402
 5798              	.L405:
 5799              	.LVL880:
 104:rt_thread/src/ipc.c ****                 {
 5800              		.loc 1 104 0
 5801 0122 94F83510 		ldrb	r1, [r4, #53]	@ zero_extendqisi2
 5802 0126 93F82120 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
 5803 012a 9142     		cmp	r1, r2
 5804 012c 08D2     		bcs	.L403
 107:rt_thread/src/ipc.c ****                     break;
 5805              		.loc 1 107 0
 5806 012e 04F11402 		add	r2, r4, #20
 5807              	.LVL881:
 5808              	.LBB475:
 5809              	.LBB476:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 5810              		.loc 2 75 0
 5811 0132 5968     		ldr	r1, [r3, #4]
 5812 0134 0A60     		str	r2, [r1]
  76:rt_thread/include/rtservice.h **** 
 5813              		.loc 2 76 0
ARM GAS  /tmp/ccObKSes.s 			page 144


 5814 0136 5968     		ldr	r1, [r3, #4]
 5815 0138 A161     		str	r1, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 5816              		.loc 2 78 0
 5817 013a 5A60     		str	r2, [r3, #4]
  79:rt_thread/include/rtservice.h **** }
 5818              		.loc 2 79 0
 5819 013c 6361     		str	r3, [r4, #20]
 5820 013e 02E0     		b	.L404
 5821              	.LVL882:
 5822              	.L403:
 5823              	.LBE476:
 5824              	.LBE475:
  99:rt_thread/src/ipc.c ****             {
 5825              		.loc 1 99 0
 5826 0140 1B68     		ldr	r3, [r3]
 5827              	.LVL883:
 5828              	.L402:
 5829 0142 9F42     		cmp	r7, r3
 5830 0144 EDD1     		bne	.L405
 5831              	.L404:
 116:rt_thread/src/ipc.c ****                 rt_list_insert_before(list, &(thread->tlist));
 5832              		.loc 1 116 0
 5833 0146 9F42     		cmp	r7, r3
 5834 0148 07D1     		bne	.L399
 117:rt_thread/src/ipc.c ****         }
 5835              		.loc 1 117 0
 5836 014a 04F11403 		add	r3, r4, #20
 5837              	.LVL884:
 5838              	.LBB477:
 5839              	.LBB478:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 5840              		.loc 2 75 0
 5841 014e 7A68     		ldr	r2, [r7, #4]
 5842 0150 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 5843              		.loc 2 76 0
 5844 0152 7A68     		ldr	r2, [r7, #4]
 5845 0154 A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 5846              		.loc 2 78 0
 5847 0156 7B60     		str	r3, [r7, #4]
  79:rt_thread/include/rtservice.h **** }
 5848              		.loc 2 79 0
 5849 0158 6761     		str	r7, [r4, #20]
 5850              	.LVL885:
 5851              	.L399:
 5852              	.LBE478:
 5853              	.LBE477:
 5854              	.LBE474:
 5855              	.LBE471:
 5856              	.LBE470:
2034:rt_thread/src/ipc.c ****                             thread,
2035:rt_thread/src/ipc.c ****                             mq->parent.parent.flag);
2036:rt_thread/src/ipc.c **** 
2037:rt_thread/src/ipc.c ****         /* has waiting time, start thread timer */
2038:rt_thread/src/ipc.c ****         if (timeout > 0)
ARM GAS  /tmp/ccObKSes.s 			page 145


 5857              		.loc 1 2038 0
 5858 015a 019B     		ldr	r3, [sp, #4]
 5859 015c 002B     		cmp	r3, #0
 5860 015e 0CDD     		ble	.L406
2039:rt_thread/src/ipc.c ****         {
2040:rt_thread/src/ipc.c ****             /* get the start tick of timer */
2041:rt_thread/src/ipc.c ****             tick_delta = rt_tick_get();
 5861              		.loc 1 2041 0
 5862 0160 FFF7FEFF 		bl	rt_tick_get
 5863              	.LVL886:
 5864 0164 0646     		mov	r6, r0
 5865              	.LVL887:
2042:rt_thread/src/ipc.c **** 
2043:rt_thread/src/ipc.c ****             RT_DEBUG_LOG(RT_DEBUG_IPC, ("mq_send_wait: start timer of thread:%s\n",
2044:rt_thread/src/ipc.c ****                                         thread->name));
2045:rt_thread/src/ipc.c **** 
2046:rt_thread/src/ipc.c ****             /* reset the timeout of thread timer and start it */
2047:rt_thread/src/ipc.c ****             rt_timer_control(&(thread->thread_timer),
 5866              		.loc 1 2047 0
 5867 0166 04F16008 		add	r8, r4, #96
 5868              	.LVL888:
 5869 016a 01AA     		add	r2, sp, #4
 5870              	.LVL889:
 5871 016c 0021     		movs	r1, #0
 5872 016e 4046     		mov	r0, r8
 5873              	.LVL890:
 5874 0170 FFF7FEFF 		bl	rt_timer_control
 5875              	.LVL891:
2048:rt_thread/src/ipc.c ****                              RT_TIMER_CTRL_SET_TIME,
2049:rt_thread/src/ipc.c ****                              &timeout);
2050:rt_thread/src/ipc.c ****             rt_timer_start(&(thread->thread_timer));
 5876              		.loc 1 2050 0
 5877 0174 4046     		mov	r0, r8
 5878 0176 FFF7FEFF 		bl	rt_timer_start
 5879              	.LVL892:
 5880              	.L406:
2051:rt_thread/src/ipc.c ****         }
2052:rt_thread/src/ipc.c **** 
2053:rt_thread/src/ipc.c ****         /* enable interrupt */
2054:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 5881              		.loc 1 2054 0
 5882 017a 5046     		mov	r0, r10
 5883 017c FFF7FEFF 		bl	rt_hw_interrupt_enable
 5884              	.LVL893:
2055:rt_thread/src/ipc.c **** 
2056:rt_thread/src/ipc.c ****         /* re-schedule */
2057:rt_thread/src/ipc.c ****         rt_schedule();
 5885              		.loc 1 2057 0
 5886 0180 FFF7FEFF 		bl	rt_schedule
 5887              	.LVL894:
2058:rt_thread/src/ipc.c **** 
2059:rt_thread/src/ipc.c ****         /* resume from suspend state */
2060:rt_thread/src/ipc.c ****         if (thread->error != RT_EOK)
 5888              		.loc 1 2060 0
 5889 0184 206B     		ldr	r0, [r4, #48]
 5890 0186 0028     		cmp	r0, #0
 5891 0188 47D1     		bne	.L393
ARM GAS  /tmp/ccObKSes.s 			page 146


2061:rt_thread/src/ipc.c ****         {
2062:rt_thread/src/ipc.c ****             /* return error */
2063:rt_thread/src/ipc.c ****             return thread->error;
2064:rt_thread/src/ipc.c ****         }
2065:rt_thread/src/ipc.c **** 
2066:rt_thread/src/ipc.c ****         /* disable interrupt */
2067:rt_thread/src/ipc.c ****         temp = rt_hw_interrupt_disable();
 5892              		.loc 1 2067 0
 5893 018a FFF7FEFF 		bl	rt_hw_interrupt_disable
 5894              	.LVL895:
 5895 018e 8246     		mov	r10, r0
 5896              	.LVL896:
2068:rt_thread/src/ipc.c **** 
2069:rt_thread/src/ipc.c ****         /* if it's not waiting forever and then re-calculate timeout tick */
2070:rt_thread/src/ipc.c ****         if (timeout > 0)
 5897              		.loc 1 2070 0
 5898 0190 019B     		ldr	r3, [sp, #4]
 5899 0192 002B     		cmp	r3, #0
 5900 0194 0DDD     		ble	.L395
2071:rt_thread/src/ipc.c ****         {
2072:rt_thread/src/ipc.c ****             tick_delta = rt_tick_get() - tick_delta;
 5901              		.loc 1 2072 0
 5902 0196 FFF7FEFF 		bl	rt_tick_get
 5903              	.LVL897:
 5904 019a 861B     		subs	r6, r0, r6
 5905              	.LVL898:
2073:rt_thread/src/ipc.c ****             timeout -= tick_delta;
 5906              		.loc 1 2073 0
 5907 019c 019B     		ldr	r3, [sp, #4]
 5908 019e 9B1B     		subs	r3, r3, r6
 5909 01a0 0193     		str	r3, [sp, #4]
2074:rt_thread/src/ipc.c ****             if (timeout < 0)
 5910              		.loc 1 2074 0
 5911 01a2 002B     		cmp	r3, #0
 5912 01a4 05DA     		bge	.L395
2075:rt_thread/src/ipc.c ****                 timeout = 0;
 5913              		.loc 1 2075 0
 5914 01a6 0023     		movs	r3, #0
 5915 01a8 0193     		str	r3, [sp, #4]
 5916 01aa 02E0     		b	.L395
 5917              	.LVL899:
 5918              	.L413:
 5919 01ac 0026     		movs	r6, #0
 5920 01ae 00E0     		b	.L395
 5921              	.LVL900:
 5922              	.L414:
 5923 01b0 0026     		movs	r6, #0
 5924              	.LVL901:
 5925              	.L395:
2017:rt_thread/src/ipc.c ****     {
 5926              		.loc 1 2017 0
 5927 01b2 2F6B     		ldr	r7, [r5, #48]
 5928              	.LVL902:
 5929 01b4 002F     		cmp	r7, #0
 5930 01b6 3FF469AF 		beq	.L408
2076:rt_thread/src/ipc.c ****         }
2077:rt_thread/src/ipc.c ****     }
ARM GAS  /tmp/ccObKSes.s 			page 147


2078:rt_thread/src/ipc.c **** 
2079:rt_thread/src/ipc.c ****     /* move free list pointer */
2080:rt_thread/src/ipc.c ****     mq->msg_queue_free = msg->next;
 5931              		.loc 1 2080 0
 5932 01ba 3B68     		ldr	r3, [r7]
 5933 01bc 2B63     		str	r3, [r5, #48]
2081:rt_thread/src/ipc.c **** 
2082:rt_thread/src/ipc.c ****     /* enable interrupt */
2083:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 5934              		.loc 1 2083 0
 5935 01be 5046     		mov	r0, r10
 5936 01c0 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5937              	.LVL903:
2084:rt_thread/src/ipc.c **** 
2085:rt_thread/src/ipc.c ****     /* the msg is the new tailer of list, the next shall be NULL */
2086:rt_thread/src/ipc.c ****     msg->next = RT_NULL;
 5938              		.loc 1 2086 0
 5939 01c4 3846     		mov	r0, r7
 5940 01c6 0023     		movs	r3, #0
 5941 01c8 40F8043B 		str	r3, [r0], #4
2087:rt_thread/src/ipc.c ****     /* copy buffer */
2088:rt_thread/src/ipc.c ****     rt_memcpy(msg + 1, buffer, size);
 5942              		.loc 1 2088 0
 5943 01cc 5A46     		mov	r2, fp
 5944 01ce 0099     		ldr	r1, [sp]
 5945 01d0 FFF7FEFF 		bl	rt_memcpy
 5946              	.LVL904:
2089:rt_thread/src/ipc.c **** 
2090:rt_thread/src/ipc.c ****     /* disable interrupt */
2091:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 5947              		.loc 1 2091 0
 5948 01d4 FFF7FEFF 		bl	rt_hw_interrupt_disable
 5949              	.LVL905:
 5950 01d8 0446     		mov	r4, r0
 5951              	.LVL906:
2092:rt_thread/src/ipc.c ****     /* link msg to message queue */
2093:rt_thread/src/ipc.c ****     if (mq->msg_queue_tail != RT_NULL)
 5952              		.loc 1 2093 0
 5953 01da EB6A     		ldr	r3, [r5, #44]
 5954 01dc 03B1     		cbz	r3, .L409
2094:rt_thread/src/ipc.c ****     {
2095:rt_thread/src/ipc.c ****         /* if the tail exists, */
2096:rt_thread/src/ipc.c ****         ((struct rt_mq_message *)mq->msg_queue_tail)->next = msg;
 5955              		.loc 1 2096 0
 5956 01de 1F60     		str	r7, [r3]
 5957              	.L409:
2097:rt_thread/src/ipc.c ****     }
2098:rt_thread/src/ipc.c **** 
2099:rt_thread/src/ipc.c ****     /* set new tail */
2100:rt_thread/src/ipc.c ****     mq->msg_queue_tail = msg;
 5958              		.loc 1 2100 0
 5959 01e0 EF62     		str	r7, [r5, #44]
2101:rt_thread/src/ipc.c ****     /* if the head is empty, set head */
2102:rt_thread/src/ipc.c ****     if (mq->msg_queue_head == RT_NULL)
 5960              		.loc 1 2102 0
 5961 01e2 AB6A     		ldr	r3, [r5, #40]
 5962 01e4 03B9     		cbnz	r3, .L410
ARM GAS  /tmp/ccObKSes.s 			page 148


2103:rt_thread/src/ipc.c ****         mq->msg_queue_head = msg;
 5963              		.loc 1 2103 0
 5964 01e6 AF62     		str	r7, [r5, #40]
 5965              	.L410:
2104:rt_thread/src/ipc.c **** 
2105:rt_thread/src/ipc.c ****     /* increase message entry */
2106:rt_thread/src/ipc.c ****     mq->entry ++;
 5966              		.loc 1 2106 0
 5967 01e8 AB8C     		ldrh	r3, [r5, #36]
 5968 01ea 0133     		adds	r3, r3, #1
 5969 01ec AB84     		strh	r3, [r5, #36]	@ movhi
2107:rt_thread/src/ipc.c **** 
2108:rt_thread/src/ipc.c ****     /* resume suspended thread */
2109:rt_thread/src/ipc.c ****     if (!rt_list_isempty(&mq->parent.suspend_thread))
 5970              		.loc 1 2109 0
 5971 01ee 05F11403 		add	r3, r5, #20
 5972              	.LVL907:
 5973              	.LBB479:
 5974              	.LBB480:
 5975              		.loc 2 100 0
 5976 01f2 6869     		ldr	r0, [r5, #20]
 5977              	.LVL908:
 5978              	.LBE480:
 5979              	.LBE479:
 5980              		.loc 1 2109 0
 5981 01f4 8342     		cmp	r3, r0
 5982 01f6 09D0     		beq	.L411
 5983              	.LVL909:
 5984              	.LBB481:
 5985              	.LBB482:
 144:rt_thread/src/ipc.c **** 
 5986              		.loc 1 144 0
 5987 01f8 1438     		subs	r0, r0, #20
 5988              	.LVL910:
 5989 01fa FFF7FEFF 		bl	rt_thread_resume
 5990              	.LVL911:
 5991              	.LBE482:
 5992              	.LBE481:
2110:rt_thread/src/ipc.c ****     {
2111:rt_thread/src/ipc.c ****         rt_ipc_list_resume(&(mq->parent.suspend_thread));
2112:rt_thread/src/ipc.c **** 
2113:rt_thread/src/ipc.c ****         /* enable interrupt */
2114:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 5993              		.loc 1 2114 0
 5994 01fe 2046     		mov	r0, r4
 5995 0200 FFF7FEFF 		bl	rt_hw_interrupt_enable
 5996              	.LVL912:
2115:rt_thread/src/ipc.c **** 
2116:rt_thread/src/ipc.c ****         rt_schedule();
 5997              		.loc 1 2116 0
 5998 0204 FFF7FEFF 		bl	rt_schedule
 5999              	.LVL913:
2117:rt_thread/src/ipc.c **** 
2118:rt_thread/src/ipc.c ****         return RT_EOK;
 6000              		.loc 1 2118 0
 6001 0208 0020     		movs	r0, #0
 6002 020a 06E0     		b	.L393
ARM GAS  /tmp/ccObKSes.s 			page 149


 6003              	.L411:
2119:rt_thread/src/ipc.c ****     }
2120:rt_thread/src/ipc.c **** 
2121:rt_thread/src/ipc.c ****     /* enable interrupt */
2122:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 6004              		.loc 1 2122 0
 6005 020c 2046     		mov	r0, r4
 6006 020e FFF7FEFF 		bl	rt_hw_interrupt_enable
 6007              	.LVL914:
2123:rt_thread/src/ipc.c **** 
2124:rt_thread/src/ipc.c ****     return RT_EOK;
 6008              		.loc 1 2124 0
 6009 0212 0020     		movs	r0, #0
 6010 0214 01E0     		b	.L393
 6011              	.LVL915:
 6012              	.L412:
1993:rt_thread/src/ipc.c **** 
 6013              		.loc 1 1993 0
 6014 0216 4FF0FF30 		mov	r0, #-1
 6015              	.L393:
2125:rt_thread/src/ipc.c **** }
 6016              		.loc 1 2125 0
 6017 021a 03B0     		add	sp, sp, #12
 6018              	.LCFI46:
 6019              		.cfi_def_cfa_offset 36
 6020              	.LVL916:
 6021              		@ sp needed
 6022 021c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6023              	.LVL917:
 6024              	.L417:
 6025              		.align	2
 6026              	.L416:
 6027 0220 00000000 		.word	.LANCHOR32
 6028 0224 94030000 		.word	.LC20
 6029 0228 A4030000 		.word	.LC21
 6030 022c 58040000 		.word	.LC24
 6031 0230 6C040000 		.word	.LC25
 6032 0234 00000000 		.word	rt_object_put_hook
 6033 0238 04010000 		.word	.LC7
 6034 023c C4000000 		.word	.LC5
 6035 0240 9C000000 		.word	.LC4
 6036              		.cfi_endproc
 6037              	.LFE53:
 6039              		.section	.text.rt_mq_send,"ax",%progbits
 6040              		.align	2
 6041              		.global	rt_mq_send
 6042              		.thumb
 6043              		.thumb_func
 6045              	rt_mq_send:
 6046              	.LFB54:
2126:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mq_send_wait)
2127:rt_thread/src/ipc.c **** 
2128:rt_thread/src/ipc.c **** /**
2129:rt_thread/src/ipc.c ****  * This function will send a message to message queue object, if there are
2130:rt_thread/src/ipc.c ****  * threads suspended on message queue object, it will be waked up.
2131:rt_thread/src/ipc.c ****  *
2132:rt_thread/src/ipc.c ****  * @param mq the message queue object
ARM GAS  /tmp/ccObKSes.s 			page 150


2133:rt_thread/src/ipc.c ****  * @param buffer the message
2134:rt_thread/src/ipc.c ****  * @param size the size of buffer
2135:rt_thread/src/ipc.c ****  *
2136:rt_thread/src/ipc.c ****  * @return the error code
2137:rt_thread/src/ipc.c ****  */
2138:rt_thread/src/ipc.c **** rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
2139:rt_thread/src/ipc.c **** {
 6047              		.loc 1 2139 0
 6048              		.cfi_startproc
 6049              		@ args = 0, pretend = 0, frame = 0
 6050              		@ frame_needed = 0, uses_anonymous_args = 0
 6051              	.LVL918:
 6052 0000 08B5     		push	{r3, lr}
 6053              	.LCFI47:
 6054              		.cfi_def_cfa_offset 8
 6055              		.cfi_offset 3, -8
 6056              		.cfi_offset 14, -4
2140:rt_thread/src/ipc.c ****     return rt_mq_send_wait(mq, buffer, size, 0);
 6057              		.loc 1 2140 0
 6058 0002 0023     		movs	r3, #0
 6059 0004 FFF7FEFF 		bl	rt_mq_send_wait
 6060              	.LVL919:
2141:rt_thread/src/ipc.c **** }
 6061              		.loc 1 2141 0
 6062 0008 08BD     		pop	{r3, pc}
 6063              		.cfi_endproc
 6064              	.LFE54:
 6066 000a 00BF     		.section	.text.rt_mq_urgent,"ax",%progbits
 6067              		.align	2
 6068              		.global	rt_mq_urgent
 6069              		.thumb
 6070              		.thumb_func
 6072              	rt_mq_urgent:
 6073              	.LFB55:
2142:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mq_send);
2143:rt_thread/src/ipc.c **** 
2144:rt_thread/src/ipc.c **** /**
2145:rt_thread/src/ipc.c ****  * This function will send an urgent message to message queue object, which
2146:rt_thread/src/ipc.c ****  * means the message will be inserted to the head of message queue. If there
2147:rt_thread/src/ipc.c ****  * are threads suspended on message queue object, it will be waked up.
2148:rt_thread/src/ipc.c ****  *
2149:rt_thread/src/ipc.c ****  * @param mq the message queue object
2150:rt_thread/src/ipc.c ****  * @param buffer the message
2151:rt_thread/src/ipc.c ****  * @param size the size of buffer
2152:rt_thread/src/ipc.c ****  *
2153:rt_thread/src/ipc.c ****  * @return the error code
2154:rt_thread/src/ipc.c ****  */
2155:rt_thread/src/ipc.c **** rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
2156:rt_thread/src/ipc.c **** {
 6074              		.loc 1 2156 0
 6075              		.cfi_startproc
 6076              		@ args = 0, pretend = 0, frame = 0
 6077              		@ frame_needed = 0, uses_anonymous_args = 0
 6078              	.LVL920:
 6079 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6080              	.LCFI48:
 6081              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccObKSes.s 			page 151


 6082              		.cfi_offset 4, -24
 6083              		.cfi_offset 5, -20
 6084              		.cfi_offset 6, -16
 6085              		.cfi_offset 7, -12
 6086              		.cfi_offset 8, -8
 6087              		.cfi_offset 14, -4
 6088 0004 8846     		mov	r8, r1
 6089 0006 1646     		mov	r6, r2
2157:rt_thread/src/ipc.c ****     register rt_ubase_t temp;
2158:rt_thread/src/ipc.c ****     struct rt_mq_message *msg;
2159:rt_thread/src/ipc.c **** 
2160:rt_thread/src/ipc.c ****     /* parameter check */
2161:rt_thread/src/ipc.c ****     RT_ASSERT(mq != RT_NULL);
 6090              		.loc 1 2161 0
 6091 0008 0446     		mov	r4, r0
 6092 000a 28B9     		cbnz	r0, .L421
 6093              		.loc 1 2161 0 is_stmt 0 discriminator 1
 6094 000c 40F67102 		movw	r2, #2161
 6095              	.LVL921:
 6096 0010 3049     		ldr	r1, .L432
 6097              	.LVL922:
 6098 0012 3148     		ldr	r0, .L432+4
 6099              	.LVL923:
 6100 0014 FFF7FEFF 		bl	rt_assert_handler
 6101              	.LVL924:
 6102              	.L421:
2162:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
 6103              		.loc 1 2162 0 is_stmt 1
 6104 0018 2046     		mov	r0, r4
 6105 001a FFF7FEFF 		bl	rt_object_get_type
 6106              	.LVL925:
 6107 001e 0628     		cmp	r0, #6
 6108 0020 05D0     		beq	.L422
 6109              		.loc 1 2162 0 is_stmt 0 discriminator 1
 6110 0022 40F67202 		movw	r2, #2162
 6111 0026 2B49     		ldr	r1, .L432
 6112 0028 2C48     		ldr	r0, .L432+8
 6113 002a FFF7FEFF 		bl	rt_assert_handler
 6114              	.LVL926:
 6115              	.L422:
2163:rt_thread/src/ipc.c ****     RT_ASSERT(buffer != RT_NULL);
 6116              		.loc 1 2163 0 is_stmt 1
 6117 002e B8F1000F 		cmp	r8, #0
 6118 0032 05D1     		bne	.L423
 6119              		.loc 1 2163 0 is_stmt 0 discriminator 1
 6120 0034 40F67302 		movw	r2, #2163
 6121 0038 2649     		ldr	r1, .L432
 6122 003a 2948     		ldr	r0, .L432+12
 6123 003c FFF7FEFF 		bl	rt_assert_handler
 6124              	.LVL927:
 6125              	.L423:
2164:rt_thread/src/ipc.c ****     RT_ASSERT(size != 0);
 6126              		.loc 1 2164 0 is_stmt 1
 6127 0040 2EB9     		cbnz	r6, .L424
 6128              		.loc 1 2164 0 is_stmt 0 discriminator 1
 6129 0042 40F67402 		movw	r2, #2164
 6130 0046 2349     		ldr	r1, .L432
ARM GAS  /tmp/ccObKSes.s 			page 152


 6131 0048 2648     		ldr	r0, .L432+16
 6132 004a FFF7FEFF 		bl	rt_assert_handler
 6133              	.LVL928:
 6134              	.L424:
2165:rt_thread/src/ipc.c **** 
2166:rt_thread/src/ipc.c ****     /* greater than one message size */
2167:rt_thread/src/ipc.c ****     if (size > mq->msg_size)
 6135              		.loc 1 2167 0 is_stmt 1
 6136 004e 238C     		ldrh	r3, [r4, #32]
 6137 0050 9E42     		cmp	r6, r3
 6138 0052 3BD8     		bhi	.L430
2168:rt_thread/src/ipc.c ****         return -RT_ERROR;
2169:rt_thread/src/ipc.c **** 
2170:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mq->parent.parent)));
 6139              		.loc 1 2170 0
 6140 0054 244B     		ldr	r3, .L432+20
 6141 0056 1B68     		ldr	r3, [r3]
 6142 0058 0BB1     		cbz	r3, .L426
 6143              		.loc 1 2170 0 is_stmt 0 discriminator 1
 6144 005a 2046     		mov	r0, r4
 6145 005c 9847     		blx	r3
 6146              	.LVL929:
 6147              	.L426:
2171:rt_thread/src/ipc.c **** 
2172:rt_thread/src/ipc.c ****     /* disable interrupt */
2173:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 6148              		.loc 1 2173 0 is_stmt 1
 6149 005e FFF7FEFF 		bl	rt_hw_interrupt_disable
 6150              	.LVL930:
2174:rt_thread/src/ipc.c **** 
2175:rt_thread/src/ipc.c ****     /* get a free list, there must be an empty item */
2176:rt_thread/src/ipc.c ****     msg = (struct rt_mq_message *)mq->msg_queue_free;
 6151              		.loc 1 2176 0
 6152 0062 256B     		ldr	r5, [r4, #48]
 6153              	.LVL931:
2177:rt_thread/src/ipc.c ****     /* message queue is full */
2178:rt_thread/src/ipc.c ****     if (msg == RT_NULL)
 6154              		.loc 1 2178 0
 6155 0064 2DB9     		cbnz	r5, .L427
2179:rt_thread/src/ipc.c ****     {
2180:rt_thread/src/ipc.c ****         /* enable interrupt */
2181:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 6156              		.loc 1 2181 0
 6157 0066 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6158              	.LVL932:
2182:rt_thread/src/ipc.c **** 
2183:rt_thread/src/ipc.c ****         return -RT_EFULL;
 6159              		.loc 1 2183 0
 6160 006a 6FF00200 		mvn	r0, #2
 6161 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6162              	.LVL933:
 6163              	.L427:
2184:rt_thread/src/ipc.c ****     }
2185:rt_thread/src/ipc.c ****     /* move free list pointer */
2186:rt_thread/src/ipc.c ****     mq->msg_queue_free = msg->next;
 6164              		.loc 1 2186 0
 6165 0072 2F46     		mov	r7, r5
ARM GAS  /tmp/ccObKSes.s 			page 153


 6166 0074 57F8043B 		ldr	r3, [r7], #4
 6167 0078 2363     		str	r3, [r4, #48]
2187:rt_thread/src/ipc.c **** 
2188:rt_thread/src/ipc.c ****     /* enable interrupt */
2189:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 6168              		.loc 1 2189 0
 6169 007a FFF7FEFF 		bl	rt_hw_interrupt_enable
 6170              	.LVL934:
2190:rt_thread/src/ipc.c **** 
2191:rt_thread/src/ipc.c ****     /* copy buffer */
2192:rt_thread/src/ipc.c ****     rt_memcpy(msg + 1, buffer, size);
 6171              		.loc 1 2192 0
 6172 007e 3246     		mov	r2, r6
 6173 0080 4146     		mov	r1, r8
 6174 0082 3846     		mov	r0, r7
 6175 0084 FFF7FEFF 		bl	rt_memcpy
 6176              	.LVL935:
2193:rt_thread/src/ipc.c **** 
2194:rt_thread/src/ipc.c ****     /* disable interrupt */
2195:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 6177              		.loc 1 2195 0
 6178 0088 FFF7FEFF 		bl	rt_hw_interrupt_disable
 6179              	.LVL936:
 6180 008c 0646     		mov	r6, r0
 6181              	.LVL937:
2196:rt_thread/src/ipc.c **** 
2197:rt_thread/src/ipc.c ****     /* link msg to the beginning of message queue */
2198:rt_thread/src/ipc.c ****     msg->next = (struct rt_mq_message *)mq->msg_queue_head;
 6182              		.loc 1 2198 0
 6183 008e A36A     		ldr	r3, [r4, #40]
 6184 0090 2B60     		str	r3, [r5]
2199:rt_thread/src/ipc.c ****     mq->msg_queue_head = msg;
 6185              		.loc 1 2199 0
 6186 0092 A562     		str	r5, [r4, #40]
2200:rt_thread/src/ipc.c **** 
2201:rt_thread/src/ipc.c ****     /* if there is no tail */
2202:rt_thread/src/ipc.c ****     if (mq->msg_queue_tail == RT_NULL)
 6187              		.loc 1 2202 0
 6188 0094 E36A     		ldr	r3, [r4, #44]
 6189 0096 03B9     		cbnz	r3, .L428
2203:rt_thread/src/ipc.c ****         mq->msg_queue_tail = msg;
 6190              		.loc 1 2203 0
 6191 0098 E562     		str	r5, [r4, #44]
 6192              	.L428:
2204:rt_thread/src/ipc.c **** 
2205:rt_thread/src/ipc.c ****     /* increase message entry */
2206:rt_thread/src/ipc.c ****     mq->entry ++;
 6193              		.loc 1 2206 0
 6194 009a A38C     		ldrh	r3, [r4, #36]
 6195 009c 0133     		adds	r3, r3, #1
 6196 009e A384     		strh	r3, [r4, #36]	@ movhi
2207:rt_thread/src/ipc.c **** 
2208:rt_thread/src/ipc.c ****     /* resume suspended thread */
2209:rt_thread/src/ipc.c ****     if (!rt_list_isempty(&mq->parent.suspend_thread))
 6197              		.loc 1 2209 0
 6198 00a0 04F11403 		add	r3, r4, #20
 6199              	.LVL938:
ARM GAS  /tmp/ccObKSes.s 			page 154


 6200              	.LBB483:
 6201              	.LBB484:
 6202              		.loc 2 100 0
 6203 00a4 6069     		ldr	r0, [r4, #20]
 6204              	.LVL939:
 6205              	.LBE484:
 6206              	.LBE483:
 6207              		.loc 1 2209 0
 6208 00a6 8342     		cmp	r3, r0
 6209 00a8 0AD0     		beq	.L429
 6210              	.LVL940:
 6211              	.LBB485:
 6212              	.LBB486:
 144:rt_thread/src/ipc.c **** 
 6213              		.loc 1 144 0
 6214 00aa 1438     		subs	r0, r0, #20
 6215              	.LVL941:
 6216 00ac FFF7FEFF 		bl	rt_thread_resume
 6217              	.LVL942:
 6218              	.LBE486:
 6219              	.LBE485:
2210:rt_thread/src/ipc.c ****     {
2211:rt_thread/src/ipc.c ****         rt_ipc_list_resume(&(mq->parent.suspend_thread));
2212:rt_thread/src/ipc.c **** 
2213:rt_thread/src/ipc.c ****         /* enable interrupt */
2214:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 6220              		.loc 1 2214 0
 6221 00b0 3046     		mov	r0, r6
 6222 00b2 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6223              	.LVL943:
2215:rt_thread/src/ipc.c **** 
2216:rt_thread/src/ipc.c ****         rt_schedule();
 6224              		.loc 1 2216 0
 6225 00b6 FFF7FEFF 		bl	rt_schedule
 6226              	.LVL944:
2217:rt_thread/src/ipc.c **** 
2218:rt_thread/src/ipc.c ****         return RT_EOK;
 6227              		.loc 1 2218 0
 6228 00ba 0020     		movs	r0, #0
 6229 00bc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6230              	.LVL945:
 6231              	.L429:
2219:rt_thread/src/ipc.c ****     }
2220:rt_thread/src/ipc.c **** 
2221:rt_thread/src/ipc.c ****     /* enable interrupt */
2222:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 6232              		.loc 1 2222 0
 6233 00c0 3046     		mov	r0, r6
 6234 00c2 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6235              	.LVL946:
2223:rt_thread/src/ipc.c **** 
2224:rt_thread/src/ipc.c ****     return RT_EOK;
 6236              		.loc 1 2224 0
 6237 00c6 0020     		movs	r0, #0
 6238 00c8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6239              	.LVL947:
 6240              	.L430:
ARM GAS  /tmp/ccObKSes.s 			page 155


2168:rt_thread/src/ipc.c **** 
 6241              		.loc 1 2168 0
 6242 00cc 4FF0FF30 		mov	r0, #-1
2225:rt_thread/src/ipc.c **** }
 6243              		.loc 1 2225 0
 6244 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6245              	.LVL948:
 6246              	.L433:
 6247              		.align	2
 6248              	.L432:
 6249 00d4 00000000 		.word	.LANCHOR33
 6250 00d8 94030000 		.word	.LC20
 6251 00dc A4030000 		.word	.LC21
 6252 00e0 58040000 		.word	.LC24
 6253 00e4 6C040000 		.word	.LC25
 6254 00e8 00000000 		.word	rt_object_put_hook
 6255              		.cfi_endproc
 6256              	.LFE55:
 6258              		.section	.text.rt_mq_recv,"ax",%progbits
 6259              		.align	2
 6260              		.global	rt_mq_recv
 6261              		.thumb
 6262              		.thumb_func
 6264              	rt_mq_recv:
 6265              	.LFB56:
2226:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mq_urgent);
2227:rt_thread/src/ipc.c **** 
2228:rt_thread/src/ipc.c **** /**
2229:rt_thread/src/ipc.c ****  * This function will receive a message from message queue object, if there is
2230:rt_thread/src/ipc.c ****  * no message in message queue object, the thread shall wait for a specified
2231:rt_thread/src/ipc.c ****  * time.
2232:rt_thread/src/ipc.c ****  *
2233:rt_thread/src/ipc.c ****  * @param mq the message queue object
2234:rt_thread/src/ipc.c ****  * @param buffer the received message will be saved in
2235:rt_thread/src/ipc.c ****  * @param size the size of buffer
2236:rt_thread/src/ipc.c ****  * @param timeout the waiting time
2237:rt_thread/src/ipc.c ****  *
2238:rt_thread/src/ipc.c ****  * @return the error code
2239:rt_thread/src/ipc.c ****  */
2240:rt_thread/src/ipc.c **** rt_err_t rt_mq_recv(rt_mq_t    mq,
2241:rt_thread/src/ipc.c ****                     void      *buffer,
2242:rt_thread/src/ipc.c ****                     rt_size_t  size,
2243:rt_thread/src/ipc.c ****                     rt_int32_t timeout)
2244:rt_thread/src/ipc.c **** {
 6266              		.loc 1 2244 0
 6267              		.cfi_startproc
 6268              		@ args = 0, pretend = 0, frame = 8
 6269              		@ frame_needed = 0, uses_anonymous_args = 0
 6270              	.LVL949:
 6271 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6272              	.LCFI49:
 6273              		.cfi_def_cfa_offset 36
 6274              		.cfi_offset 4, -36
 6275              		.cfi_offset 5, -32
 6276              		.cfi_offset 6, -28
 6277              		.cfi_offset 7, -24
 6278              		.cfi_offset 8, -20
ARM GAS  /tmp/ccObKSes.s 			page 156


 6279              		.cfi_offset 9, -16
 6280              		.cfi_offset 10, -12
 6281              		.cfi_offset 11, -8
 6282              		.cfi_offset 14, -4
 6283 0004 83B0     		sub	sp, sp, #12
 6284              	.LCFI50:
 6285              		.cfi_def_cfa_offset 48
 6286 0006 0091     		str	r1, [sp]
 6287 0008 9346     		mov	fp, r2
 6288 000a 0193     		str	r3, [sp, #4]
2245:rt_thread/src/ipc.c ****     struct rt_thread *thread;
2246:rt_thread/src/ipc.c ****     register rt_ubase_t temp;
2247:rt_thread/src/ipc.c ****     struct rt_mq_message *msg;
2248:rt_thread/src/ipc.c ****     rt_uint32_t tick_delta;
2249:rt_thread/src/ipc.c **** 
2250:rt_thread/src/ipc.c ****     /* parameter check */
2251:rt_thread/src/ipc.c ****     RT_ASSERT(mq != RT_NULL);
 6289              		.loc 1 2251 0
 6290 000c 0546     		mov	r5, r0
 6291 000e 28B9     		cbnz	r0, .L435
 6292              		.loc 1 2251 0 is_stmt 0 discriminator 1
 6293 0010 40F6CB02 		movw	r2, #2251
 6294              	.LVL950:
 6295 0014 8B49     		ldr	r1, .L462
 6296              	.LVL951:
 6297 0016 8C48     		ldr	r0, .L462+4
 6298              	.LVL952:
 6299 0018 FFF7FEFF 		bl	rt_assert_handler
 6300              	.LVL953:
 6301              	.L435:
2252:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
 6302              		.loc 1 2252 0 is_stmt 1
 6303 001c 2846     		mov	r0, r5
 6304 001e FFF7FEFF 		bl	rt_object_get_type
 6305              	.LVL954:
 6306 0022 0628     		cmp	r0, #6
 6307 0024 05D0     		beq	.L436
 6308              		.loc 1 2252 0 is_stmt 0 discriminator 1
 6309 0026 40F6CC02 		movw	r2, #2252
 6310 002a 8649     		ldr	r1, .L462
 6311 002c 8748     		ldr	r0, .L462+8
 6312 002e FFF7FEFF 		bl	rt_assert_handler
 6313              	.LVL955:
 6314              	.L436:
2253:rt_thread/src/ipc.c ****     RT_ASSERT(buffer != RT_NULL);
 6315              		.loc 1 2253 0 is_stmt 1
 6316 0032 009B     		ldr	r3, [sp]
 6317 0034 2BB9     		cbnz	r3, .L437
 6318              		.loc 1 2253 0 is_stmt 0 discriminator 1
 6319 0036 40F6CD02 		movw	r2, #2253
 6320 003a 8249     		ldr	r1, .L462
 6321 003c 8448     		ldr	r0, .L462+12
 6322 003e FFF7FEFF 		bl	rt_assert_handler
 6323              	.LVL956:
 6324              	.L437:
2254:rt_thread/src/ipc.c ****     RT_ASSERT(size != 0);
 6325              		.loc 1 2254 0 is_stmt 1
ARM GAS  /tmp/ccObKSes.s 			page 157


 6326 0042 BBF1000F 		cmp	fp, #0
 6327 0046 05D1     		bne	.L438
 6328              		.loc 1 2254 0 is_stmt 0 discriminator 1
 6329 0048 40F6CE02 		movw	r2, #2254
 6330 004c 7D49     		ldr	r1, .L462
 6331 004e 8148     		ldr	r0, .L462+16
 6332 0050 FFF7FEFF 		bl	rt_assert_handler
 6333              	.LVL957:
 6334              	.L438:
2255:rt_thread/src/ipc.c **** 
2256:rt_thread/src/ipc.c ****     /* initialize delta tick */
2257:rt_thread/src/ipc.c ****     tick_delta = 0;
2258:rt_thread/src/ipc.c ****     /* get current thread */
2259:rt_thread/src/ipc.c ****     thread = rt_thread_self();
 6335              		.loc 1 2259 0 is_stmt 1
 6336 0054 FFF7FEFF 		bl	rt_thread_self
 6337              	.LVL958:
 6338 0058 0446     		mov	r4, r0
 6339              	.LVL959:
2260:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mq->parent.parent)));
 6340              		.loc 1 2260 0
 6341 005a 7F4B     		ldr	r3, .L462+20
 6342 005c 1B68     		ldr	r3, [r3]
 6343 005e 0BB1     		cbz	r3, .L439
 6344              		.loc 1 2260 0 is_stmt 0 discriminator 1
 6345 0060 2846     		mov	r0, r5
 6346              	.LVL960:
 6347 0062 9847     		blx	r3
 6348              	.LVL961:
 6349              	.L439:
2261:rt_thread/src/ipc.c **** 
2262:rt_thread/src/ipc.c ****     /* disable interrupt */
2263:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 6350              		.loc 1 2263 0 is_stmt 1
 6351 0064 FFF7FEFF 		bl	rt_hw_interrupt_disable
 6352              	.LVL962:
 6353 0068 0746     		mov	r7, r0
 6354              	.LVL963:
2264:rt_thread/src/ipc.c **** 
2265:rt_thread/src/ipc.c ****     /* for non-blocking call */
2266:rt_thread/src/ipc.c ****     if (mq->entry == 0 && timeout == 0)
 6355              		.loc 1 2266 0
 6356 006a AB8C     		ldrh	r3, [r5, #36]
 6357 006c 002B     		cmp	r3, #0
 6358 006e 40F0A480 		bne	.L458
 6359              		.loc 1 2266 0 is_stmt 0 discriminator 1
 6360 0072 019B     		ldr	r3, [sp, #4]
 6361 0074 002B     		cmp	r3, #0
 6362 0076 40F0A280 		bne	.L459
2267:rt_thread/src/ipc.c ****     {
2268:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 6363              		.loc 1 2268 0 is_stmt 1
 6364 007a FFF7FEFF 		bl	rt_hw_interrupt_enable
 6365              	.LVL964:
2269:rt_thread/src/ipc.c **** 
2270:rt_thread/src/ipc.c ****         return -RT_ETIMEOUT;
 6366              		.loc 1 2270 0
ARM GAS  /tmp/ccObKSes.s 			page 158


 6367 007e 6FF00100 		mvn	r0, #1
 6368 0082 DBE0     		b	.L441
 6369              	.LVL965:
 6370              	.L454:
 6371              	.LBB502:
2271:rt_thread/src/ipc.c ****     }
2272:rt_thread/src/ipc.c **** 
2273:rt_thread/src/ipc.c ****     /* message queue is empty */
2274:rt_thread/src/ipc.c ****     while (mq->entry == 0)
2275:rt_thread/src/ipc.c ****     {
2276:rt_thread/src/ipc.c ****         RT_DEBUG_IN_THREAD_CONTEXT;
 6372              		.loc 1 2276 0
 6373 0084 FFF7FEFF 		bl	rt_hw_interrupt_disable
 6374              	.LVL966:
 6375 0088 8046     		mov	r8, r0
 6376              	.LVL967:
 6377 008a FFF7FEFF 		bl	rt_thread_self
 6378              	.LVL968:
 6379 008e 58B9     		cbnz	r0, .L442
 6380              		.loc 1 2276 0 is_stmt 0 discriminator 1
 6381 0090 DFF8B091 		ldr	r9, .L462
 6382 0094 4946     		mov	r1, r9
 6383 0096 7148     		ldr	r0, .L462+24
 6384 0098 FFF7FEFF 		bl	rt_kprintf
 6385              	.LVL969:
 6386 009c 40F6E402 		movw	r2, #2276
 6387 00a0 4946     		mov	r1, r9
 6388 00a2 6F48     		ldr	r0, .L462+28
 6389 00a4 FFF7FEFF 		bl	rt_assert_handler
 6390              	.LVL970:
 6391              	.L442:
 6392              	.LBB503:
 6393              		.loc 1 2276 0 discriminator 5
 6394 00a8 FFF7FEFF 		bl	rt_hw_interrupt_disable
 6395              	.LVL971:
 6396 00ac 8146     		mov	r9, r0
 6397              	.LVL972:
 6398 00ae FFF7FEFF 		bl	rt_interrupt_get_nest
 6399              	.LVL973:
 6400 00b2 58B1     		cbz	r0, .L443
 6401              		.loc 1 2276 0 discriminator 6
 6402 00b4 DFF88CA1 		ldr	r10, .L462
 6403 00b8 5146     		mov	r1, r10
 6404 00ba 6A48     		ldr	r0, .L462+32
 6405 00bc FFF7FEFF 		bl	rt_kprintf
 6406              	.LVL974:
 6407 00c0 40F6E402 		movw	r2, #2276
 6408 00c4 5146     		mov	r1, r10
 6409 00c6 6648     		ldr	r0, .L462+28
 6410 00c8 FFF7FEFF 		bl	rt_assert_handler
 6411              	.LVL975:
 6412              	.L443:
 6413              		.loc 1 2276 0 discriminator 10
 6414 00cc 4846     		mov	r0, r9
 6415 00ce FFF7FEFF 		bl	rt_hw_interrupt_enable
 6416              	.LVL976:
 6417              	.LBE503:
ARM GAS  /tmp/ccObKSes.s 			page 159


 6418 00d2 4046     		mov	r0, r8
 6419 00d4 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6420              	.LVL977:
 6421              	.LBE502:
2277:rt_thread/src/ipc.c **** 
2278:rt_thread/src/ipc.c ****         /* reset error number in thread */
2279:rt_thread/src/ipc.c ****         thread->error = RT_EOK;
 6422              		.loc 1 2279 0 is_stmt 1 discriminator 10
 6423 00d8 0023     		movs	r3, #0
 6424 00da 2363     		str	r3, [r4, #48]
2280:rt_thread/src/ipc.c **** 
2281:rt_thread/src/ipc.c ****         /* no waiting, return timeout */
2282:rt_thread/src/ipc.c ****         if (timeout == 0)
 6425              		.loc 1 2282 0 discriminator 10
 6426 00dc 019B     		ldr	r3, [sp, #4]
 6427 00de 33B9     		cbnz	r3, .L444
2283:rt_thread/src/ipc.c ****         {
2284:rt_thread/src/ipc.c ****             /* enable interrupt */
2285:rt_thread/src/ipc.c ****             rt_hw_interrupt_enable(temp);
 6428              		.loc 1 2285 0
 6429 00e0 3846     		mov	r0, r7
 6430 00e2 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6431              	.LVL978:
2286:rt_thread/src/ipc.c **** 
2287:rt_thread/src/ipc.c ****             thread->error = -RT_ETIMEOUT;
 6432              		.loc 1 2287 0
 6433 00e6 6FF00100 		mvn	r0, #1
 6434 00ea 2063     		str	r0, [r4, #48]
2288:rt_thread/src/ipc.c **** 
2289:rt_thread/src/ipc.c ****             return -RT_ETIMEOUT;
 6435              		.loc 1 2289 0
 6436 00ec A6E0     		b	.L441
 6437              	.L444:
2290:rt_thread/src/ipc.c ****         }
2291:rt_thread/src/ipc.c **** 
2292:rt_thread/src/ipc.c ****         /* suspend current thread */
2293:rt_thread/src/ipc.c ****         rt_ipc_list_suspend(&(mq->parent.suspend_thread),
 6438              		.loc 1 2293 0
 6439 00ee 05F11408 		add	r8, r5, #20
 6440              	.LVL979:
 6441 00f2 95F80990 		ldrb	r9, [r5, #9]	@ zero_extendqisi2
 6442              	.LVL980:
 6443              	.LBB504:
 6444              	.LBB505:
  85:rt_thread/src/ipc.c **** 
 6445              		.loc 1 85 0
 6446 00f6 2046     		mov	r0, r4
 6447 00f8 FFF7FEFF 		bl	rt_thread_suspend
 6448              	.LVL981:
  87:rt_thread/src/ipc.c ****     {
 6449              		.loc 1 87 0
 6450 00fc B9F1000F 		cmp	r9, #0
 6451 0100 03D0     		beq	.L446
 6452 0102 B9F1010F 		cmp	r9, #1
 6453 0106 0DD0     		beq	.L447
 6454 0108 2EE0     		b	.L445
 6455              	.L446:
ARM GAS  /tmp/ccObKSes.s 			page 160


  90:rt_thread/src/ipc.c ****         break;
 6456              		.loc 1 90 0
 6457 010a 04F11403 		add	r3, r4, #20
 6458              	.LVL982:
 6459              	.LBB506:
 6460              	.LBB507:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 6461              		.loc 2 75 0
 6462 010e D8F80420 		ldr	r2, [r8, #4]
 6463 0112 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 6464              		.loc 2 76 0
 6465 0114 D8F80420 		ldr	r2, [r8, #4]
 6466 0118 A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 6467              		.loc 2 78 0
 6468 011a C8F80430 		str	r3, [r8, #4]
  79:rt_thread/include/rtservice.h **** }
 6469              		.loc 2 79 0
 6470 011e C4F81480 		str	r8, [r4, #20]
 6471 0122 21E0     		b	.L445
 6472              	.LVL983:
 6473              	.L447:
 6474              	.LBE507:
 6475              	.LBE506:
 6476              	.LBB508:
  99:rt_thread/src/ipc.c ****             {
 6477              		.loc 1 99 0
 6478 0124 6B69     		ldr	r3, [r5, #20]
 6479              	.LVL984:
 6480 0126 0FE0     		b	.L448
 6481              	.L451:
 6482              	.LVL985:
 104:rt_thread/src/ipc.c ****                 {
 6483              		.loc 1 104 0
 6484 0128 94F83510 		ldrb	r1, [r4, #53]	@ zero_extendqisi2
 6485 012c 93F82120 		ldrb	r2, [r3, #33]	@ zero_extendqisi2
 6486 0130 9142     		cmp	r1, r2
 6487 0132 08D2     		bcs	.L449
 107:rt_thread/src/ipc.c ****                     break;
 6488              		.loc 1 107 0
 6489 0134 04F11402 		add	r2, r4, #20
 6490              	.LVL986:
 6491              	.LBB509:
 6492              	.LBB510:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 6493              		.loc 2 75 0
 6494 0138 5968     		ldr	r1, [r3, #4]
 6495 013a 0A60     		str	r2, [r1]
  76:rt_thread/include/rtservice.h **** 
 6496              		.loc 2 76 0
 6497 013c 5968     		ldr	r1, [r3, #4]
 6498 013e A161     		str	r1, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 6499              		.loc 2 78 0
 6500 0140 5A60     		str	r2, [r3, #4]
  79:rt_thread/include/rtservice.h **** }
ARM GAS  /tmp/ccObKSes.s 			page 161


 6501              		.loc 2 79 0
 6502 0142 6361     		str	r3, [r4, #20]
 6503 0144 02E0     		b	.L450
 6504              	.LVL987:
 6505              	.L449:
 6506              	.LBE510:
 6507              	.LBE509:
  99:rt_thread/src/ipc.c ****             {
 6508              		.loc 1 99 0
 6509 0146 1B68     		ldr	r3, [r3]
 6510              	.LVL988:
 6511              	.L448:
 6512 0148 9845     		cmp	r8, r3
 6513 014a EDD1     		bne	.L451
 6514              	.L450:
 116:rt_thread/src/ipc.c ****                 rt_list_insert_before(list, &(thread->tlist));
 6515              		.loc 1 116 0
 6516 014c 9845     		cmp	r8, r3
 6517 014e 0BD1     		bne	.L445
 117:rt_thread/src/ipc.c ****         }
 6518              		.loc 1 117 0
 6519 0150 04F11403 		add	r3, r4, #20
 6520              	.LVL989:
 6521              	.LBB511:
 6522              	.LBB512:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 6523              		.loc 2 75 0
 6524 0154 D8F80420 		ldr	r2, [r8, #4]
 6525 0158 1360     		str	r3, [r2]
  76:rt_thread/include/rtservice.h **** 
 6526              		.loc 2 76 0
 6527 015a D8F80420 		ldr	r2, [r8, #4]
 6528 015e A261     		str	r2, [r4, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 6529              		.loc 2 78 0
 6530 0160 C8F80430 		str	r3, [r8, #4]
  79:rt_thread/include/rtservice.h **** }
 6531              		.loc 2 79 0
 6532 0164 C4F81480 		str	r8, [r4, #20]
 6533              	.LVL990:
 6534              	.L445:
 6535              	.LBE512:
 6536              	.LBE511:
 6537              	.LBE508:
 6538              	.LBE505:
 6539              	.LBE504:
2294:rt_thread/src/ipc.c ****                             thread,
2295:rt_thread/src/ipc.c ****                             mq->parent.parent.flag);
2296:rt_thread/src/ipc.c **** 
2297:rt_thread/src/ipc.c ****         /* has waiting time, start thread timer */
2298:rt_thread/src/ipc.c ****         if (timeout > 0)
 6540              		.loc 1 2298 0
 6541 0168 019B     		ldr	r3, [sp, #4]
 6542 016a 002B     		cmp	r3, #0
 6543 016c 0CDD     		ble	.L452
2299:rt_thread/src/ipc.c ****         {
2300:rt_thread/src/ipc.c ****             /* get the start tick of timer */
ARM GAS  /tmp/ccObKSes.s 			page 162


2301:rt_thread/src/ipc.c ****             tick_delta = rt_tick_get();
 6544              		.loc 1 2301 0
 6545 016e FFF7FEFF 		bl	rt_tick_get
 6546              	.LVL991:
 6547 0172 0646     		mov	r6, r0
 6548              	.LVL992:
2302:rt_thread/src/ipc.c **** 
2303:rt_thread/src/ipc.c ****             RT_DEBUG_LOG(RT_DEBUG_IPC, ("set thread:%s to timer list\n",
2304:rt_thread/src/ipc.c ****                                         thread->name));
2305:rt_thread/src/ipc.c **** 
2306:rt_thread/src/ipc.c ****             /* reset the timeout of thread timer and start it */
2307:rt_thread/src/ipc.c ****             rt_timer_control(&(thread->thread_timer),
 6549              		.loc 1 2307 0
 6550 0174 04F16008 		add	r8, r4, #96
 6551 0178 01AA     		add	r2, sp, #4
 6552              	.LVL993:
 6553 017a 0021     		movs	r1, #0
 6554 017c 4046     		mov	r0, r8
 6555              	.LVL994:
 6556 017e FFF7FEFF 		bl	rt_timer_control
 6557              	.LVL995:
2308:rt_thread/src/ipc.c ****                              RT_TIMER_CTRL_SET_TIME,
2309:rt_thread/src/ipc.c ****                              &timeout);
2310:rt_thread/src/ipc.c ****             rt_timer_start(&(thread->thread_timer));
 6558              		.loc 1 2310 0
 6559 0182 4046     		mov	r0, r8
 6560 0184 FFF7FEFF 		bl	rt_timer_start
 6561              	.LVL996:
 6562              	.L452:
2311:rt_thread/src/ipc.c ****         }
2312:rt_thread/src/ipc.c **** 
2313:rt_thread/src/ipc.c ****         /* enable interrupt */
2314:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 6563              		.loc 1 2314 0
 6564 0188 3846     		mov	r0, r7
 6565 018a FFF7FEFF 		bl	rt_hw_interrupt_enable
 6566              	.LVL997:
2315:rt_thread/src/ipc.c **** 
2316:rt_thread/src/ipc.c ****         /* re-schedule */
2317:rt_thread/src/ipc.c ****         rt_schedule();
 6567              		.loc 1 2317 0
 6568 018e FFF7FEFF 		bl	rt_schedule
 6569              	.LVL998:
2318:rt_thread/src/ipc.c **** 
2319:rt_thread/src/ipc.c ****         /* recv message */
2320:rt_thread/src/ipc.c ****         if (thread->error != RT_EOK)
 6570              		.loc 1 2320 0
 6571 0192 206B     		ldr	r0, [r4, #48]
 6572 0194 0028     		cmp	r0, #0
 6573 0196 51D1     		bne	.L441
2321:rt_thread/src/ipc.c ****         {
2322:rt_thread/src/ipc.c ****             /* return error */
2323:rt_thread/src/ipc.c ****             return thread->error;
2324:rt_thread/src/ipc.c ****         }
2325:rt_thread/src/ipc.c **** 
2326:rt_thread/src/ipc.c ****         /* disable interrupt */
2327:rt_thread/src/ipc.c ****         temp = rt_hw_interrupt_disable();
ARM GAS  /tmp/ccObKSes.s 			page 163


 6574              		.loc 1 2327 0
 6575 0198 FFF7FEFF 		bl	rt_hw_interrupt_disable
 6576              	.LVL999:
 6577 019c 0746     		mov	r7, r0
 6578              	.LVL1000:
2328:rt_thread/src/ipc.c **** 
2329:rt_thread/src/ipc.c ****         /* if it's not waiting forever and then re-calculate timeout tick */
2330:rt_thread/src/ipc.c ****         if (timeout > 0)
 6579              		.loc 1 2330 0
 6580 019e 019B     		ldr	r3, [sp, #4]
 6581 01a0 002B     		cmp	r3, #0
 6582 01a2 0DDD     		ble	.L440
2331:rt_thread/src/ipc.c ****         {
2332:rt_thread/src/ipc.c ****             tick_delta = rt_tick_get() - tick_delta;
 6583              		.loc 1 2332 0
 6584 01a4 FFF7FEFF 		bl	rt_tick_get
 6585              	.LVL1001:
 6586 01a8 861B     		subs	r6, r0, r6
 6587              	.LVL1002:
2333:rt_thread/src/ipc.c ****             timeout -= tick_delta;
 6588              		.loc 1 2333 0
 6589 01aa 019B     		ldr	r3, [sp, #4]
 6590 01ac 9B1B     		subs	r3, r3, r6
 6591 01ae 0193     		str	r3, [sp, #4]
2334:rt_thread/src/ipc.c ****             if (timeout < 0)
 6592              		.loc 1 2334 0
 6593 01b0 002B     		cmp	r3, #0
 6594 01b2 05DA     		bge	.L440
2335:rt_thread/src/ipc.c ****                 timeout = 0;
 6595              		.loc 1 2335 0
 6596 01b4 0023     		movs	r3, #0
 6597 01b6 0193     		str	r3, [sp, #4]
 6598 01b8 02E0     		b	.L440
 6599              	.LVL1003:
 6600              	.L458:
 6601 01ba 0026     		movs	r6, #0
 6602 01bc 00E0     		b	.L440
 6603              	.L459:
 6604 01be 0026     		movs	r6, #0
 6605              	.LVL1004:
 6606              	.L440:
2274:rt_thread/src/ipc.c ****     {
 6607              		.loc 1 2274 0
 6608 01c0 AB8C     		ldrh	r3, [r5, #36]
 6609 01c2 002B     		cmp	r3, #0
 6610 01c4 3FF45EAF 		beq	.L454
2336:rt_thread/src/ipc.c ****         }
2337:rt_thread/src/ipc.c ****     }
2338:rt_thread/src/ipc.c **** 
2339:rt_thread/src/ipc.c ****     /* get message from queue */
2340:rt_thread/src/ipc.c ****     msg = (struct rt_mq_message *)mq->msg_queue_head;
 6611              		.loc 1 2340 0
 6612 01c8 AC6A     		ldr	r4, [r5, #40]
 6613              	.LVL1005:
2341:rt_thread/src/ipc.c **** 
2342:rt_thread/src/ipc.c ****     /* move message queue head */
2343:rt_thread/src/ipc.c ****     mq->msg_queue_head = msg->next;
ARM GAS  /tmp/ccObKSes.s 			page 164


 6614              		.loc 1 2343 0
 6615 01ca 2268     		ldr	r2, [r4]
 6616 01cc AA62     		str	r2, [r5, #40]
2344:rt_thread/src/ipc.c ****     /* reach queue tail, set to NULL */
2345:rt_thread/src/ipc.c ****     if (mq->msg_queue_tail == msg)
 6617              		.loc 1 2345 0
 6618 01ce EA6A     		ldr	r2, [r5, #44]
 6619 01d0 9442     		cmp	r4, r2
 6620 01d2 01D1     		bne	.L455
2346:rt_thread/src/ipc.c ****         mq->msg_queue_tail = RT_NULL;
 6621              		.loc 1 2346 0
 6622 01d4 0022     		movs	r2, #0
 6623 01d6 EA62     		str	r2, [r5, #44]
 6624              	.L455:
2347:rt_thread/src/ipc.c **** 
2348:rt_thread/src/ipc.c ****     /* decrease message entry */
2349:rt_thread/src/ipc.c ****     mq->entry --;
 6625              		.loc 1 2349 0
 6626 01d8 013B     		subs	r3, r3, #1
 6627 01da AB84     		strh	r3, [r5, #36]	@ movhi
2350:rt_thread/src/ipc.c **** 
2351:rt_thread/src/ipc.c ****     /* enable interrupt */
2352:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 6628              		.loc 1 2352 0
 6629 01dc 3846     		mov	r0, r7
 6630 01de FFF7FEFF 		bl	rt_hw_interrupt_enable
 6631              	.LVL1006:
2353:rt_thread/src/ipc.c **** 
2354:rt_thread/src/ipc.c ****     /* copy message */
2355:rt_thread/src/ipc.c ****     rt_memcpy(buffer, msg + 1, size > mq->msg_size ? mq->msg_size : size);
 6632              		.loc 1 2355 0
 6633 01e2 2A8C     		ldrh	r2, [r5, #32]
 6634 01e4 5A45     		cmp	r2, fp
 6635 01e6 28BF     		it	cs
 6636 01e8 5A46     		movcs	r2, fp
 6637 01ea 211D     		adds	r1, r4, #4
 6638 01ec 0098     		ldr	r0, [sp]
 6639 01ee FFF7FEFF 		bl	rt_memcpy
 6640              	.LVL1007:
2356:rt_thread/src/ipc.c **** 
2357:rt_thread/src/ipc.c ****     /* disable interrupt */
2358:rt_thread/src/ipc.c ****     temp = rt_hw_interrupt_disable();
 6641              		.loc 1 2358 0
 6642 01f2 FFF7FEFF 		bl	rt_hw_interrupt_disable
 6643              	.LVL1008:
 6644 01f6 0646     		mov	r6, r0
 6645              	.LVL1009:
2359:rt_thread/src/ipc.c ****     /* put message to free list */
2360:rt_thread/src/ipc.c ****     msg->next = (struct rt_mq_message *)mq->msg_queue_free;
 6646              		.loc 1 2360 0
 6647 01f8 2B6B     		ldr	r3, [r5, #48]
 6648 01fa 2360     		str	r3, [r4]
2361:rt_thread/src/ipc.c ****     mq->msg_queue_free = msg;
 6649              		.loc 1 2361 0
 6650 01fc 2C63     		str	r4, [r5, #48]
2362:rt_thread/src/ipc.c **** 
2363:rt_thread/src/ipc.c ****     /* resume suspended thread */
ARM GAS  /tmp/ccObKSes.s 			page 165


2364:rt_thread/src/ipc.c ****     if (!rt_list_isempty(&(mq->suspend_sender_thread)))
 6651              		.loc 1 2364 0
 6652 01fe 05F13403 		add	r3, r5, #52
 6653              	.LBB513:
 6654              	.LBB514:
 6655              		.loc 2 100 0
 6656 0202 686B     		ldr	r0, [r5, #52]
 6657              	.LVL1010:
 6658              	.LBE514:
 6659              	.LBE513:
 6660              		.loc 1 2364 0
 6661 0204 8342     		cmp	r3, r0
 6662 0206 0ED0     		beq	.L456
 6663              	.LVL1011:
 6664              	.LBB515:
 6665              	.LBB516:
 144:rt_thread/src/ipc.c **** 
 6666              		.loc 1 144 0
 6667 0208 1438     		subs	r0, r0, #20
 6668              	.LVL1012:
 6669 020a FFF7FEFF 		bl	rt_thread_resume
 6670              	.LVL1013:
 6671              	.LBE516:
 6672              	.LBE515:
2365:rt_thread/src/ipc.c ****     {
2366:rt_thread/src/ipc.c ****         rt_ipc_list_resume(&(mq->suspend_sender_thread));
2367:rt_thread/src/ipc.c **** 
2368:rt_thread/src/ipc.c ****         /* enable interrupt */
2369:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(temp);
 6673              		.loc 1 2369 0
 6674 020e 3046     		mov	r0, r6
 6675 0210 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6676              	.LVL1014:
2370:rt_thread/src/ipc.c **** 
2371:rt_thread/src/ipc.c ****         RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mq->parent.parent)));
 6677              		.loc 1 2371 0
 6678 0214 144B     		ldr	r3, .L462+36
 6679 0216 1B68     		ldr	r3, [r3]
 6680 0218 0BB1     		cbz	r3, .L457
 6681              		.loc 1 2371 0 is_stmt 0 discriminator 1
 6682 021a 2846     		mov	r0, r5
 6683 021c 9847     		blx	r3
 6684              	.LVL1015:
 6685              	.L457:
2372:rt_thread/src/ipc.c **** 
2373:rt_thread/src/ipc.c ****         rt_schedule();
 6686              		.loc 1 2373 0 is_stmt 1
 6687 021e FFF7FEFF 		bl	rt_schedule
 6688              	.LVL1016:
2374:rt_thread/src/ipc.c **** 
2375:rt_thread/src/ipc.c ****         return RT_EOK;
 6689              		.loc 1 2375 0
 6690 0222 0020     		movs	r0, #0
 6691 0224 0AE0     		b	.L441
 6692              	.L456:
2376:rt_thread/src/ipc.c ****     }
2377:rt_thread/src/ipc.c **** 
ARM GAS  /tmp/ccObKSes.s 			page 166


2378:rt_thread/src/ipc.c ****     /* enable interrupt */
2379:rt_thread/src/ipc.c ****     rt_hw_interrupt_enable(temp);
 6693              		.loc 1 2379 0
 6694 0226 3046     		mov	r0, r6
 6695 0228 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6696              	.LVL1017:
2380:rt_thread/src/ipc.c **** 
2381:rt_thread/src/ipc.c ****     RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mq->parent.parent)));
 6697              		.loc 1 2381 0
 6698 022c 0E4B     		ldr	r3, .L462+36
 6699 022e 1B68     		ldr	r3, [r3]
 6700 0230 1BB1     		cbz	r3, .L460
 6701              		.loc 1 2381 0 is_stmt 0 discriminator 1
 6702 0232 2846     		mov	r0, r5
 6703 0234 9847     		blx	r3
 6704              	.LVL1018:
2382:rt_thread/src/ipc.c **** 
2383:rt_thread/src/ipc.c ****     return RT_EOK;
 6705              		.loc 1 2383 0 is_stmt 1 discriminator 1
 6706 0236 0020     		movs	r0, #0
 6707 0238 00E0     		b	.L441
 6708              	.L460:
 6709              		.loc 1 2383 0 is_stmt 0
 6710 023a 0020     		movs	r0, #0
 6711              	.LVL1019:
 6712              	.L441:
2384:rt_thread/src/ipc.c **** }
 6713              		.loc 1 2384 0 is_stmt 1
 6714 023c 03B0     		add	sp, sp, #12
 6715              	.LCFI51:
 6716              		.cfi_def_cfa_offset 36
 6717              	.LVL1020:
 6718              		@ sp needed
 6719 023e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6720              	.LVL1021:
 6721              	.L463:
 6722 0242 00BF     		.align	2
 6723              	.L462:
 6724 0244 00000000 		.word	.LANCHOR34
 6725 0248 94030000 		.word	.LC20
 6726 024c A4030000 		.word	.LC21
 6727 0250 58040000 		.word	.LC24
 6728 0254 6C040000 		.word	.LC25
 6729 0258 00000000 		.word	rt_object_trytake_hook
 6730 025c 04010000 		.word	.LC7
 6731 0260 C4000000 		.word	.LC5
 6732 0264 9C000000 		.word	.LC4
 6733 0268 00000000 		.word	rt_object_take_hook
 6734              		.cfi_endproc
 6735              	.LFE56:
 6737              		.section	.text.rt_mq_control,"ax",%progbits
 6738              		.align	2
 6739              		.global	rt_mq_control
 6740              		.thumb
 6741              		.thumb_func
 6743              	rt_mq_control:
 6744              	.LFB57:
ARM GAS  /tmp/ccObKSes.s 			page 167


2385:rt_thread/src/ipc.c **** RTM_EXPORT(rt_mq_recv);
2386:rt_thread/src/ipc.c **** 
2387:rt_thread/src/ipc.c **** /**
2388:rt_thread/src/ipc.c ****  * This function can get or set some extra attributions of a message queue
2389:rt_thread/src/ipc.c ****  * object.
2390:rt_thread/src/ipc.c ****  *
2391:rt_thread/src/ipc.c ****  * @param mq the message queue object
2392:rt_thread/src/ipc.c ****  * @param cmd the execution command
2393:rt_thread/src/ipc.c ****  * @param arg the execution argument
2394:rt_thread/src/ipc.c ****  *
2395:rt_thread/src/ipc.c ****  * @return the error code
2396:rt_thread/src/ipc.c ****  */
2397:rt_thread/src/ipc.c **** rt_err_t rt_mq_control(rt_mq_t mq, int cmd, void *arg)
2398:rt_thread/src/ipc.c **** {
 6745              		.loc 1 2398 0
 6746              		.cfi_startproc
 6747              		@ args = 0, pretend = 0, frame = 0
 6748              		@ frame_needed = 0, uses_anonymous_args = 0
 6749              	.LVL1022:
 6750 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6751              	.LCFI52:
 6752              		.cfi_def_cfa_offset 24
 6753              		.cfi_offset 3, -24
 6754              		.cfi_offset 4, -20
 6755              		.cfi_offset 5, -16
 6756              		.cfi_offset 6, -12
 6757              		.cfi_offset 7, -8
 6758              		.cfi_offset 14, -4
 6759 0002 0D46     		mov	r5, r1
2399:rt_thread/src/ipc.c ****     rt_ubase_t level;
2400:rt_thread/src/ipc.c ****     struct rt_mq_message *msg;
2401:rt_thread/src/ipc.c **** 
2402:rt_thread/src/ipc.c ****     /* parameter check */
2403:rt_thread/src/ipc.c ****     RT_ASSERT(mq != RT_NULL);
 6760              		.loc 1 2403 0
 6761 0004 0446     		mov	r4, r0
 6762 0006 28B9     		cbnz	r0, .L465
 6763              		.loc 1 2403 0 is_stmt 0 discriminator 1
 6764 0008 40F66312 		movw	r2, #2403
 6765              	.LVL1023:
 6766 000c 2949     		ldr	r1, .L477
 6767              	.LVL1024:
 6768 000e 2A48     		ldr	r0, .L477+4
 6769              	.LVL1025:
 6770 0010 FFF7FEFF 		bl	rt_assert_handler
 6771              	.LVL1026:
 6772              	.L465:
2404:rt_thread/src/ipc.c ****     RT_ASSERT(rt_object_get_type(&mq->parent.parent) == RT_Object_Class_MessageQueue);
 6773              		.loc 1 2404 0 is_stmt 1
 6774 0014 2046     		mov	r0, r4
 6775 0016 FFF7FEFF 		bl	rt_object_get_type
 6776              	.LVL1027:
 6777 001a 0628     		cmp	r0, #6
 6778 001c 05D0     		beq	.L466
 6779              		.loc 1 2404 0 is_stmt 0 discriminator 1
 6780 001e 40F66412 		movw	r2, #2404
 6781 0022 2449     		ldr	r1, .L477
ARM GAS  /tmp/ccObKSes.s 			page 168


 6782 0024 2548     		ldr	r0, .L477+8
 6783 0026 FFF7FEFF 		bl	rt_assert_handler
 6784              	.LVL1028:
 6785              	.L466:
2405:rt_thread/src/ipc.c **** 
2406:rt_thread/src/ipc.c ****     if (cmd == RT_IPC_CMD_RESET)
 6786              		.loc 1 2406 0 is_stmt 1
 6787 002a 012D     		cmp	r5, #1
 6788 002c 3FD1     		bne	.L475
2407:rt_thread/src/ipc.c ****     {
2408:rt_thread/src/ipc.c ****         /* disable interrupt */
2409:rt_thread/src/ipc.c ****         level = rt_hw_interrupt_disable();
 6789              		.loc 1 2409 0
 6790 002e FFF7FEFF 		bl	rt_hw_interrupt_disable
 6791              	.LVL1029:
 6792 0032 0646     		mov	r6, r0
 6793              	.LVL1030:
2410:rt_thread/src/ipc.c **** 
2411:rt_thread/src/ipc.c ****         /* resume all waiting thread */
2412:rt_thread/src/ipc.c ****         rt_ipc_list_resume_all(&mq->parent.suspend_thread);
 6794              		.loc 1 2412 0
 6795 0034 04F11405 		add	r5, r4, #20
 6796              	.LVL1031:
 6797 0038 0CE0     		b	.L468
 6798              	.LVL1032:
 6799              	.L469:
 6800              	.LBB525:
 6801              	.LBB526:
 166:rt_thread/src/ipc.c **** 
 6802              		.loc 1 166 0
 6803 003a FFF7FEFF 		bl	rt_hw_interrupt_disable
 6804              	.LVL1033:
 6805 003e 0746     		mov	r7, r0
 6806              	.LVL1034:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 6807              		.loc 1 169 0
 6808 0040 2868     		ldr	r0, [r5]
 6809              	.LVL1035:
 171:rt_thread/src/ipc.c **** 
 6810              		.loc 1 171 0
 6811 0042 4FF0FF33 		mov	r3, #-1
 6812 0046 C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 6813              		.loc 1 178 0
 6814 0048 1438     		subs	r0, r0, #20
 6815              	.LVL1036:
 6816 004a FFF7FEFF 		bl	rt_thread_resume
 6817              	.LVL1037:
 181:rt_thread/src/ipc.c ****     }
 6818              		.loc 1 181 0
 6819 004e 3846     		mov	r0, r7
 6820 0050 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6821              	.LVL1038:
 6822              	.L468:
 6823              	.LBB527:
 6824              	.LBB528:
 6825              		.loc 2 100 0
ARM GAS  /tmp/ccObKSes.s 			page 169


 6826 0054 2B68     		ldr	r3, [r5]
 6827              	.LVL1039:
 6828              	.LBE528:
 6829              	.LBE527:
 163:rt_thread/src/ipc.c ****     {
 6830              		.loc 1 163 0
 6831 0056 9D42     		cmp	r5, r3
 6832 0058 EFD1     		bne	.L469
 6833              	.LVL1040:
 6834              	.LBE526:
 6835              	.LBE525:
2413:rt_thread/src/ipc.c ****         /* also resume all message queue private suspended thread */
2414:rt_thread/src/ipc.c ****         rt_ipc_list_resume_all(&(mq->suspend_sender_thread));
 6836              		.loc 1 2414 0
 6837 005a 04F13405 		add	r5, r4, #52
 6838              	.LVL1041:
 6839 005e 0CE0     		b	.L470
 6840              	.L471:
 6841              	.LBB529:
 6842              	.LBB530:
 166:rt_thread/src/ipc.c **** 
 6843              		.loc 1 166 0
 6844 0060 FFF7FEFF 		bl	rt_hw_interrupt_disable
 6845              	.LVL1042:
 6846 0064 0746     		mov	r7, r0
 6847              	.LVL1043:
 169:rt_thread/src/ipc.c ****         /* set error code to RT_ERROR */
 6848              		.loc 1 169 0
 6849 0066 2868     		ldr	r0, [r5]
 6850              	.LVL1044:
 171:rt_thread/src/ipc.c **** 
 6851              		.loc 1 171 0
 6852 0068 4FF0FF33 		mov	r3, #-1
 6853 006c C361     		str	r3, [r0, #28]
 178:rt_thread/src/ipc.c **** 
 6854              		.loc 1 178 0
 6855 006e 1438     		subs	r0, r0, #20
 6856              	.LVL1045:
 6857 0070 FFF7FEFF 		bl	rt_thread_resume
 6858              	.LVL1046:
 181:rt_thread/src/ipc.c ****     }
 6859              		.loc 1 181 0
 6860 0074 3846     		mov	r0, r7
 6861 0076 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6862              	.LVL1047:
 6863              	.L470:
 6864              	.LBB531:
 6865              	.LBB532:
 6866              		.loc 2 100 0
 6867 007a 2B68     		ldr	r3, [r5]
 6868              	.LVL1048:
 6869              	.LBE532:
 6870              	.LBE531:
 163:rt_thread/src/ipc.c ****     {
 6871              		.loc 1 163 0
 6872 007c 9D42     		cmp	r5, r3
 6873 007e EFD1     		bne	.L471
ARM GAS  /tmp/ccObKSes.s 			page 170


 6874 0080 09E0     		b	.L472
 6875              	.L474:
 6876              	.LVL1049:
 6877              	.LBE530:
 6878              	.LBE529:
2415:rt_thread/src/ipc.c **** 
2416:rt_thread/src/ipc.c ****         /* release all message in the queue */
2417:rt_thread/src/ipc.c ****         while (mq->msg_queue_head != RT_NULL)
2418:rt_thread/src/ipc.c ****         {
2419:rt_thread/src/ipc.c ****             /* get message from queue */
2420:rt_thread/src/ipc.c ****             msg = (struct rt_mq_message *)mq->msg_queue_head;
2421:rt_thread/src/ipc.c **** 
2422:rt_thread/src/ipc.c ****             /* move message queue head */
2423:rt_thread/src/ipc.c ****             mq->msg_queue_head = msg->next;
 6879              		.loc 1 2423 0
 6880 0082 1A68     		ldr	r2, [r3]
 6881 0084 A262     		str	r2, [r4, #40]
2424:rt_thread/src/ipc.c ****             /* reach queue tail, set to NULL */
2425:rt_thread/src/ipc.c ****             if (mq->msg_queue_tail == msg)
 6882              		.loc 1 2425 0
 6883 0086 E26A     		ldr	r2, [r4, #44]
 6884 0088 9342     		cmp	r3, r2
 6885 008a 01D1     		bne	.L473
2426:rt_thread/src/ipc.c ****                 mq->msg_queue_tail = RT_NULL;
 6886              		.loc 1 2426 0
 6887 008c 0022     		movs	r2, #0
 6888 008e E262     		str	r2, [r4, #44]
 6889              	.L473:
2427:rt_thread/src/ipc.c **** 
2428:rt_thread/src/ipc.c ****             /* put message to free list */
2429:rt_thread/src/ipc.c ****             msg->next = (struct rt_mq_message *)mq->msg_queue_free;
 6890              		.loc 1 2429 0
 6891 0090 226B     		ldr	r2, [r4, #48]
 6892 0092 1A60     		str	r2, [r3]
2430:rt_thread/src/ipc.c ****             mq->msg_queue_free = msg;
 6893              		.loc 1 2430 0
 6894 0094 2363     		str	r3, [r4, #48]
 6895              	.LVL1050:
 6896              	.L472:
2417:rt_thread/src/ipc.c ****         {
 6897              		.loc 1 2417 0
 6898 0096 A36A     		ldr	r3, [r4, #40]
 6899 0098 002B     		cmp	r3, #0
 6900 009a F2D1     		bne	.L474
2431:rt_thread/src/ipc.c ****         }
2432:rt_thread/src/ipc.c **** 
2433:rt_thread/src/ipc.c ****         /* clean entry */
2434:rt_thread/src/ipc.c ****         mq->entry = 0;
 6901              		.loc 1 2434 0
 6902 009c 0025     		movs	r5, #0
 6903              	.LVL1051:
 6904 009e A584     		strh	r5, [r4, #36]	@ movhi
2435:rt_thread/src/ipc.c **** 
2436:rt_thread/src/ipc.c ****         /* enable interrupt */
2437:rt_thread/src/ipc.c ****         rt_hw_interrupt_enable(level);
 6905              		.loc 1 2437 0
 6906 00a0 3046     		mov	r0, r6
ARM GAS  /tmp/ccObKSes.s 			page 171


 6907 00a2 FFF7FEFF 		bl	rt_hw_interrupt_enable
 6908              	.LVL1052:
2438:rt_thread/src/ipc.c **** 
2439:rt_thread/src/ipc.c ****         rt_schedule();
 6909              		.loc 1 2439 0
 6910 00a6 FFF7FEFF 		bl	rt_schedule
 6911              	.LVL1053:
2440:rt_thread/src/ipc.c **** 
2441:rt_thread/src/ipc.c ****         return RT_EOK;
 6912              		.loc 1 2441 0
 6913 00aa 2846     		mov	r0, r5
 6914 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6915              	.LVL1054:
 6916              	.L475:
2442:rt_thread/src/ipc.c ****     }
2443:rt_thread/src/ipc.c **** 
2444:rt_thread/src/ipc.c ****     return -RT_ERROR;
 6917              		.loc 1 2444 0
 6918 00ae 4FF0FF30 		mov	r0, #-1
2445:rt_thread/src/ipc.c **** }
 6919              		.loc 1 2445 0
 6920 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6921              	.LVL1055:
 6922              	.L478:
 6923              		.align	2
 6924              	.L477:
 6925 00b4 00000000 		.word	.LANCHOR35
 6926 00b8 94030000 		.word	.LC20
 6927 00bc A4030000 		.word	.LC21
 6928              		.cfi_endproc
 6929              	.LFE57:
 6931              		.section	.rodata.__FUNCTION__.5508,"a",%progbits
 6932              		.align	2
 6933              		.set	.LANCHOR24,. + 0
 6936              	__FUNCTION__.5508:
 6937 0000 72745F6D 		.ascii	"rt_mb_delete\000"
 6937      625F6465 
 6937      6C657465 
 6937      00
 6938              		.section	.rodata.__FUNCTION__.5567,"a",%progbits
 6939              		.align	2
 6940              		.set	.LANCHOR29,. + 0
 6943              	__FUNCTION__.5567:
 6944 0000 72745F6D 		.ascii	"rt_mq_detach\000"
 6944      715F6465 
 6944      74616368 
 6944      00
 6945              		.section	.rodata.__FUNCTION__.5475,"a",%progbits
 6946              		.align	2
 6947              		.set	.LANCHOR19,. + 0
 6950              	__FUNCTION__.5475:
 6951 0000 72745F65 		.ascii	"rt_event_recv\000"
 6951      76656E74 
 6951      5F726563 
 6951      7600
 6952              		.section	.rodata.__FUNCTION__.5380,"a",%progbits
 6953              		.align	2
ARM GAS  /tmp/ccObKSes.s 			page 172


 6954              		.set	.LANCHOR6,. + 0
 6957              	__FUNCTION__.5380:
 6958 0000 72745F73 		.ascii	"rt_sem_control\000"
 6958      656D5F63 
 6958      6F6E7472 
 6958      6F6C00
 6959              		.section	.rodata.__FUNCTION__.5517,"a",%progbits
 6960              		.align	2
 6961              		.set	.LANCHOR25,. + 0
 6964              	__FUNCTION__.5517:
 6965 0000 72745F6D 		.ascii	"rt_mb_send_wait\000"
 6965      625F7365 
 6965      6E645F77 
 6965      61697400 
 6966              		.section	.rodata.__FUNCTION__.5483,"a",%progbits
 6967              		.align	2
 6968              		.set	.LANCHOR20,. + 0
 6971              	__FUNCTION__.5483:
 6972 0000 72745F65 		.ascii	"rt_event_control\000"
 6972      76656E74 
 6972      5F636F6E 
 6972      74726F6C 
 6972      00
 6973              		.section	.rodata.__FUNCTION__.5586,"a",%progbits
 6974              		.align	2
 6975              		.set	.LANCHOR31,. + 0
 6978              	__FUNCTION__.5586:
 6979 0000 72745F6D 		.ascii	"rt_mq_delete\000"
 6979      715F6465 
 6979      6C657465 
 6979      00
 6980              		.section	.rodata.__FUNCTION__.5491,"a",%progbits
 6981              		.align	2
 6982              		.set	.LANCHOR21,. + 0
 6985              	__FUNCTION__.5491:
 6986 0000 72745F6D 		.ascii	"rt_mb_init\000"
 6986      625F696E 
 6986      697400
 6987              		.section	.rodata.__FUNCTION__.5626,"a",%progbits
 6988              		.align	2
 6989              		.set	.LANCHOR34,. + 0
 6992              	__FUNCTION__.5626:
 6993 0000 72745F6D 		.ascii	"rt_mq_recv\000"
 6993      715F7265 
 6993      637600
 6994              		.section	.rodata.__FUNCTION__.5342,"a",%progbits
 6995              		.align	2
 6996              		.set	.LANCHOR1,. + 0
 6999              	__FUNCTION__.5342:
 7000 0000 72745F73 		.ascii	"rt_sem_detach\000"
 7000      656D5F64 
 7000      65746163 
 7000      6800
 7001              		.section	.rodata.__FUNCTION__.5639,"a",%progbits
 7002              		.align	2
 7003              		.set	.LANCHOR35,. + 0
 7006              	__FUNCTION__.5639:
ARM GAS  /tmp/ccObKSes.s 			page 173


 7007 0000 72745F6D 		.ascii	"rt_mq_control\000"
 7007      715F636F 
 7007      6E74726F 
 7007      6C00
 7008              		.section	.rodata.__FUNCTION__.5495,"a",%progbits
 7009              		.align	2
 7010              		.set	.LANCHOR22,. + 0
 7013              	__FUNCTION__.5495:
 7014 0000 72745F6D 		.ascii	"rt_mb_detach\000"
 7014      625F6465 
 7014      74616368 
 7014      00
 7015              		.section	.rodata.__FUNCTION__.5355,"a",%progbits
 7016              		.align	2
 7017              		.set	.LANCHOR3,. + 0
 7020              	__FUNCTION__.5355:
 7021 0000 72745F73 		.ascii	"rt_sem_delete\000"
 7021      656D5F64 
 7021      656C6574 
 7021      6500
 7022              		.section	.rodata.__FUNCTION__.5387,"a",%progbits
 7023              		.align	2
 7024              		.set	.LANCHOR7,. + 0
 7027              	__FUNCTION__.5387:
 7028 0000 72745F6D 		.ascii	"rt_mutex_init\000"
 7028      75746578 
 7028      5F696E69 
 7028      7400
 7029              		.section	.rodata.__FUNCTION__.5362,"a",%progbits
 7030              		.align	2
 7031              		.set	.LANCHOR4,. + 0
 7034              	__FUNCTION__.5362:
 7035 0000 72745F73 		.ascii	"rt_sem_take\000"
 7035      656D5F74 
 7035      616B6500 
 7036              		.section	.rodata.__FUNCTION__.5403,"a",%progbits
 7037              		.align	2
 7038              		.set	.LANCHOR10,. + 0
 7041              	__FUNCTION__.5403:
 7042 0000 72745F6D 		.ascii	"rt_mutex_delete\000"
 7042      75746578 
 7042      5F64656C 
 7042      65746500 
 7043              		.section	.rodata.__FUNCTION__.5338,"a",%progbits
 7044              		.align	2
 7045              		.set	.LANCHOR0,. + 0
 7048              	__FUNCTION__.5338:
 7049 0000 72745F73 		.ascii	"rt_sem_init\000"
 7049      656D5F69 
 7049      6E697400 
 7050              		.section	.rodata.__FUNCTION__.5411,"a",%progbits
 7051              		.align	2
 7052              		.set	.LANCHOR11,. + 0
 7055              	__FUNCTION__.5411:
 7056 0000 72745F6D 		.ascii	"rt_mutex_take\000"
 7056      75746578 
 7056      5F74616B 
ARM GAS  /tmp/ccObKSes.s 			page 174


 7056      6500
 7057              		.section	.rodata.__FUNCTION__.5373,"a",%progbits
 7058              		.align	2
 7059              		.set	.LANCHOR5,. + 0
 7062              	__FUNCTION__.5373:
 7063 0000 72745F73 		.ascii	"rt_sem_release\000"
 7063      656D5F72 
 7063      656C6561 
 7063      736500
 7064              		.section	.rodata.__FUNCTION__.5560,"a",%progbits
 7065              		.align	2
 7066              		.set	.LANCHOR28,. + 0
 7069              	__FUNCTION__.5560:
 7070 0000 72745F6D 		.ascii	"rt_mq_init\000"
 7070      715F696E 
 7070      697400
 7071              		.section	.rodata.__FUNCTION__.5420,"a",%progbits
 7072              		.align	2
 7073              		.set	.LANCHOR12,. + 0
 7076              	__FUNCTION__.5420:
 7077 0000 72745F6D 		.ascii	"rt_mutex_release\000"
 7077      75746578 
 7077      5F72656C 
 7077      65617365 
 7077      00
 7078              		.section	.rodata.str1.4,"aMS",%progbits,1
 7079              		.align	2
 7080              	.LC0:
 7081 0000 73656D20 		.ascii	"sem != RT_NULL\000"
 7081      213D2052 
 7081      545F4E55 
 7081      4C4C00
 7082 000f 00       		.space	1
 7083              	.LC1:
 7084 0010 76616C75 		.ascii	"value < 0x10000U\000"
 7084      65203C20 
 7084      30783130 
 7084      30303055 
 7084      00
 7085 0021 000000   		.space	3
 7086              	.LC2:
 7087 0024 72745F6F 		.ascii	"rt_object_get_type(&sem->parent.parent) == RT_Objec"
 7087      626A6563 
 7087      745F6765 
 7087      745F7479 
 7087      70652826 
 7088 0057 745F436C 		.ascii	"t_Class_Semaphore\000"
 7088      6173735F 
 7088      53656D61 
 7088      70686F72 
 7088      6500
 7089 0069 000000   		.space	3
 7090              	.LC3:
 7091 006c 72745F6F 		.ascii	"rt_object_is_systemobject(&sem->parent.parent)\000"
 7091      626A6563 
 7091      745F6973 
 7091      5F737973 
ARM GAS  /tmp/ccObKSes.s 			page 175


 7091      74656D6F 
 7092 009b 00       		.space	1
 7093              	.LC4:
 7094 009c 46756E63 		.ascii	"Function[%s] shall not be used in ISR\012\000"
 7094      74696F6E 
 7094      5B25735D 
 7094      20736861 
 7094      6C6C206E 
 7095 00c3 00       		.space	1
 7096              	.LC5:
 7097 00c4 3000     		.ascii	"0\000"
 7098 00c6 0000     		.space	2
 7099              	.LC6:
 7100 00c8 72745F6F 		.ascii	"rt_object_is_systemobject(&sem->parent.parent) == R"
 7100      626A6563 
 7100      745F6973 
 7100      5F737973 
 7100      74656D6F 
 7101 00fb 545F4641 		.ascii	"T_FALSE\000"
 7101      4C534500 
 7102 0103 00       		.space	1
 7103              	.LC7:
 7104 0104 46756E63 		.ascii	"Function[%s] shall not be used before scheduler sta"
 7104      74696F6E 
 7104      5B25735D 
 7104      20736861 
 7104      6C6C206E 
 7105 0137 72740A00 		.ascii	"rt\012\000"
 7106 013b 00       		.space	1
 7107              	.LC8:
 7108 013c 6D757465 		.ascii	"mutex != RT_NULL\000"
 7108      7820213D 
 7108      2052545F 
 7108      4E554C4C 
 7108      00
 7109 014d 000000   		.space	3
 7110              	.LC9:
 7111 0150 72745F6F 		.ascii	"rt_object_get_type(&mutex->parent.parent) == RT_Obj"
 7111      626A6563 
 7111      745F6765 
 7111      745F7479 
 7111      70652826 
 7112 0183 6563745F 		.ascii	"ect_Class_Mutex\000"
 7112      436C6173 
 7112      735F4D75 
 7112      74657800 
 7113 0193 00       		.space	1
 7114              	.LC10:
 7115 0194 72745F6F 		.ascii	"rt_object_is_systemobject(&mutex->parent.parent)\000"
 7115      626A6563 
 7115      745F6973 
 7115      5F737973 
 7115      74656D6F 
 7116 01c5 000000   		.space	3
 7117              	.LC11:
 7118 01c8 72745F6F 		.ascii	"rt_object_is_systemobject(&mutex->parent.parent) =="
 7118      626A6563 
ARM GAS  /tmp/ccObKSes.s 			page 176


 7118      745F6973 
 7118      5F737973 
 7118      74656D6F 
 7119 01fb 2052545F 		.ascii	" RT_FALSE\000"
 7119      46414C53 
 7119      4500
 7120 0205 000000   		.space	3
 7121              	.LC12:
 7122 0208 6576656E 		.ascii	"event != RT_NULL\000"
 7122      7420213D 
 7122      2052545F 
 7122      4E554C4C 
 7122      00
 7123 0219 000000   		.space	3
 7124              	.LC13:
 7125 021c 72745F6F 		.ascii	"rt_object_get_type(&event->parent.parent) == RT_Obj"
 7125      626A6563 
 7125      745F6765 
 7125      745F7479 
 7125      70652826 
 7126 024f 6563745F 		.ascii	"ect_Class_Event\000"
 7126      436C6173 
 7126      735F4576 
 7126      656E7400 
 7127 025f 00       		.space	1
 7128              	.LC14:
 7129 0260 72745F6F 		.ascii	"rt_object_is_systemobject(&event->parent.parent)\000"
 7129      626A6563 
 7129      745F6973 
 7129      5F737973 
 7129      74656D6F 
 7130 0291 000000   		.space	3
 7131              	.LC15:
 7132 0294 72745F6F 		.ascii	"rt_object_is_systemobject(&event->parent.parent) =="
 7132      626A6563 
 7132      745F6973 
 7132      5F737973 
 7132      74656D6F 
 7133 02c7 2052545F 		.ascii	" RT_FALSE\000"
 7133      46414C53 
 7133      4500
 7134 02d1 000000   		.space	3
 7135              	.LC16:
 7136 02d4 6D622021 		.ascii	"mb != RT_NULL\000"
 7136      3D205254 
 7136      5F4E554C 
 7136      4C00
 7137 02e2 0000     		.space	2
 7138              	.LC17:
 7139 02e4 72745F6F 		.ascii	"rt_object_get_type(&mb->parent.parent) == RT_Object"
 7139      626A6563 
 7139      745F6765 
 7139      745F7479 
 7139      70652826 
 7140 0317 5F436C61 		.ascii	"_Class_MailBox\000"
 7140      73735F4D 
 7140      61696C42 
ARM GAS  /tmp/ccObKSes.s 			page 177


 7140      6F7800
 7141 0326 0000     		.space	2
 7142              	.LC18:
 7143 0328 72745F6F 		.ascii	"rt_object_is_systemobject(&mb->parent.parent)\000"
 7143      626A6563 
 7143      745F6973 
 7143      5F737973 
 7143      74656D6F 
 7144 0356 0000     		.space	2
 7145              	.LC19:
 7146 0358 72745F6F 		.ascii	"rt_object_is_systemobject(&mb->parent.parent) == RT"
 7146      626A6563 
 7146      745F6973 
 7146      5F737973 
 7146      74656D6F 
 7147 038b 5F46414C 		.ascii	"_FALSE\000"
 7147      534500
 7148 0392 0000     		.space	2
 7149              	.LC20:
 7150 0394 6D712021 		.ascii	"mq != RT_NULL\000"
 7150      3D205254 
 7150      5F4E554C 
 7150      4C00
 7151 03a2 0000     		.space	2
 7152              	.LC21:
 7153 03a4 72745F6F 		.ascii	"rt_object_get_type(&mq->parent.parent) == RT_Object"
 7153      626A6563 
 7153      745F6765 
 7153      745F7479 
 7153      70652826 
 7154 03d7 5F436C61 		.ascii	"_Class_MessageQueue\000"
 7154      73735F4D 
 7154      65737361 
 7154      67655175 
 7154      65756500 
 7155 03eb 00       		.space	1
 7156              	.LC22:
 7157 03ec 72745F6F 		.ascii	"rt_object_is_systemobject(&mq->parent.parent)\000"
 7157      626A6563 
 7157      745F6973 
 7157      5F737973 
 7157      74656D6F 
 7158 041a 0000     		.space	2
 7159              	.LC23:
 7160 041c 72745F6F 		.ascii	"rt_object_is_systemobject(&mq->parent.parent) == RT"
 7160      626A6563 
 7160      745F6973 
 7160      5F737973 
 7160      74656D6F 
 7161 044f 5F46414C 		.ascii	"_FALSE\000"
 7161      534500
 7162 0456 0000     		.space	2
 7163              	.LC24:
 7164 0458 62756666 		.ascii	"buffer != RT_NULL\000"
 7164      65722021 
 7164      3D205254 
 7164      5F4E554C 
ARM GAS  /tmp/ccObKSes.s 			page 178


 7164      4C00
 7165 046a 0000     		.space	2
 7166              	.LC25:
 7167 046c 73697A65 		.ascii	"size != 0\000"
 7167      20213D20 
 7167      3000
 7168              		.section	.rodata.__FUNCTION__.5615,"a",%progbits
 7169              		.align	2
 7170              		.set	.LANCHOR33,. + 0
 7173              	__FUNCTION__.5615:
 7174 0000 72745F6D 		.ascii	"rt_mq_urgent\000"
 7174      715F7572 
 7174      67656E74 
 7174      00
 7175              		.section	.rodata.__FUNCTION__.5398,"a",%progbits
 7176              		.align	2
 7177              		.set	.LANCHOR9,. + 0
 7180              	__FUNCTION__.5398:
 7181 0000 72745F6D 		.ascii	"rt_mutex_create\000"
 7181      75746578 
 7181      5F637265 
 7181      61746500 
 7182              		.section	.rodata.__FUNCTION__.5350,"a",%progbits
 7183              		.align	2
 7184              		.set	.LANCHOR2,. + 0
 7187              	__FUNCTION__.5350:
 7188 0000 72745F73 		.ascii	"rt_sem_create\000"
 7188      656D5F63 
 7188      72656174 
 7188      6500
 7189              		.section	.rodata.__FUNCTION__.5391,"a",%progbits
 7190              		.align	2
 7191              		.set	.LANCHOR8,. + 0
 7194              	__FUNCTION__.5391:
 7195 0000 72745F6D 		.ascii	"rt_mutex_detach\000"
 7195      75746578 
 7195      5F646574 
 7195      61636800 
 7196              		.section	.rodata.__FUNCTION__.5428,"a",%progbits
 7197              		.align	2
 7198              		.set	.LANCHOR13,. + 0
 7201              	__FUNCTION__.5428:
 7202 0000 72745F6D 		.ascii	"rt_mutex_control\000"
 7202      75746578 
 7202      5F636F6E 
 7202      74726F6C 
 7202      00
 7203              		.section	.rodata.__FUNCTION__.5434,"a",%progbits
 7204              		.align	2
 7205              		.set	.LANCHOR14,. + 0
 7208              	__FUNCTION__.5434:
 7209 0000 72745F65 		.ascii	"rt_event_init\000"
 7209      76656E74 
 7209      5F696E69 
 7209      7400
 7210              		.section	.rodata.__FUNCTION__.5578,"a",%progbits
 7211              		.align	2
ARM GAS  /tmp/ccObKSes.s 			page 179


 7212              		.set	.LANCHOR30,. + 0
 7215              	__FUNCTION__.5578:
 7216 0000 72745F6D 		.ascii	"rt_mq_create\000"
 7216      715F6372 
 7216      65617465 
 7216      00
 7217              		.section	.rodata.__FUNCTION__.5438,"a",%progbits
 7218              		.align	2
 7219              		.set	.LANCHOR15,. + 0
 7222              	__FUNCTION__.5438:
 7223 0000 72745F65 		.ascii	"rt_event_detach\000"
 7223      76656E74 
 7223      5F646574 
 7223      61636800 
 7224              		.section	.rodata.__FUNCTION__.5547,"a",%progbits
 7225              		.align	2
 7226              		.set	.LANCHOR27,. + 0
 7229              	__FUNCTION__.5547:
 7230 0000 72745F6D 		.ascii	"rt_mb_control\000"
 7230      625F636F 
 7230      6E74726F 
 7230      6C00
 7231              		.section	.rodata.__FUNCTION__.5445,"a",%progbits
 7232              		.align	2
 7233              		.set	.LANCHOR16,. + 0
 7236              	__FUNCTION__.5445:
 7237 0000 72745F65 		.ascii	"rt_event_create\000"
 7237      76656E74 
 7237      5F637265 
 7237      61746500 
 7238              		.section	.rodata.__FUNCTION__.5535,"a",%progbits
 7239              		.align	2
 7240              		.set	.LANCHOR26,. + 0
 7243              	__FUNCTION__.5535:
 7244 0000 72745F6D 		.ascii	"rt_mb_recv\000"
 7244      625F7265 
 7244      637600
 7245              		.section	.rodata.__FUNCTION__.5449,"a",%progbits
 7246              		.align	2
 7247              		.set	.LANCHOR17,. + 0
 7250              	__FUNCTION__.5449:
 7251 0000 72745F65 		.ascii	"rt_event_delete\000"
 7251      76656E74 
 7251      5F64656C 
 7251      65746500 
 7252              		.section	.rodata.__FUNCTION__.5460,"a",%progbits
 7253              		.align	2
 7254              		.set	.LANCHOR18,. + 0
 7257              	__FUNCTION__.5460:
 7258 0000 72745F65 		.ascii	"rt_event_send\000"
 7258      76656E74 
 7258      5F73656E 
 7258      6400
 7259              		.section	.rodata.__FUNCTION__.5597,"a",%progbits
 7260              		.align	2
 7261              		.set	.LANCHOR32,. + 0
 7264              	__FUNCTION__.5597:
ARM GAS  /tmp/ccObKSes.s 			page 180


 7265 0000 72745F6D 		.ascii	"rt_mq_send_wait\000"
 7265      715F7365 
 7265      6E645F77 
 7265      61697400 
 7266              		.section	.rodata.__FUNCTION__.5503,"a",%progbits
 7267              		.align	2
 7268              		.set	.LANCHOR23,. + 0
 7271              	__FUNCTION__.5503:
 7272 0000 72745F6D 		.ascii	"rt_mb_create\000"
 7272      625F6372 
 7272      65617465 
 7272      00
 7273              		.text
 7274              	.Letext0:
 7275              		.file 3 "rt_thread/include/rtdef.h"
 7276              		.file 4 "rt_thread/include/rtthread.h"
 7277              		.file 5 "rt_thread/include/rthw.h"
ARM GAS  /tmp/ccObKSes.s 			page 181


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ipc.c
     /tmp/ccObKSes.s:20     .text.rt_sem_init:0000000000000000 $t
     /tmp/ccObKSes.s:25     .text.rt_sem_init:0000000000000000 rt_sem_init
     /tmp/ccObKSes.s:101    .text.rt_sem_init:0000000000000040 $d
     /tmp/ccObKSes.s:108    .text.rt_sem_detach:0000000000000000 $t
     /tmp/ccObKSes.s:113    .text.rt_sem_detach:0000000000000000 rt_sem_detach
     /tmp/ccObKSes.s:215    .text.rt_sem_detach:0000000000000068 $d
     /tmp/ccObKSes.s:223    .text.rt_sem_create:0000000000000000 $t
     /tmp/ccObKSes.s:228    .text.rt_sem_create:0000000000000000 rt_sem_create
     /tmp/ccObKSes.s:320    .text.rt_sem_create:0000000000000064 $d
     /tmp/ccObKSes.s:328    .text.rt_sem_delete:0000000000000000 $t
     /tmp/ccObKSes.s:333    .text.rt_sem_delete:0000000000000000 rt_sem_delete
     /tmp/ccObKSes.s:460    .text.rt_sem_delete:0000000000000094 $d
     /tmp/ccObKSes.s:470    .text.rt_sem_take:0000000000000000 $t
     /tmp/ccObKSes.s:475    .text.rt_sem_take:0000000000000000 rt_sem_take
     /tmp/ccObKSes.s:771    .text.rt_sem_take:000000000000015c $d
     /tmp/ccObKSes.s:783    .text.rt_sem_trytake:0000000000000000 $t
     /tmp/ccObKSes.s:788    .text.rt_sem_trytake:0000000000000000 rt_sem_trytake
     /tmp/ccObKSes.s:810    .text.rt_sem_release:0000000000000000 $t
     /tmp/ccObKSes.s:815    .text.rt_sem_release:0000000000000000 rt_sem_release
     /tmp/ccObKSes.s:920    .text.rt_sem_release:0000000000000064 $d
     /tmp/ccObKSes.s:928    .text.rt_sem_control:0000000000000000 $t
     /tmp/ccObKSes.s:933    .text.rt_sem_control:0000000000000000 rt_sem_control
     /tmp/ccObKSes.s:1052   .text.rt_sem_control:0000000000000078 $d
     /tmp/ccObKSes.s:1059   .text.rt_mutex_init:0000000000000000 $t
     /tmp/ccObKSes.s:1064   .text.rt_mutex_init:0000000000000000 rt_mutex_init
     /tmp/ccObKSes.s:1133   .text.rt_mutex_init:000000000000003c $d
     /tmp/ccObKSes.s:1139   .text.rt_mutex_detach:0000000000000000 $t
     /tmp/ccObKSes.s:1144   .text.rt_mutex_detach:0000000000000000 rt_mutex_detach
     /tmp/ccObKSes.s:1246   .text.rt_mutex_detach:000000000000006c $d
     /tmp/ccObKSes.s:1254   .text.rt_mutex_create:0000000000000000 $t
     /tmp/ccObKSes.s:1259   .text.rt_mutex_create:0000000000000000 rt_mutex_create
     /tmp/ccObKSes.s:1349   .text.rt_mutex_create:0000000000000058 $d
     /tmp/ccObKSes.s:1356   .text.rt_mutex_delete:0000000000000000 $t
     /tmp/ccObKSes.s:1361   .text.rt_mutex_delete:0000000000000000 rt_mutex_delete
     /tmp/ccObKSes.s:1488   .text.rt_mutex_delete:0000000000000094 $d
     /tmp/ccObKSes.s:1498   .text.rt_mutex_take:0000000000000000 $t
     /tmp/ccObKSes.s:1503   .text.rt_mutex_take:0000000000000000 rt_mutex_take
     /tmp/ccObKSes.s:1841   .text.rt_mutex_take:00000000000001a0 $d
     /tmp/ccObKSes.s:1853   .text.rt_mutex_release:0000000000000000 $t
     /tmp/ccObKSes.s:1858   .text.rt_mutex_release:0000000000000000 rt_mutex_release
     /tmp/ccObKSes.s:2081   .text.rt_mutex_release:0000000000000110 $d
     /tmp/ccObKSes.s:2092   .text.rt_mutex_control:0000000000000000 $t
     /tmp/ccObKSes.s:2097   .text.rt_mutex_control:0000000000000000 rt_mutex_control
     /tmp/ccObKSes.s:2142   .text.rt_mutex_control:0000000000000030 $d
     /tmp/ccObKSes.s:2149   .text.rt_event_init:0000000000000000 $t
     /tmp/ccObKSes.s:2154   .text.rt_event_init:0000000000000000 rt_event_init
     /tmp/ccObKSes.s:2216   .text.rt_event_init:0000000000000030 $d
     /tmp/ccObKSes.s:2222   .text.rt_event_detach:0000000000000000 $t
     /tmp/ccObKSes.s:2227   .text.rt_event_detach:0000000000000000 rt_event_detach
     /tmp/ccObKSes.s:2329   .text.rt_event_detach:000000000000006c $d
     /tmp/ccObKSes.s:2337   .text.rt_event_create:0000000000000000 $t
     /tmp/ccObKSes.s:2342   .text.rt_event_create:0000000000000000 rt_event_create
     /tmp/ccObKSes.s:2424   .text.rt_event_create:000000000000004c $d
     /tmp/ccObKSes.s:2431   .text.rt_event_delete:0000000000000000 $t
     /tmp/ccObKSes.s:2436   .text.rt_event_delete:0000000000000000 rt_event_delete
ARM GAS  /tmp/ccObKSes.s 			page 182


     /tmp/ccObKSes.s:2564   .text.rt_event_delete:0000000000000094 $d
     /tmp/ccObKSes.s:2574   .text.rt_event_send:0000000000000000 $t
     /tmp/ccObKSes.s:2579   .text.rt_event_send:0000000000000000 rt_event_send
     /tmp/ccObKSes.s:2766   .text.rt_event_send:00000000000000d8 $d
     /tmp/ccObKSes.s:2774   .text.rt_event_recv:0000000000000000 $t
     /tmp/ccObKSes.s:2779   .text.rt_event_recv:0000000000000000 rt_event_recv
     /tmp/ccObKSes.s:3157   .text.rt_event_recv:00000000000001d0 $d
     /tmp/ccObKSes.s:3169   .text.rt_event_control:0000000000000000 $t
     /tmp/ccObKSes.s:3174   .text.rt_event_control:0000000000000000 rt_event_control
     /tmp/ccObKSes.s:3290   .text.rt_event_control:0000000000000074 $d
     /tmp/ccObKSes.s:3297   .text.rt_mb_init:0000000000000000 $t
     /tmp/ccObKSes.s:3302   .text.rt_mb_init:0000000000000000 rt_mb_init
     /tmp/ccObKSes.s:3387   .text.rt_mb_init:0000000000000048 $d
     /tmp/ccObKSes.s:3393   .text.rt_mb_detach:0000000000000000 $t
     /tmp/ccObKSes.s:3398   .text.rt_mb_detach:0000000000000000 rt_mb_detach
     /tmp/ccObKSes.s:3541   .text.rt_mb_detach:0000000000000094 $d
     /tmp/ccObKSes.s:3549   .text.rt_mb_create:0000000000000000 $t
     /tmp/ccObKSes.s:3554   .text.rt_mb_create:0000000000000000 rt_mb_create
     /tmp/ccObKSes.s:3675   .text.rt_mb_create:0000000000000080 $d
     /tmp/ccObKSes.s:3682   .text.rt_mb_delete:0000000000000000 $t
     /tmp/ccObKSes.s:3687   .text.rt_mb_delete:0000000000000000 rt_mb_delete
     /tmp/ccObKSes.s:3859   .text.rt_mb_delete:00000000000000c0 $d
     /tmp/ccObKSes.s:3869   .text.rt_mb_send_wait:0000000000000000 $t
     /tmp/ccObKSes.s:3874   .text.rt_mb_send_wait:0000000000000000 rt_mb_send_wait
     /tmp/ccObKSes.s:4273   .text.rt_mb_send_wait:00000000000001e4 $d
     /tmp/ccObKSes.s:4284   .text.rt_mb_send:0000000000000000 $t
     /tmp/ccObKSes.s:4289   .text.rt_mb_send:0000000000000000 rt_mb_send
     /tmp/ccObKSes.s:4311   .text.rt_mb_recv:0000000000000000 $t
     /tmp/ccObKSes.s:4316   .text.rt_mb_recv:0000000000000000 rt_mb_recv
     /tmp/ccObKSes.s:4735   .text.rt_mb_recv:00000000000001fc $d
     /tmp/ccObKSes.s:4747   .text.rt_mb_control:0000000000000000 $t
     /tmp/ccObKSes.s:4752   .text.rt_mb_control:0000000000000000 rt_mb_control
     /tmp/ccObKSes.s:4913   .text.rt_mb_control:000000000000009c $d
     /tmp/ccObKSes.s:4920   .text.rt_mq_init:0000000000000000 $t
     /tmp/ccObKSes.s:4925   .text.rt_mq_init:0000000000000000 rt_mq_init
     /tmp/ccObKSes.s:5048   .text.rt_mq_init:0000000000000078 $d
     /tmp/ccObKSes.s:5054   .text.rt_mq_detach:0000000000000000 $t
     /tmp/ccObKSes.s:5059   .text.rt_mq_detach:0000000000000000 rt_mq_detach
     /tmp/ccObKSes.s:5202   .text.rt_mq_detach:0000000000000094 $d
     /tmp/ccObKSes.s:5210   .text.rt_mq_create:0000000000000000 $t
     /tmp/ccObKSes.s:5215   .text.rt_mq_create:0000000000000000 rt_mq_create
     /tmp/ccObKSes.s:5376   .text.rt_mq_create:00000000000000b4 $d
     /tmp/ccObKSes.s:5383   .text.rt_mq_delete:0000000000000000 $t
     /tmp/ccObKSes.s:5388   .text.rt_mq_delete:0000000000000000 rt_mq_delete
     /tmp/ccObKSes.s:5560   .text.rt_mq_delete:00000000000000c0 $d
     /tmp/ccObKSes.s:5570   .text.rt_mq_send_wait:0000000000000000 $t
     /tmp/ccObKSes.s:5575   .text.rt_mq_send_wait:0000000000000000 rt_mq_send_wait
     /tmp/ccObKSes.s:6027   .text.rt_mq_send_wait:0000000000000220 $d
     /tmp/ccObKSes.s:6040   .text.rt_mq_send:0000000000000000 $t
     /tmp/ccObKSes.s:6045   .text.rt_mq_send:0000000000000000 rt_mq_send
     /tmp/ccObKSes.s:6067   .text.rt_mq_urgent:0000000000000000 $t
     /tmp/ccObKSes.s:6072   .text.rt_mq_urgent:0000000000000000 rt_mq_urgent
     /tmp/ccObKSes.s:6249   .text.rt_mq_urgent:00000000000000d4 $d
     /tmp/ccObKSes.s:6259   .text.rt_mq_recv:0000000000000000 $t
     /tmp/ccObKSes.s:6264   .text.rt_mq_recv:0000000000000000 rt_mq_recv
     /tmp/ccObKSes.s:6724   .text.rt_mq_recv:0000000000000244 $d
     /tmp/ccObKSes.s:6738   .text.rt_mq_control:0000000000000000 $t
ARM GAS  /tmp/ccObKSes.s 			page 183


     /tmp/ccObKSes.s:6743   .text.rt_mq_control:0000000000000000 rt_mq_control
     /tmp/ccObKSes.s:6925   .text.rt_mq_control:00000000000000b4 $d
     /tmp/ccObKSes.s:6932   .rodata.__FUNCTION__.5508:0000000000000000 $d
     /tmp/ccObKSes.s:6936   .rodata.__FUNCTION__.5508:0000000000000000 __FUNCTION__.5508
     /tmp/ccObKSes.s:6939   .rodata.__FUNCTION__.5567:0000000000000000 $d
     /tmp/ccObKSes.s:6943   .rodata.__FUNCTION__.5567:0000000000000000 __FUNCTION__.5567
     /tmp/ccObKSes.s:6946   .rodata.__FUNCTION__.5475:0000000000000000 $d
     /tmp/ccObKSes.s:6950   .rodata.__FUNCTION__.5475:0000000000000000 __FUNCTION__.5475
     /tmp/ccObKSes.s:6953   .rodata.__FUNCTION__.5380:0000000000000000 $d
     /tmp/ccObKSes.s:6957   .rodata.__FUNCTION__.5380:0000000000000000 __FUNCTION__.5380
     /tmp/ccObKSes.s:6960   .rodata.__FUNCTION__.5517:0000000000000000 $d
     /tmp/ccObKSes.s:6964   .rodata.__FUNCTION__.5517:0000000000000000 __FUNCTION__.5517
     /tmp/ccObKSes.s:6967   .rodata.__FUNCTION__.5483:0000000000000000 $d
     /tmp/ccObKSes.s:6971   .rodata.__FUNCTION__.5483:0000000000000000 __FUNCTION__.5483
     /tmp/ccObKSes.s:6974   .rodata.__FUNCTION__.5586:0000000000000000 $d
     /tmp/ccObKSes.s:6978   .rodata.__FUNCTION__.5586:0000000000000000 __FUNCTION__.5586
     /tmp/ccObKSes.s:6981   .rodata.__FUNCTION__.5491:0000000000000000 $d
     /tmp/ccObKSes.s:6985   .rodata.__FUNCTION__.5491:0000000000000000 __FUNCTION__.5491
     /tmp/ccObKSes.s:6988   .rodata.__FUNCTION__.5626:0000000000000000 $d
     /tmp/ccObKSes.s:6992   .rodata.__FUNCTION__.5626:0000000000000000 __FUNCTION__.5626
     /tmp/ccObKSes.s:6995   .rodata.__FUNCTION__.5342:0000000000000000 $d
     /tmp/ccObKSes.s:6999   .rodata.__FUNCTION__.5342:0000000000000000 __FUNCTION__.5342
     /tmp/ccObKSes.s:7002   .rodata.__FUNCTION__.5639:0000000000000000 $d
     /tmp/ccObKSes.s:7006   .rodata.__FUNCTION__.5639:0000000000000000 __FUNCTION__.5639
     /tmp/ccObKSes.s:7009   .rodata.__FUNCTION__.5495:0000000000000000 $d
     /tmp/ccObKSes.s:7013   .rodata.__FUNCTION__.5495:0000000000000000 __FUNCTION__.5495
     /tmp/ccObKSes.s:7016   .rodata.__FUNCTION__.5355:0000000000000000 $d
     /tmp/ccObKSes.s:7020   .rodata.__FUNCTION__.5355:0000000000000000 __FUNCTION__.5355
     /tmp/ccObKSes.s:7023   .rodata.__FUNCTION__.5387:0000000000000000 $d
     /tmp/ccObKSes.s:7027   .rodata.__FUNCTION__.5387:0000000000000000 __FUNCTION__.5387
     /tmp/ccObKSes.s:7030   .rodata.__FUNCTION__.5362:0000000000000000 $d
     /tmp/ccObKSes.s:7034   .rodata.__FUNCTION__.5362:0000000000000000 __FUNCTION__.5362
     /tmp/ccObKSes.s:7037   .rodata.__FUNCTION__.5403:0000000000000000 $d
     /tmp/ccObKSes.s:7041   .rodata.__FUNCTION__.5403:0000000000000000 __FUNCTION__.5403
     /tmp/ccObKSes.s:7044   .rodata.__FUNCTION__.5338:0000000000000000 $d
     /tmp/ccObKSes.s:7048   .rodata.__FUNCTION__.5338:0000000000000000 __FUNCTION__.5338
     /tmp/ccObKSes.s:7051   .rodata.__FUNCTION__.5411:0000000000000000 $d
     /tmp/ccObKSes.s:7055   .rodata.__FUNCTION__.5411:0000000000000000 __FUNCTION__.5411
     /tmp/ccObKSes.s:7058   .rodata.__FUNCTION__.5373:0000000000000000 $d
     /tmp/ccObKSes.s:7062   .rodata.__FUNCTION__.5373:0000000000000000 __FUNCTION__.5373
     /tmp/ccObKSes.s:7065   .rodata.__FUNCTION__.5560:0000000000000000 $d
     /tmp/ccObKSes.s:7069   .rodata.__FUNCTION__.5560:0000000000000000 __FUNCTION__.5560
     /tmp/ccObKSes.s:7072   .rodata.__FUNCTION__.5420:0000000000000000 $d
     /tmp/ccObKSes.s:7076   .rodata.__FUNCTION__.5420:0000000000000000 __FUNCTION__.5420
     /tmp/ccObKSes.s:7079   .rodata.str1.4:0000000000000000 $d
     /tmp/ccObKSes.s:7169   .rodata.__FUNCTION__.5615:0000000000000000 $d
     /tmp/ccObKSes.s:7173   .rodata.__FUNCTION__.5615:0000000000000000 __FUNCTION__.5615
     /tmp/ccObKSes.s:7176   .rodata.__FUNCTION__.5398:0000000000000000 $d
     /tmp/ccObKSes.s:7180   .rodata.__FUNCTION__.5398:0000000000000000 __FUNCTION__.5398
     /tmp/ccObKSes.s:7183   .rodata.__FUNCTION__.5350:0000000000000000 $d
     /tmp/ccObKSes.s:7187   .rodata.__FUNCTION__.5350:0000000000000000 __FUNCTION__.5350
     /tmp/ccObKSes.s:7190   .rodata.__FUNCTION__.5391:0000000000000000 $d
     /tmp/ccObKSes.s:7194   .rodata.__FUNCTION__.5391:0000000000000000 __FUNCTION__.5391
     /tmp/ccObKSes.s:7197   .rodata.__FUNCTION__.5428:0000000000000000 $d
     /tmp/ccObKSes.s:7201   .rodata.__FUNCTION__.5428:0000000000000000 __FUNCTION__.5428
     /tmp/ccObKSes.s:7204   .rodata.__FUNCTION__.5434:0000000000000000 $d
     /tmp/ccObKSes.s:7208   .rodata.__FUNCTION__.5434:0000000000000000 __FUNCTION__.5434
ARM GAS  /tmp/ccObKSes.s 			page 184


     /tmp/ccObKSes.s:7211   .rodata.__FUNCTION__.5578:0000000000000000 $d
     /tmp/ccObKSes.s:7215   .rodata.__FUNCTION__.5578:0000000000000000 __FUNCTION__.5578
     /tmp/ccObKSes.s:7218   .rodata.__FUNCTION__.5438:0000000000000000 $d
     /tmp/ccObKSes.s:7222   .rodata.__FUNCTION__.5438:0000000000000000 __FUNCTION__.5438
     /tmp/ccObKSes.s:7225   .rodata.__FUNCTION__.5547:0000000000000000 $d
     /tmp/ccObKSes.s:7229   .rodata.__FUNCTION__.5547:0000000000000000 __FUNCTION__.5547
     /tmp/ccObKSes.s:7232   .rodata.__FUNCTION__.5445:0000000000000000 $d
     /tmp/ccObKSes.s:7236   .rodata.__FUNCTION__.5445:0000000000000000 __FUNCTION__.5445
     /tmp/ccObKSes.s:7239   .rodata.__FUNCTION__.5535:0000000000000000 $d
     /tmp/ccObKSes.s:7243   .rodata.__FUNCTION__.5535:0000000000000000 __FUNCTION__.5535
     /tmp/ccObKSes.s:7246   .rodata.__FUNCTION__.5449:0000000000000000 $d
     /tmp/ccObKSes.s:7250   .rodata.__FUNCTION__.5449:0000000000000000 __FUNCTION__.5449
     /tmp/ccObKSes.s:7253   .rodata.__FUNCTION__.5460:0000000000000000 $d
     /tmp/ccObKSes.s:7257   .rodata.__FUNCTION__.5460:0000000000000000 __FUNCTION__.5460
     /tmp/ccObKSes.s:7260   .rodata.__FUNCTION__.5597:0000000000000000 $d
     /tmp/ccObKSes.s:7264   .rodata.__FUNCTION__.5597:0000000000000000 __FUNCTION__.5597
     /tmp/ccObKSes.s:7267   .rodata.__FUNCTION__.5503:0000000000000000 $d
     /tmp/ccObKSes.s:7271   .rodata.__FUNCTION__.5503:0000000000000000 __FUNCTION__.5503
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_assert_handler
rt_object_init
rt_object_get_type
rt_object_is_systemobject
rt_hw_interrupt_disable
rt_thread_resume
rt_hw_interrupt_enable
rt_object_detach
rt_interrupt_get_nest
rt_kprintf
rt_object_allocate
rt_object_delete
rt_thread_self
rt_thread_suspend
rt_timer_control
rt_timer_start
rt_schedule
rt_object_trytake_hook
rt_object_take_hook
rt_object_put_hook
rt_thread_control
rt_malloc
rt_free
rt_tick_get
rt_memcpy
